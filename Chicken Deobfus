document.getElementById("mainMenu").style.backgroundImage = "url('https://mekoong.com/wp-content/uploads/2022/11/7151752393896643867-21.jpg')";
document.getElementById("gameName").innerHTML = "Chicken mod v2.4";
// ==UserScript==
// @name         Chicken Deobfuscated
// @match        *://*.moomoo.io/*
// @grant        none
// @icon         https://banner2.cleanpng.com/20180314/tte/kisspng-chicken-animation-clip-art-a-pen-head-5aa988430d7425.3158944415210599070551.jpg
// @namespace    syh
// @version
// @description  new update.Try now
// @author       NV and capybara
// ==/UserScript==

setTimeout(() => {
  document.getElementById("gameName").innerHTML = "by NV and Capy";
  setTimeout(() => {
    document.getElementById("gameName").innerHTML = "MOOMOO.IO";
    setTimeout(() => {}, 0x3e8);
  }, 0x4b0);
}, 0x1f4);
function getEl(_0x4dd163) {
  return document.getElementById(_0x4dd163);
}
let newFont = document.createElement("link");
newFont.rel = "stylesheet";
newFont.href = "https://fonts.googleapis.com/css?family=Ubuntu:700";
newFont.type = "text/css";
document.body.append(newFont);
let min = document.createElement("script");
min.src = "https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js";
document.body.append(min);
window.oncontextmenu = function () {
  return false;
};
let config = window.config;
config.clientSendRate = 0x9;
config.serverUpdateRate = 0x9;
config.deathFadeout = 0x0;
config.playerCapacity = 0x270f;
config.isSandbox = window.location.hostname == "sandbox.moomoo.io";
config.skinColors = ["#bf8f54", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373", "#91b2db"];
config.weaponVariants = [{
  id: 0x0,
  src: "",
  xp: 0x0,
  val: 0x1
}, {
  id: 0x1,
  src: "_g",
  xp: 0xbb8,
  val: 1.1
}, {
  id: 0x2,
  src: "_d",
  xp: 0x1b58,
  val: 1.18
}, {
  id: 0x3,
  src: "_r",
  poison: true,
  xp: 0x2ee0,
  val: 1.18
}, {
  id: 0x4,
  src: "_e",
  poison: true,
  heal: true,
  xp: 0x5dc0,
  val: 1.18
}];
config.anotherVisual = false;
config.useWebGl = true;
config.resetRender = false;
function waitTime(_0x50c3de) {
  return new Promise(_0x4d468f => {
    setTimeout(() => {
      _0x4d468f();
    }, _0x50c3de);
  });
}
let botSkts = [];
let canStore;
if (typeof Storage !== "undefined") {
  canStore = true;
}
function saveVal(_0x579c96, _0x3029bb) {
  if (canStore) {
    localStorage.setItem(_0x579c96, _0x3029bb);
  }
}
function deleteVal(_0x5e981a) {
  if (canStore) {
    localStorage.removeItem(_0x5e981a);
  }
}
function getSavedVal(_0x4e0089) {
  if (canStore) {
    return localStorage.getItem(_0x4e0089);
  }
  return null;
}
let gC = function (_0x75ada3, _0x1872a3) {
  try {
    let _0x3a24d7 = JSON.parse(getSavedVal(_0x75ada3));
    return typeof _0x3a24d7 === "object" ? _0x1872a3 : _0x3a24d7;
  } catch (_0x426653) {
    alert("dieskid");
    return _0x1872a3;
  }
};
function setCommands() {
  return {
    help: {
      desc: "Show Commands",
      action: function (_0x590878) {
        for (let _0x246893 in commands) {
          addMenuChText("/" + _0x246893, commands[_0x246893].desc, "lime", 0x1);
        }
      }
    },
    clear: {
      desc: "Clear Chats",
      action: function (_0x4e10e2) {
        resetMenuChText();
      }
    },
    debug: {
      desc: "Debug Mod For Development",
      action: function (_0x29ad77) {
        addDeadPlayer(player);
        addMenuChText("Debug", "Done", "#99ee99", 0x1);
      }
    },
    play: {
      desc: "Play Music ( /play [link] )",
      action: function (_0x1e7c4c) {
        let _0x31f1dc = _0x1e7c4c.split(" ");
        if (_0x31f1dc[0x1]) {
          let _0x53471a = new Audio(_0x31f1dc[0x1]);
          _0x53471a.play();
        } else {
          addMenuChText("Warn", "Enter Link ( /play [link] )", "#99ee99", 0x1);
        }
      }
    },
    bye: {
      desc: "Leave Game",
      action: function (_0x1a5f3f) {
        window.leave();
      }
    }
  };
}
function setConfigs() {
  return {
    killChat: true,
    autoBuy: true,
    autoBuyEquip: true,
    autoPush: true,
    revTick: true,
    spikeTick: true,
    predictTick: true,
    autoPlace: true,
    autoReplace: true,
    antiTrap: true,
    slowOT: false,
    attackDir: false,
    showDir: false,
    autoRespawn: false
  };
}
let commands = setCommands();
let configs = {
  killChat: true,
  autoBuy: true,
  autoBuyEquip: true,
  autoPush: true,
  revTick: true,
  spikeTick: true,
  predictTick: true,
  autoPlace: true,
  autoReplace: true,
  antiTrap: true,
  slowOT: false,
  attackDir: false,
  showDir: false,
  autoRespawn: false
};
window.removeConfigs = function () {
  for (let _0x447f13 in configs) {
    deleteVal(_0x447f13, configs[_0x447f13]);
  }
};
for (let cF in configs) {
  configs[cF] = gC(cF, configs[cF]);
}
window.changeMenu = function () {};
window.debug = function () {};
window.wasdMode = function () {};
window.startGrind = function () {};
window.connectFillBots = function () {};
window.destroyFillBots = function () {};
window.tryConnectBots = function () {};
window.destroyBots = function () {};
window.resBuild = function () {};
window.toggleBotsCircle = function () {};
window.toggleVisual = function () {};
window.prepareUI = function () {};
window.leave = function () {};
window.ping = 0x0;
window.ping = 0x0;
class HtmlAction {
  constructor(_0x435d87) {
    this.element = _0x435d87;
  }
  ["add"](_0x4e9737) {
    if (!this.element) {
      return undefined;
    }
    this.element.innerHTML += _0x4e9737;
  }
  ["newLine"](_0x1cbe69) {
    let _0x4a8331 = "<br>";
    if (_0x1cbe69 > 0x0) {
      _0x4a8331 = "";
      for (let _0x36b8ce = 0x0; _0x36b8ce < _0x1cbe69; _0x36b8ce++) {
        _0x4a8331 += "<br>";
      }
    }
    this.add(_0x4a8331);
  }
  ["checkBox"](_0x40b8e) {
    let _0x5304c2 = "<input type = \"checkbox\"";
    if (_0x40b8e.id) {
      _0x5304c2 += " id = " + _0x40b8e.id;
    }
    if (_0x40b8e.style) {
      _0x5304c2 += " style = " + _0x40b8e.style.replaceAll(" ", "");
    }
    if (_0x40b8e["class"]) {
      _0x5304c2 += " class = " + _0x40b8e["class"];
    }
    if (_0x40b8e.checked) {
      _0x5304c2 += " checked";
    }
    if (_0x40b8e.onclick) {
      _0x5304c2 += " onclick = " + _0x40b8e.onclick;
    }
    _0x5304c2 += ">";
    this.add(_0x5304c2);
  }
  ["text"](_0x33c485) {
    let _0x93ef52 = "<input type = \"text\"";
    if (_0x33c485.id) {
      _0x93ef52 += " id = " + _0x33c485.id;
    }
    if (_0x33c485.style) {
      _0x93ef52 += " style = " + _0x33c485.style.replaceAll(" ", "");
    }
    if (_0x33c485["class"]) {
      _0x93ef52 += " class = " + _0x33c485["class"];
    }
    if (_0x33c485.size) {
      _0x93ef52 += " size = " + _0x33c485.size;
    }
    if (_0x33c485.maxLength) {
      _0x93ef52 += " maxLength = " + _0x33c485.maxLength;
    }
    if (_0x33c485.value) {
      _0x93ef52 += " value = " + _0x33c485.value;
    }
    if (_0x33c485.placeHolder) {
      _0x93ef52 += " placeHolder = " + _0x33c485.placeHolder.replaceAll(" ", "&nbsp;");
    }
    _0x93ef52 += ">";
    this.add(_0x93ef52);
  }
  ["select"](_0x4ac94c) {
    let _0x3ab98a = "<select";
    if (_0x4ac94c.id) {
      _0x3ab98a += " id = " + _0x4ac94c.id;
    }
    if (_0x4ac94c.style) {
      _0x3ab98a += " style = " + _0x4ac94c.style.replaceAll(" ", "");
    }
    if (_0x4ac94c["class"]) {
      _0x3ab98a += " class = " + _0x4ac94c["class"];
    }
    _0x3ab98a += ">";
    for (let _0x4f6237 in _0x4ac94c.option) {
      _0x3ab98a += "<option value = " + _0x4ac94c.option[_0x4f6237].id;
      if (_0x4ac94c.option[_0x4f6237].selected) {
        _0x3ab98a += " selected";
      }
      _0x3ab98a += ">" + _0x4f6237 + "</option>";
    }
    _0x3ab98a += "</select>";
    this.add(_0x3ab98a);
  }
  ["button"](_0x5d57ec) {
    let _0x215205 = "<button";
    if (_0x5d57ec.id) {
      _0x215205 += " id = " + _0x5d57ec.id;
    }
    if (_0x5d57ec.style) {
      _0x215205 += " style = " + _0x5d57ec.style.replaceAll(" ", "");
    }
    if (_0x5d57ec["class"]) {
      _0x215205 += " class = " + _0x5d57ec["class"];
    }
    if (_0x5d57ec.onclick) {
      _0x215205 += " onclick = " + _0x5d57ec.onclick;
    }
    _0x215205 += ">";
    if (_0x5d57ec.innerHTML) {
      _0x215205 += _0x5d57ec.innerHTML;
    }
    _0x215205 += "</button>";
    this.add(_0x215205);
  }
  ["selectMenu"](_0x7e8e8d) {
    let _0x5f2387 = "<select";
    if (!_0x7e8e8d.id) {
      alert("please put id skid");
      return;
    }
    window[_0x7e8e8d.id + "Func"] = function () {};
    if (_0x7e8e8d.id) {
      _0x5f2387 += " id = " + _0x7e8e8d.id;
    }
    if (_0x7e8e8d.style) {
      _0x5f2387 += " style = " + _0x7e8e8d.style.replaceAll(" ", "");
    }
    if (_0x7e8e8d["class"]) {
      _0x5f2387 += " class = " + _0x7e8e8d["class"];
    }
    _0x5f2387 += " onchange = window." + (_0x7e8e8d.id + "Func") + "()";
    _0x5f2387 += ">";
    let _0x241183;
    let _0x2b7f3c = 0x0;
    for (let _0x2b1b4b in _0x7e8e8d.menu) {
      _0x5f2387 += "<option value = " + ("option_" + _0x2b1b4b) + " id = " + ("O_" + _0x2b1b4b);
      if (_0x7e8e8d.menu[_0x2b1b4b]) {
        _0x5f2387 += " checked";
      }
      _0x5f2387 += " style = \"color: " + (_0x7e8e8d.menu[_0x2b1b4b] ? "#000" : "#fff") + "; background: " + (_0x7e8e8d.menu[_0x2b1b4b] ? "#8ecc51" : "#cc5151") + ";\">" + _0x2b1b4b + "</option>";
      _0x2b7f3c++;
    }
    _0x5f2387 += "</select>";
    this.add(_0x5f2387);
    _0x2b7f3c = 0x0;
    for (let _0x207ecc in _0x7e8e8d.menu) {
      window[_0x207ecc + "Func"] = function () {
        _0x7e8e8d.menu[_0x207ecc] = !!document.getElementById("check_" + _0x207ecc).checked;
        saveVal(_0x207ecc, _0x7e8e8d.menu[_0x207ecc]);
        document.getElementById("O_" + _0x207ecc).style.color = _0x7e8e8d.menu[_0x207ecc] ? "#000" : "#fff";
        document.getElementById("O_" + _0x207ecc).style.background = _0x7e8e8d.menu[_0x207ecc] ? "#8ecc51" : "#cc5151";
      };
      this.checkBox({
        id: "check_" + _0x207ecc,
        style: "display: " + (_0x2b7f3c == 0x0 ? "inline-block" : "none") + ";",
        class: "checkB",
        onclick: "window." + (_0x207ecc + "Func") + "()",
        checked: _0x7e8e8d.menu[_0x207ecc]
      });
      _0x2b7f3c++;
    }
    _0x241183 = "check_" + document.getElementById(_0x7e8e8d.id).value.split("_")[0x1];
    window[_0x7e8e8d.id + "Func"] = function () {
      document.getElementById(_0x241183).style.display = "none";
      _0x241183 = "check_" + document.getElementById(_0x7e8e8d.id).value.split("_")[0x1];
      document.getElementById(_0x241183).style.display = "inline-block";
    };
  }
}
class Html {
  constructor() {
    this.element = null;
    this.action = null;
    this.divElement = null;
    this.startDiv = function (_0x3a7a77, _0x24b952) {
      let _0x5b6992 = document.createElement("div");
      if (_0x3a7a77.id) {
        _0x5b6992.id = _0x3a7a77.id;
      }
      if (_0x3a7a77.style) {
        _0x5b6992.style = _0x3a7a77.style;
      }
      if (_0x3a7a77["class"]) {
        _0x5b6992.className = _0x3a7a77["class"];
      }
      this.element.appendChild(_0x5b6992);
      this.divElement = _0x5b6992;
      let _0x5a176d = new HtmlAction(_0x5b6992);
      if (typeof _0x24b952 == "function") {
        _0x24b952(_0x5a176d);
      }
    };
    this.addDiv = function (_0x4c8360, _0x3f59e8) {
      let _0x252798 = document.createElement("div");
      if (_0x4c8360.id) {
        _0x252798.id = _0x4c8360.id;
      }
      if (_0x4c8360.style) {
        _0x252798.style = _0x4c8360.style;
      }
      if (_0x4c8360["class"]) {
        _0x252798.className = _0x4c8360["class"];
      }
      if (_0x4c8360.appendID) {
        document.getElementById(_0x4c8360.appendID).appendChild(_0x252798);
      }
      this.divElement = _0x252798;
      let _0x2e7b3d = new HtmlAction(_0x252798);
      if (typeof _0x3f59e8 == "function") {
        _0x3f59e8(_0x2e7b3d);
      }
    };
  }
  ["set"](_0x2c3f72) {
    this.element = document.getElementById(_0x2c3f72);
    this.action = new HtmlAction(this.element);
  }
  ["resetHTML"](_0xdb97ac) {
    if (_0xdb97ac) {
      this.element.innerHTML = "";
    } else {
      this.element.innerHTML = "";
    }
  }
  ["setStyle"](_0x5205d6) {
    this.element.style = _0x5205d6;
  }
  ["setCSS"](_0x4cb2f7) {
    this.action.add("<style>" + _0x4cb2f7 + "</style>");
  }
}
let HTML = new Html();
let menuDiv = document.createElement("div");
menuDiv.id = "menuDiv";
menuDiv.draggable = true;
menuDiv.addEventListener("dragstart", function (_0x1d5cbf) {
  _0x1d5cbf.dataTransfer.setData("text/plain", "");
});
document.addEventListener("dragover", function (_0x493af6) {
  menuDiv.style.left = _0x493af6.clientX - menuDiv.offsetWidth / 0x2 + "px";
  menuDiv.style.top = _0x493af6.clientY - menuDiv.offsetHeight / 0x2 + "px";
});
document.body.appendChild(menuDiv);
HTML.set("menuDiv");
HTML.setStyle("\n            position: absolute;\n            left: 20px;\n            top: 20px;\n            ");
HTML.resetHTML();
HTML.setCSS("\n            body {\n    background-color: rgba(0, 0, 0, 0.25);\n    color:#fff; /* Белый цвет текста */\n    font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif; /* Более роскошный шрифт */\n}\n\n.menuClass {\n    color: #fff;\n    font-size: 20px; /* Увеличенный размер шрифта */\n    text-align: left;\n    padding: 20px; /* Увеличенный внутренний отступ */\n    width: 200px; /* Увеличенная ширина меню */\n    background-color: rgba(0, 0, 0, 0.25);\n    border: 2px solid #555; /* Черный цвет рамки */\n    border-radius: 12px; /* Более сильно скругленные углы */\n    box-shadow: 0 4px 8px rgba(0,0,0,0.4); /* Тень для выделения */\n}\n\n.menuC {\n    display: none;\n    font-size: 12px; /* Уменьшенный размер шрифта */\n    max-height: 200px; /* Увеличенная максимальная высота */\n    overflow-y: auto;\n}\n\n.menuB {\n    text-align: center;\n    background-color: nn\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n    padding: 4 4px; /* Увеличенный внутренний отступ */\n    cursor: pointer;\n    transition: background-color 0.3s ease\n}\n\n.menuB:hover {\n    background-color: #0056b3;\n}\n\n\n\n.menuB:active {\n    transform: translateY(1px);\n}\n\n.customText {\n    color: #fff;\n    border: 1px solid #555;\n    border-radius: 5px;\n    padding: 2px;\n    transition: background-color 0.3s ease;\n}\n\n.customText:focus {\n    background-color:#444 ; /* Темно-серый цвет фона при фокусировке */\n}\n\n.checkB {\n    cursor: pointer;\n}\n\n.Cselect {\n    background-color: #444; /* Темно-серый цвет фона */\n    color: #fff;\n    border: 1px solid #555;\n    border-radius: 66px;\n    padding: 2px;\n}\n\n#menuChanger {\n    position: absolute;\n    right: 20px; /* Увеличенный отступ справа */\n    top: 20px; /* Увеличенный отступ сверху */\n    background-color: transparent;\n    color: #fff;\n    border: none;\n    cursor: pointer;\n}\n\n#menuChanger:hover {\n    color: #ccc; /* Светло-серый цвет при наведении */\n}\n\n/* Скроллбары */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #333; /* Темно-серый цвет фона */\n}\n\n::-webkit-scrollbar-thumb {\n    background: #666; /* Светло-серый цвет скроллбара */\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #999; /* Более светлый цвет при наведении */\n}\n\n/* Добавление узоров на задний фон */\nbody {\n\n}\n\n            ");
HTML.startDiv({
  id: "menuHeadLine",
  class: "menuClass"
}, _0x1af1f8 => {
  _0x1af1f8.add("ᑕᕼIᑕKEᑎ ᐯ2.4 🐔");
  _0x1af1f8.button({
    id: "menuChanger",
    class: "material-icons",
    innerHTML: "sync",
    onclick: "window.changeMenu()"
  });
  HTML.addDiv({
    id: "menuButtons",
    style: "display: block; overflow-y: visible;",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x1bbfb6 => {
    _0x1bbfb6.button({
      class: "menuB",
      innerHTML: "Debug",
      onclick: "window.debug()"
    });
  });
  HTML.addDiv({
    id: "menuMain",
    style: "display: block",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x51a329 => {
    _0x51a329.button({
      class: "menuB",
      innerHTML: "AutoHit",
      onclick: "window.wasdMode()"
    });
    _0x51a329.newLine();
    _0x51a329.add("autoRuby: ");
    _0x51a329.checkBox({
      id: "weaponGrind",
      class: "checkB",
      onclick: "window.startGrind()"
    });
    _0x51a329.newLine(0x2);
    HTML.addDiv({
      style: "font-size: 30px; color: #4f4f4f;",
      appendID: "menuMain"
    }, _0x21125d => {
      _0x21125d.add("_______________");
    });
    _0x51a329.add("Anti-Push:");
    _0x51a329.checkBox({
      id: "antipush",
      class: "checkB",
      checked: true
    });
    _0x51a329.newLine();
    _0x51a329.add("Auto-Heal:");
    _0x51a329.checkBox({
      id: "healingBeta",
      class: "checkB",
      checked: true
    });
    _0x51a329.newLine();
  });
  HTML.addDiv({
    id: "menuConfig",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x4bea96 => {
    _0x4bea96.add("AutoPlacer Placement Tick: ");
    _0x4bea96.text({
      id: "autoPlaceTick",
      class: "customText",
      value: "2",
      size: "2em",
      maxLength: "1"
    });
    _0x4bea96.newLine();
    _0x4bea96.add("Configs: ");
    _0x4bea96.selectMenu({
      id: "configsChanger",
      class: "Cselect",
      menu: configs
    });
    _0x4bea96.newLine();
    _0x4bea96.add("InstaKill Type: ");
    _0x4bea96.select({
      id: "instaType",
      class: "Cselect",
      option: {
        OneShot: {
          id: "oneShot",
          selected: true
        },
        Spammer: {
          id: "spammer"
        }
      }
    });
    _0x4bea96.newLine();
    _0x4bea96.add("AntiBull Type: ");
    _0x4bea96.select({
      id: "antiBullType",
      class: "Cselect",
      option: {
        "Disable AntiBull": {
          id: "noab",
          selected: true
        },
        "When Reloaded": {
          id: "abreload"
        },
        "Primary Reloaded": {
          id: "abalway"
        }
      }
    });
    _0x4bea96.newLine();
    _0x4bea96.add("Weapon Range: ");
    _0x4bea96.checkBox({
      id: "weaponRange",
      class: "checkB",
      checked: true
    });
    _0x4bea96.newLine();
    _0x4bea96.newLine();
    _0x4bea96.newLine();
    _0x4bea96.add("Backup Nobull Insta: ");
    _0x4bea96.checkBox({
      id: "backupNobull",
      class: "checkB",
      checked: true
    });
    _0x4bea96.newLine();
    _0x4bea96.add("Turret Gear Combat: ");
    _0x4bea96.checkBox({
      id: "turretCombat",
      class: "checkB"
    });
    _0x4bea96.newLine();
    _0x4bea96.add("Safe AntiSpikeTick: ");
    _0x4bea96.checkBox({
      id: "safeAntiSpikeTick",
      class: "checkB",
      checked: true
    });
    _0x4bea96.newLine();
  });
  HTML.addDiv({
    id: "menuOther",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x249fca => {
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Connect Bots",
      onclick: "window.tryConnectBots()"
    });
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Disconnect Bots",
      onclick: "window.destroyBots()"
    });
    _0x249fca.newLine();
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Connect FBots",
      onclick: "window.connectFillBots()"
    });
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Disconnect FBots",
      onclick: "window.destroyFillBots()"
    });
    _0x249fca.newLine();
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Reset Break Objects",
      onclick: "window.resBuild()"
    });
    _0x249fca.newLine();
    _0x249fca.add("Break Objects Range: ");
    _0x249fca.text({
      id: "breakRange",
      class: "customText",
      value: "700",
      size: "3em",
      maxLength: "4"
    });
    _0x249fca.newLine();
    _0x249fca.add("Predict Movement Type: ");
    _0x249fca.select({
      id: "predictType",
      class: "Cselect",
      option: {
        "Disable Render": {
          id: "disableRender",
          selected: true
        },
        "X/Y and 2": {
          id: "pre2"
        },
        "X/Y and 3": {
          id: "pre3"
        }
      }
    });
    _0x249fca.newLine();
    _0x249fca.add("Render Placers: ");
    _0x249fca.checkBox({
      id: "placeVis",
      class: "checkB",
      checked: true
    });
    _0x249fca.newLine();
    _0x249fca.add("Bot Mode: ");
    _0x249fca.select({
      id: "mode",
      class: "Cselect",
      option: {
        "Clear Building": {
          id: "clear",
          selected: true
        },
        Sync: {
          id: "zync"
        },
        Search: {
          id: "zearch"
        },
        "Clear Everything": {
          id: "fuckemup"
        },
        Flex: {
          id: "flex"
        }
      }
    });
    _0x249fca.newLine(0x2);
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Toggle Fbots Circle",
      onclick: "window.toggleBotsCircle()"
    });
    _0x249fca.newLine();
    _0x249fca.add("Circle Rad: ");
    _0x249fca.text({
      id: "circleRad",
      class: "customText",
      value: "200",
      size: "3em",
      maxLength: "4"
    });
    _0x249fca.newLine();
    _0x249fca.add("Rad Speed: ");
    _0x249fca.text({
      id: "radSpeed",
      class: "customText",
      value: "0.1",
      size: "2em",
      maxLength: "3"
    });
    _0x249fca.newLine();
    _0x249fca.add("Bot Zetup Type: ");
    _0x249fca.select({
      id: "setup",
      class: "Cselect",
      option: {
        "Dagger Musket": {
          id: "dm",
          selected: true
        },
        "Katana Hammer": {
          id: "kh"
        },
        "Dagger Repeater-Crossbow": {
          id: "dr"
        },
        "Zhort-Zword Muzket": {
          id: "zd"
        }
      }
    });
    _0x249fca.newLine(0x2);
    _0x249fca.add("Cross World: ");
    _0x249fca.checkBox({
      id: "funni",
      class: "checkB"
    });
    _0x249fca.newLine();
    _0x249fca.button({
      class: "menuB",
      innerHTML: "Toggle Another Visual",
      onclick: "window.toggleVisual()"
    });
    _0x249fca.newLine();
  });
});
let menuChatDiv = document.createElement("div");
menuChatDiv.id = "menuChatDiv";
document.body.appendChild(menuChatDiv);
HTML.set("menuChatDiv");
HTML.setStyle("\n            position: absolute;\n            display: none;\n            left: 0px;\n            top: 25px;\n          //  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.65);\n            ");
HTML.resetHTML();
HTML.setCSS("\n                    .chDiv {\n    color: #fff;\n    padding: 10px;\n    width: 357px;\n    height: 217px;\n    background-color: rgba(0, 0, 0, 0.2);\n    font-family: \"HammerSmith One\", monospace;\n //   border-radius: 15px;\n//    box-shadow: black 1px 2px 19px;\n//backdrop-filter: blur(3px);\n\n}\n.chMainDiv {\n    font-family: \"Ubuntu\";\n    font-size: 16px;\n    max-height: 215px;\n    overflow-y: scroll;\n    scrollbar-width: thin;\n    scrollbar-color: rgba(0, 0, 0, 0.5) rgba(0, 0, 0, 0.1);\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    overflow-x: hidden;\n}\n.chMainDiv::-webkit-scrollbar {\n    width: 8px;\n}\n.chMainDiv::-webkit-scrollbar-thumb {\n    background-color: rgba(0, 0, 0, 0.5);\n}\n.chMainDiv::-webkit-scrollbar-thumb:hover {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.chMainBox {\ndisplay:none;\n     position: absolute;\n    left: 10px;\n    bottom: 10px;\n    width: 380px;\n    height: 25px;\n    background-color: rgba(255, 255, 255, 0.1);\n    border-radius: 5px;\n    color: rgba(255, 255, 255, 0.75);\n    font-family: \"HammerSmith One\";\n    font-size: 12px;\n}\n            ");
HTML.startDiv({
  id: "mChDiv",
  class: "chDiv"
}, _0x3ac7ff => {
  HTML.addDiv({
    id: "mChMain",
    class: "chMainDiv",
    appendID: "mChDiv"
  }, _0x564747 => {});
  _0x3ac7ff.text({
    id: "mChBox",
    class: "chMainBox"
  });
});
let menuChats = document.getElementById("mChMain");
let menuChatBox = document.getElementById("mChBox");
let menuCBFocus = false;
let menuChCounts = 0x0;
menuChatBox.value = "";
menuChatBox.addEventListener("focus", () => {
  menuCBFocus = true;
});
menuChatBox.addEventListener("blur", () => {
  menuCBFocus = false;
});
function addMenuChText(_0x343f81, _0x55f5b6, _0x2fd0a0, _0x203344) {
  HTML.set("menuChatDiv");
  _0x2fd0a0 = _0x2fd0a0 || "white";
  let _0x5872a2 = new Date();
  let _0x520eec = _0x5872a2.getMinutes();
  let _0x197291 = _0x5872a2.getHours();
  let _0x136601 = "";
  if (!_0x203344) {
    _0x136601 += (_0x197291 < 0xa ? "0" : "") + _0x197291 + ":" + ((_0x520eec < 0xa ? "0" : "") + _0x520eec);
  }
  if (_0x343f81) {
    _0x136601 += "" + ((!_0x203344 ? " - " : "") + _0x343f81);
  }
  if (_0x55f5b6) {
    _0x136601 += (_0x343f81 ? ": " : !_0x203344 ? " - " : "") + _0x55f5b6 + "\n";
  }
  _0x136601 = "<plaintext>" + _0x136601;
  HTML.addDiv({
    id: "menuChDisp",
    style: "color: " + _0x2fd0a0,
    appendID: "mChMain"
  }, _0x4d79d2 => {
    _0x4d79d2.add(_0x136601);
  });
  menuChats.scrollTop = menuChats.scrollHeight;
  menuChCounts++;
}
function chch(_0x3fd4, _0xc3718b, _0x2c53b0, _0x1029c8) {
  HTML.set("menuChatDiv");
  _0x2c53b0 = _0x2c53b0 || "white";
  let _0x4a040a = "";
  if (_0xc3718b) {
    _0x4a040a += (_0x3fd4 ? ": " : !_0x1029c8 ? "" : "") + _0xc3718b + "\n";
  }
  HTML.addDiv({
    id: "menuChDisp",
    style: "color: " + _0x2c53b0,
    appendID: "mChMain"
  }, _0x27c1b4 => {
    _0x27c1b4.add(_0x4a040a);
  });
  menuChats.scrollTop = menuChats.scrollHeight;
  menuChCounts++;
}
function resetMenuChText() {
  menuChats.innerHTML = "";
  menuChCounts = 0x0;
  addMenuChText(null, "Chat '/help' for a list of chat commands.", "white", 0x1);
}
resetMenuChText();
let menuIndex = 0x0;
let menus = ["menuMain", "menuConfig", "menuOther"];
window.changeMenu = function () {
  document.getElementById(menus[menuIndex % menus.length]).style.display = "none";
  menuIndex++;
  document.getElementById(menus[menuIndex % menus.length]).style.display = "block";
};
let mStatus = document.createElement("div");
mStatus.id = "status";
document.getElementById("gameUI").appendChild(mStatus);
HTML.set("status");
HTML.setStyle("\n            display: block;\n            position: absolute;\n            color: #ddd;\n            font: 15px Hammersmith One;\n            bottom: 215px;\n            left: 20px;\n            ");
HTML.resetHTML();
HTML.setCSS("\n            .sizing {\n                font-size: 15px;\n            }\n            .mod {\n                font-size: 15px;\n                display: inline-block;\n            }\n            ");
HTML.startDiv({
  id: "uehmod",
  class: "sizing"
}, _0x1794b5 => {
  _0x1794b5.add("Ping: ");
  HTML.addDiv({
    id: "pingFps",
    class: "mod",
    appendID: "uehmod"
  }, _0x25c2dd => {
    _0x25c2dd.add("None");
  });
  _0x1794b5.newLine();
  _0x1794b5.add("Packet: ");
  HTML.addDiv({
    id: "packetStatus",
    class: "mod",
    appendID: "uehmod"
  }, _0x2fcf26 => {
    _0x2fcf26.add("None");
  });
});
let openMenu = false;
let WS = undefined;
let socketID = undefined;
let useWasd = false;
let secPacket = 0x0;
let firstSend = {
  sec: false
};
let game = {
  tick: 0x0,
  tickQueue: [],
  tickBase: function (_0x4030b9, _0x15d7d3) {
    if (this.tickQueue[this.tick + _0x15d7d3]) {
      this.tickQueue[this.tick + _0x15d7d3].push(_0x4030b9);
    } else {
      this.tickQueue[this.tick + _0x15d7d3] = [_0x4030b9];
    }
  },
  tickRate: 0x3e8 / config.serverUpdateRate,
  tickSpeed: 0x0,
  lastTick: performance.now()
};
let modConsole = [];
let dontSend = false;
let fpsTimer = {
  last: 0x0,
  time: 0x0,
  ltime: 0x0
};
let lastMoveDir = undefined;
let lastsp = ["cc", 0x1, "__proto__"];
WebSocket.prototype.nsend = WebSocket.prototype.send;
WebSocket.prototype.send = function (_0x2bdca9) {
  if (!WS) {
    WS = this;
    WS.addEventListener("message", function (_0x1c95a0) {
      getMessage(_0x1c95a0);
    });
    WS.addEventListener("close", _0x4f9563 => {
      if (_0x4f9563.code == 0xfa1) {
        window.location.reload();
      }
    });
  }
  if (WS == this) {
    dontSend = false;
    let _0x3315f3 = new Uint8Array(_0x2bdca9);
    let _0x3dff82 = window.msgpack.decode(_0x3315f3);
    let _0x9da7d1 = _0x3dff82[0x0];
    _0x3315f3 = _0x3dff82[0x1];
    if (_0x9da7d1 == "6") {
      if (_0x3315f3[0x0]) {
        let _0x3daf91 = ["cunt", "whore", "fuck", "shit", "faggot", "nigger", "nigga", "dick", "vagina", "minge", "cock", "rape", "cum", "sex", "tits", "penis", "clit", "pussy", "meatcurtain", "jizz", "prune", "douche", "wanker", "damn", "bitch", "dick", "fag", "bastard"];
        let _0x28496e;
        _0x3daf91.forEach(_0x53ae8d => {
          if (_0x3315f3[0x0].indexOf(_0x53ae8d) > -0x1) {
            _0x28496e = "";
            for (let _0x27e384 = 0x0; _0x27e384 < _0x53ae8d.length; ++_0x27e384) {
              if (_0x27e384 == 0x1) {
                _0x28496e += String.fromCharCode(0x0);
              }
              _0x28496e += _0x53ae8d[_0x27e384];
            }
            let _0x6068fe = new RegExp(_0x53ae8d, "g");
            _0x3315f3[0x0] = _0x3315f3[0x0].replace(_0x6068fe, _0x28496e);
          }
        });
        _0x3315f3[0x0] = _0x3315f3[0x0].slice(0x0, 0x1e);
      }
    } else {
      if (_0x9da7d1 == "L") {
        _0x3315f3[0x0] = _0x3315f3[0x0] + String.fromCharCode(0x0).repeat(0x7);
        _0x3315f3[0x0] = _0x3315f3[0x0].slice(0x0, 0x7);
      } else {
        if (_0x9da7d1 == "M") {
          _0x3315f3[0x0].name = _0x3315f3[0x0].name == "" ? "unknown" : _0x3315f3[0x0].name;
          _0x3315f3[0x0].moofoll = true;
          _0x3315f3[0x0].skin = _0x3315f3[0x0].skin == 0xa ? "__proto__" : _0x3315f3[0x0].skin;
          lastsp = [_0x3315f3[0x0].name, _0x3315f3[0x0].moofoll, _0x3315f3[0x0].skin];
        } else {
          if (_0x9da7d1 == "D") {
            if (0x0 == _0x3315f3[0x0] || [null, undefined].includes(_0x3315f3[0x0])) {
              dontSend = true;
            } else {
              my.lastDir = _0x3315f3[0x0];
            }
          } else {
            if (_0x9da7d1 == "d") {
              if (!_0x3315f3[0x2]) {
                dontSend = true;
              } else if (![null, undefined].includes(_0x3315f3[0x1])) {
                my.lastDir = _0x3315f3[0x1];
              }
            } else {
              if (_0x9da7d1 == "K") {
                if (!_0x3315f3[0x1]) {
                  dontSend = true;
                }
              } else {
                if (_0x9da7d1 == "S") {
                  instaC.wait = !instaC.wait;
                  dontSend = true;
                } else if (_0x9da7d1 == "a") {
                  if (_0x3315f3[0x1]) {
                    if (player.moveDir == _0x3315f3[0x0]) {
                      dontSend = true;
                    }
                    player.moveDir = _0x3315f3[0x0];
                  } else {
                    dontSend = true;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (!dontSend) {
      let _0x276de0 = window.msgpack.encode([_0x9da7d1, _0x3315f3]);
      this.nsend(_0x276de0);
      firstSend.sec = true;
      setTimeout(() => {
        firstSend.sec = false;
        secPacket = 0x0;
      }, 0x3e8);
      secPacket++;
    }
  } else {
    this.nsend(_0x2bdca9);
  }
};
function packet(_0x10acff) {
  let _0x16462f = Array.prototype.slice.call(arguments, 0x1);
  let _0x5008c0 = window.msgpack.encode([_0x10acff, _0x16462f]);
  WS.send(_0x5008c0);
}
function origPacket(_0x3116dd) {
  let _0x1fbe05 = Array.prototype.slice.call(arguments, 0x1);
  let _0x1b376d = window.msgpack.encode([_0x3116dd, _0x1fbe05]);
  WS.nsend(_0x1b376d);
}
window.leave = function () {
  origPacket("kys", {
    "frvr is so bad": true,
    "sidney is too good": true,
    "dev are too weak": true
  });
};
let io = {
  send: packet
};
function getMessage(_0x10e7f3) {
  let _0x5cd488 = new Uint8Array(_0x10e7f3.data);
  let _0x5dbb13 = window.msgpack.decode(_0x5cd488);
  let _0x2f3beb = _0x5dbb13[0x0];
  _0x5cd488 = _0x5dbb13[0x1];
  let _0x4fd66e = {
    A: setInitData,
    C: setupGame,
    D: addPlayer,
    E: removePlayer,
    a: updatePlayers,
    G: updateLeaderboard,
    H: loadGameObject,
    I: loadAI,
    J: animateAI,
    K: gatherAnimation,
    L: wiggleGameObject,
    M: shootTurret,
    N: updatePlayerValue,
    O: updateHealth,
    P: killPlayer,
    Q: killObject,
    R: killObjects,
    S: updateItemCounts,
    T: updateAge,
    U: updateUpgrades,
    V: updateItems,
    X: addProjectile,
    0x2: allianceNotification,
    0x3: setPlayerTeam,
    0x4: setAlliancePlayers,
    0x5: updateStoreItems,
    0x6: receiveChat,
    0x7: updateMinimap,
    0x8: showText,
    0x9: pingMap,
    0x0: pingSocketResponse
  };
  if (_0x2f3beb == "io-init") {
    socketID = _0x5cd488[0x0];
  } else if (_0x4fd66e[_0x2f3beb]) {
    _0x4fd66e[_0x2f3beb].apply(undefined, _0x5cd488);
  }
}
Math.lerpAngle = function (_0x212b95, _0xaa5b0a, _0x4af258) {
  let _0x524e33 = Math.abs(_0xaa5b0a - _0x212b95);
  if (_0x524e33 > Math.PI) {
    if (_0x212b95 > _0xaa5b0a) {
      _0xaa5b0a += Math.PI * 0x2;
    } else {
      _0x212b95 += Math.PI * 0x2;
    }
  }
  let _0x96719c = _0xaa5b0a + (_0x212b95 - _0xaa5b0a) * _0x4af258;
  if (_0x96719c >= 0x0 && _0x96719c <= Math.PI * 0x2) {
    return _0x96719c;
  }
  return _0x96719c % (Math.PI * 0x2);
};
CanvasRenderingContext2D.prototype.roundRect = function (_0x1cd196, _0x29d1d6, _0x2f5f79, _0x1b3b95, _0x2e2a83) {
  if (_0x2f5f79 < 0x2 * _0x2e2a83) {
    _0x2e2a83 = _0x2f5f79 / 0x2;
  }
  if (_0x1b3b95 < 0x2 * _0x2e2a83) {
    _0x2e2a83 = _0x1b3b95 / 0x2;
  }
  if (_0x2e2a83 < 0x0) {
    _0x2e2a83 = 0x0;
  }
  this.beginPath();
  this.moveTo(_0x1cd196 + _0x2e2a83, _0x29d1d6);
  this.arcTo(_0x1cd196 + _0x2f5f79, _0x29d1d6, _0x1cd196 + _0x2f5f79, _0x29d1d6 + _0x1b3b95, _0x2e2a83);
  this.arcTo(_0x1cd196 + _0x2f5f79, _0x29d1d6 + _0x1b3b95, _0x1cd196, _0x29d1d6 + _0x1b3b95, _0x2e2a83);
  this.arcTo(_0x1cd196, _0x29d1d6 + _0x1b3b95, _0x1cd196, _0x29d1d6, _0x2e2a83);
  this.arcTo(_0x1cd196, _0x29d1d6, _0x1cd196 + _0x2f5f79, _0x29d1d6, _0x2e2a83);
  this.closePath();
  return this;
};
function resetMoveDir() {
  keys = {};
  io.send("e");
}
let allChats = [];
let ticks = {
  tick: 0x0,
  delay: 0x0,
  time: [],
  manage: []
};
let ais = [];
let players = [];
let alliances = [];
let alliancePlayers = [];
let allianceNotifications = [];
let gameObjects = [];
let liztobj = [];
let projectiles = [];
let deadPlayers = [];
let breakObjects = [];
let player;
let playerSID;
let tmpObj;
let enemy = [];
let nears = [];
let near = [];
let my = {
  reloaded: false,
  waitHit: 0x0,
  autoAim: false,
  revAim: false,
  ageInsta: true,
  reSync: false,
  bullTick: 0x0,
  anti0Tick: 0x0,
  antiSync: false,
  safePrimary: function (_0x1b33e3) {
    return [0x0, 0x8].includes(_0x1b33e3.primaryIndex);
  },
  safeSecondary: function (_0xe82fab) {
    return [0xa, 0xb, 0xe].includes(_0xe82fab.secondaryIndex);
  },
  lastDir: 0x0,
  autoPush: false,
  pushData: {}
};
function findID(_0x1cab3e, _0x3eec1f) {
  return _0x1cab3e.find(_0x484eeb => _0x484eeb.id == _0x3eec1f);
}
function findSID(_0x1e2023, _0xcefb61) {
  return _0x1e2023.find(_0x253f54 => _0x253f54.sid == _0xcefb61);
}
function findPlayerByID(_0x318a62) {
  return findID(players, _0x318a62);
}
function findPlayerBySID(_0x1ea69d) {
  return findSID(players, _0x1ea69d);
}
function findAIBySID(_0x11d98b) {
  return findSID(ais, _0x11d98b);
}
function findObjectBySid(_0x22d695) {
  return findSID(gameObjects, _0x22d695);
}
function findProjectileBySid(_0x3939a7) {
  return findSID(gameObjects, _0x3939a7);
}
let adCard = document.getElementById("adCard");
adCard.remove();
let promoImageHolder = document.getElementById("promoImgHolder");
promoImageHolder.remove();
let chatButton = document.getElementById("chatButton");
chatButton.remove();
let gameCanvas = document.getElementById("gameCanvas");
let mainContext = gameCanvas.getContext("2d");
let mapDisplay = document.getElementById("mapDisplay");
let mapContext = mapDisplay.getContext("2d");
mapDisplay.width = 0x12c;
mapDisplay.height = 0x12c;
let storeMenu = document.getElementById("storeMenu");
let storeHolder = document.getElementById("storeHolder");
let upgradeHolder = document.getElementById("upgradeHolder");
let upgradeCounter = document.getElementById("upgradeCounter");
let chatBox = document.getElementById("chatBox");
chatBox.autocomplete = "off";
chatBox.style.textAlign = "center";
chatBox.style.width = "18em";
let chatHolder = document.getElementById("chatHolder");
let actionBar = document.getElementById("actionBar");
let leaderboardData = document.getElementById("leaderboardData");
let itemInfoHolder = document.getElementById("itemInfoHolder");
let menuCardHolder = document.getElementById("menuCardHolder");
let mainMenu = document.getElementById("mainMenu");
let diedText = document.getElementById("diedText");
let screenWidth;
let screenHeight;
let maxScreenWidth = config.maxScreenWidth;
let maxScreenHeight = config.maxScreenHeight;
let delta;
let now;
let lastUpdate = performance.now();
let camX;
let camY;
let tmpDir;
let mouseX = 0x0;
let mouseY = 0x0;
let allianceMenu = document.getElementById("allianceMenu");
let waterMult = 0x1;
let waterPlus = 0x0;
let firstSetup = true;
let keys = {};
let moveKeys = {
  0x57: [0x0, -0x1],
  0x26: [0x0, -0x1],
  0x53: [0x0, 0x1],
  0x28: [0x0, 0x1],
  0x41: [-0x1, 0x0],
  0x25: [-0x1, 0x0],
  0x44: [0x1, 0x0],
  0x27: [0x1, 0x0]
};
let attackState = 0x0;
let inGame = false;
let macro = {};
let mills = {
  place: 0x0,
  placeSpawnPads: 0x0
};
let lastDir;
let lastLeaderboardData = [];
let inWindow = true;
window.onblur = function () {
  inWindow = false;
};
window.onfocus = function () {
  inWindow = true;
  if (player && player.alive) {}
};
let ms = {
  avg: 0x0,
  max: 0x0,
  min: 0x0,
  delay: 0x0
};
function pingSocketResponse() {
  let _0x26ecff = window.pingTime;
  const _0x571795 = document.getElementById("pingDisplay");
  _0x571795.innerText = "";
  if (_0x26ecff > 0x0 || isNaN(0x0)) {
    ms.max = _0x26ecff;
  }
  if (_0x26ecff < 0x0 || isNaN(0x0)) {
    ms.min = _0x26ecff;
  }
}
let placeVisible = [];
class Utils {
  constructor() {
    let _0x143328 = Math.abs;
    let _0xe2ab79 = Math.sqrt;
    let _0x219dfc = Math.atan2;
    let _0x5db8c9 = Math.PI;
    let _0x19e839 = this;
    this.round = function (_0x4fd884, _0x5bf767) {
      return Math.round(_0x4fd884 * _0x5bf767) / _0x5bf767;
    };
    this.toRad = function (_0x638869) {
      return _0x638869 * (_0x5db8c9 / 0xb4);
    };
    this.toAng = function (_0x532471) {
      return _0x532471 / (_0x5db8c9 / 0xb4);
    };
    this.randInt = function (_0x3ab17d, _0x5b26bf) {
      return Math.floor(Math.random() * (_0x5b26bf - _0x3ab17d + 0x1)) + _0x3ab17d;
    };
    this.randFloat = function (_0x2f27a6, _0x48055a) {
      return Math.random() * (_0x48055a - _0x2f27a6 + 0x1) + _0x2f27a6;
    };
    this.lerp = function (_0x325c81, _0x1fa4af, _0x4fea91) {
      return _0x325c81 + (_0x1fa4af - _0x325c81) * _0x4fea91;
    };
    this.decel = function (_0x4ed0e0, _0x1bf9bb) {
      if (_0x4ed0e0 > 0x0) {
        _0x4ed0e0 = Math.max(0x0, _0x4ed0e0 - _0x1bf9bb);
      } else {
        if (_0x4ed0e0 < 0x0) {
          _0x4ed0e0 = Math.min(0x0, _0x4ed0e0 + _0x1bf9bb);
        }
      }
      return _0x4ed0e0;
    };
    this.getDistance = function (_0x1076f4, _0x304038, _0x3c61ef, _0x5516c4) {
      return _0xe2ab79((_0x3c61ef -= _0x1076f4) * _0x3c61ef + (_0x5516c4 -= _0x304038) * _0x5516c4);
    };
    this.getDist = function (_0x29fa54, _0x213c41, _0x52a0c7, _0x250d37) {
      let _0x5dbe5e = {
        x: _0x52a0c7 == 0x0 ? _0x29fa54.x : _0x52a0c7 == 0x1 ? _0x29fa54.x1 : _0x52a0c7 == 0x2 ? _0x29fa54.x2 : _0x52a0c7 == 0x3 && _0x29fa54.x3,
        y: _0x52a0c7 == 0x0 ? _0x29fa54.y : _0x52a0c7 == 0x1 ? _0x29fa54.y1 : _0x52a0c7 == 0x2 ? _0x29fa54.y2 : _0x52a0c7 == 0x3 && _0x29fa54.y3
      };
      let _0x1618ab = {
        x: _0x250d37 == 0x0 ? _0x213c41.x : _0x250d37 == 0x1 ? _0x213c41.x1 : _0x250d37 == 0x2 ? _0x213c41.x2 : _0x250d37 == 0x3 && _0x213c41.x3,
        y: _0x250d37 == 0x0 ? _0x213c41.y : _0x250d37 == 0x1 ? _0x213c41.y1 : _0x250d37 == 0x2 ? _0x213c41.y2 : _0x250d37 == 0x3 && _0x213c41.y3
      };
      return _0xe2ab79((_0x1618ab.x -= _0x5dbe5e.x) * _0x1618ab.x + (_0x1618ab.y -= _0x5dbe5e.y) * _0x1618ab.y);
    };
    this.getDirection = function (_0x2fe71e, _0x54f5e5, _0x327147, _0xfab6fe) {
      return _0x219dfc(_0x54f5e5 - _0xfab6fe, _0x2fe71e - _0x327147);
    };
    this.getDirect = function (_0x3d5c17, _0x19e664, _0xf6eb64, _0x61a780) {
      let _0x2d4f8f = {
        x: _0xf6eb64 == 0x0 ? _0x3d5c17.x : _0xf6eb64 == 0x1 ? _0x3d5c17.x1 : _0xf6eb64 == 0x2 ? _0x3d5c17.x2 : _0xf6eb64 == 0x3 && _0x3d5c17.x3,
        y: _0xf6eb64 == 0x0 ? _0x3d5c17.y : _0xf6eb64 == 0x1 ? _0x3d5c17.y1 : _0xf6eb64 == 0x2 ? _0x3d5c17.y2 : _0xf6eb64 == 0x3 && _0x3d5c17.y3
      };
      let _0x25bfc3 = {
        x: _0x61a780 == 0x0 ? _0x19e664.x : _0x61a780 == 0x1 ? _0x19e664.x1 : _0x61a780 == 0x2 ? _0x19e664.x2 : _0x61a780 == 0x3 && _0x19e664.x3,
        y: _0x61a780 == 0x0 ? _0x19e664.y : _0x61a780 == 0x1 ? _0x19e664.y1 : _0x61a780 == 0x2 ? _0x19e664.y2 : _0x61a780 == 0x3 && _0x19e664.y3
      };
      return _0x219dfc(_0x2d4f8f.y - _0x25bfc3.y, _0x2d4f8f.x - _0x25bfc3.x);
    };
    this.getAngleDist = function (_0x3fa0c3, _0x1d48f1) {
      let _0x21a434 = _0x143328(_0x1d48f1 - _0x3fa0c3) % (_0x5db8c9 * 0x2);
      return _0x21a434 > _0x5db8c9 ? _0x5db8c9 * 0x2 - _0x21a434 : _0x21a434;
    };
    this.isNumber = function (_0x3c4317) {
      return typeof _0x3c4317 == "number" && !isNaN(_0x3c4317) && isFinite(_0x3c4317);
    };
    this.isString = function (_0x2a1771) {
      return _0x2a1771 && typeof _0x2a1771 == "string";
    };
    this.kFormat = function (_0x2373dd) {
      return _0x2373dd > 0x3e7 ? (_0x2373dd / 0x3e8).toFixed(0x1) + "k" : _0x2373dd;
    };
    this.sFormat = function (_0x4872e6) {
      let _0xa73a1c = [{
        num: 0x3e8,
        string: "k"
      }, {
        num: 0xf4240,
        string: "m"
      }, {
        num: 0x3b9aca00,
        string: "b"
      }, {
        num: 0xe8d4a51000,
        string: "q"
      }].reverse();
      let _0x4a8d1f = _0xa73a1c.find(_0x572f17 => _0x4872e6 >= _0x572f17.num);
      if (!_0x4a8d1f) {
        return _0x4872e6;
      }
      return (_0x4872e6 / _0x4a8d1f.num).toFixed(0x1) + _0x4a8d1f.string;
    };
    this.capitalizeFirst = function (_0x3c5e2b) {
      return _0x3c5e2b.charAt(0x0).toUpperCase() + _0x3c5e2b.slice(0x1);
    };
    this.fixTo = function (_0x2dc794, _0xc7d477) {
      return parseFloat(_0x2dc794.toFixed(_0xc7d477));
    };
    this.sortByPoints = function (_0x1c7612, _0x42be33) {
      return parseFloat(_0x42be33.points) - parseFloat(_0x1c7612.points);
    };
    this.lineInRect = function (_0x18a74a, _0x4ff8ad, _0x231161, _0x14a0f5, _0x3f360e, _0x4954c6, _0x3a3fa6, _0x25ff45) {
      let _0x220d57 = _0x3f360e;
      let _0x51b5e6 = _0x3a3fa6;
      if (_0x3f360e > _0x3a3fa6) {
        _0x220d57 = _0x3a3fa6;
        _0x51b5e6 = _0x3f360e;
      }
      if (_0x51b5e6 > _0x231161) {
        _0x51b5e6 = _0x231161;
      }
      if (_0x220d57 < _0x18a74a) {
        _0x220d57 = _0x18a74a;
      }
      if (_0x220d57 > _0x51b5e6) {
        return false;
      }
      let _0x87fe80 = _0x4954c6;
      let _0x53a402 = _0x25ff45;
      let _0x525cfc = _0x3a3fa6 - _0x3f360e;
      if (Math.abs(_0x525cfc) > 1e-7) {
        let _0x202351 = (_0x25ff45 - _0x4954c6) / _0x525cfc;
        let _0x3e90e8 = _0x4954c6 - _0x202351 * _0x3f360e;
        _0x87fe80 = _0x202351 * _0x220d57 + _0x3e90e8;
        _0x53a402 = _0x202351 * _0x51b5e6 + _0x3e90e8;
      }
      if (_0x87fe80 > _0x53a402) {
        let _0x2d8b41 = _0x53a402;
        _0x53a402 = _0x87fe80;
        _0x87fe80 = _0x2d8b41;
      }
      if (_0x53a402 > _0x14a0f5) {
        _0x53a402 = _0x14a0f5;
      }
      if (_0x87fe80 < _0x4ff8ad) {
        _0x87fe80 = _0x4ff8ad;
      }
      if (_0x87fe80 > _0x53a402) {
        return false;
      }
      return true;
    };
    this.containsPoint = function (_0x4989bb, _0x454f2c, _0x4fa2ed) {
      let _0x51886a = _0x4989bb.getBoundingClientRect();
      let _0x36d95c = _0x51886a.left + window.scrollX;
      let _0xe93540 = _0x51886a.top + window.scrollY;
      let _0x21338e = _0x51886a.width;
      let _0x594b86 = _0x51886a.height;
      let _0x78e2b0 = _0x454f2c > _0x36d95c && _0x454f2c < _0x36d95c + _0x21338e;
      let _0x5461f9 = _0x4fa2ed > _0xe93540 && _0x4fa2ed < _0xe93540 + _0x594b86;
      return _0x78e2b0 && _0x5461f9;
    };
    this.mousifyTouchEvent = function (_0x346fcf) {
      let _0x5739d4 = _0x346fcf.changedTouches[0x0];
      _0x346fcf.screenX = _0x5739d4.screenX;
      _0x346fcf.screenY = _0x5739d4.screenY;
      _0x346fcf.clientX = _0x5739d4.clientX;
      _0x346fcf.clientY = _0x5739d4.clientY;
      _0x346fcf.pageX = _0x5739d4.pageX;
      _0x346fcf.pageY = _0x5739d4.pageY;
    };
    this.hookTouchEvents = function (_0x5857a0, _0x16ee3c) {
      let _0xd2dc3f = !_0x16ee3c;
      let _0x3b632e = false;
      _0x5857a0.addEventListener("touchstart", this.checkTrusted(_0x591a84), false);
      _0x5857a0.addEventListener("touchmove", this.checkTrusted(_0x5cf5fb), false);
      _0x5857a0.addEventListener("touchend", this.checkTrusted(_0x35181f), false);
      _0x5857a0.addEventListener("touchcancel", this.checkTrusted(_0x35181f), false);
      _0x5857a0.addEventListener("touchleave", this.checkTrusted(_0x35181f), false);
      function _0x591a84(_0x4c7017) {
        _0x19e839.mousifyTouchEvent(_0x4c7017);
        window.setUsingTouch(true);
        if (_0xd2dc3f) {
          _0x4c7017.preventDefault();
          _0x4c7017.stopPropagation();
        }
        if (_0x5857a0.onmouseover) {
          _0x5857a0.onmouseover(_0x4c7017);
        }
        _0x3b632e = true;
      }
      function _0x5cf5fb(_0x3cc63c) {
        _0x19e839.mousifyTouchEvent(_0x3cc63c);
        window.setUsingTouch(true);
        if (_0xd2dc3f) {
          _0x3cc63c.preventDefault();
          _0x3cc63c.stopPropagation();
        }
        if (_0x19e839.containsPoint(_0x5857a0, _0x3cc63c.pageX, _0x3cc63c.pageY)) {
          if (!_0x3b632e) {
            if (_0x5857a0.onmouseover) {
              _0x5857a0.onmouseover(_0x3cc63c);
            }
            _0x3b632e = true;
          }
        } else {
          if (_0x3b632e) {
            if (_0x5857a0.onmouseout) {
              _0x5857a0.onmouseout(_0x3cc63c);
            }
            _0x3b632e = false;
          }
        }
      }
      function _0x35181f(_0x4539c0) {
        _0x19e839.mousifyTouchEvent(_0x4539c0);
        window.setUsingTouch(true);
        if (_0xd2dc3f) {
          _0x4539c0.preventDefault();
          _0x4539c0.stopPropagation();
        }
        if (_0x3b632e) {
          if (_0x5857a0.onclick) {
            _0x5857a0.onclick(_0x4539c0);
          }
          if (_0x5857a0.onmouseout) {
            _0x5857a0.onmouseout(_0x4539c0);
          }
          _0x3b632e = false;
        }
      }
    };
    this.removeAllChildren = function (_0x165f91) {
      while (_0x165f91.hasChildNodes()) {
        _0x165f91.removeChild(_0x165f91.lastChild);
      }
    };
    this.generateElement = function (_0x10b29b) {
      let _0x46ef58 = document.createElement(_0x10b29b.tag || "div");
      function _0x5ed4b8(_0x522f40, _0x5457bf) {
        if (_0x10b29b[_0x522f40]) {
          _0x46ef58[_0x5457bf] = _0x10b29b[_0x522f40];
        }
      }
      _0x5ed4b8("text", "textContent");
      _0x5ed4b8("html", "innerHTML");
      _0x5ed4b8("class", "className");
      for (let _0x12543c in _0x10b29b) {
        switch (_0x12543c) {
          case "tag":
          case "text":
          case "html":
          case "class":
          case "style":
          case "hookTouch":
          case "parent":
          case "children":
            continue;
          default:
            break;
        }
        _0x46ef58[_0x12543c] = _0x10b29b[_0x12543c];
      }
      if (_0x46ef58.onclick) {
        _0x46ef58.onclick = this.checkTrusted(_0x46ef58.onclick);
      }
      if (_0x46ef58.onmouseover) {
        _0x46ef58.onmouseover = this.checkTrusted(_0x46ef58.onmouseover);
      }
      if (_0x46ef58.onmouseout) {
        _0x46ef58.onmouseout = this.checkTrusted(_0x46ef58.onmouseout);
      }
      if (_0x10b29b.style) {
        _0x46ef58.style.cssText = _0x10b29b.style;
      }
      if (_0x10b29b.hookTouch) {
        this.hookTouchEvents(_0x46ef58);
      }
      if (_0x10b29b.parent) {
        _0x10b29b.parent.appendChild(_0x46ef58);
      }
      if (_0x10b29b.children) {
        for (let _0x5ef20e = 0x0; _0x5ef20e < _0x10b29b.children.length; _0x5ef20e++) {
          _0x46ef58.appendChild(_0x10b29b.children[_0x5ef20e]);
        }
      }
      return _0x46ef58;
    };
    this.checkTrusted = function (_0x2ca07b) {
      return function (_0x19bc9c) {
        if (_0x19bc9c && _0x19bc9c instanceof Event && (_0x19bc9c && typeof _0x19bc9c.isTrusted == "boolean" ? _0x19bc9c.isTrusted : true)) {
          _0x2ca07b(_0x19bc9c);
        } else {}
      };
    };
    this.randomString = function (_0x4cc436) {
      let _0x3d9d40 = "";
      for (let _0x438ab0 = 0x0; _0x438ab0 < _0x4cc436; _0x438ab0++) {
        _0x3d9d40 += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(Math.random() * "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".length));
      }
      return _0x3d9d40;
    };
    this.countInArray = function (_0x20d99c, _0x385809) {
      let _0x110b24 = 0x0;
      for (let _0x15c2a1 = 0x0; _0x15c2a1 < _0x20d99c.length; _0x15c2a1++) {
        if (_0x20d99c[_0x15c2a1] === _0x385809) {
          _0x110b24++;
        }
      }
      return _0x110b24;
    };
    this.hexToRgb = function (_0x3f2327) {
      return _0x3f2327.slice(0x1).match(/.{1,2}/g).map(_0x4670a9 => parseInt(_0x4670a9, 0x10));
    };
    this.getRgb = function (_0x2788d1, _0x1942c5, _0x3b174e) {
      return [_0x2788d1 / 0xff, _0x1942c5 / 0xff, _0x3b174e / 0xff].join(", ");
    };
  }
}
class Animtext {
  constructor() {
    this.init = function (_0x3e6726, _0x309655, _0x37c0e8, _0x46718d, _0x331b0a, _0x532ab8, _0x109f64) {
      this.x = _0x3e6726;
      this.y = _0x309655;
      this.color = _0x109f64;
      this.scale = _0x37c0e8 * 3.5;
      this.weight = 0x32;
      this.startScale = this.scale * 1.2;
      this.maxScale = 1.5 * _0x37c0e8;
      this.minScale = 0.5 * _0x37c0e8;
      this.scaleSpeed = 0.7;
      this.speed = _0x46718d;
      this.speedMax = _0x46718d;
      this.life = _0x331b0a;
      this.maxLife = _0x331b0a;
      this.text = _0x532ab8;
      this.movSpeed = _0x46718d;
    };
    this.update = function (_0x19636b) {
      if (this.life) {
        this.life -= _0x19636b;
        if (this.scaleSpeed != -0.35) {
          this.y -= this.speed * _0x19636b;
        } else {
          this.y -= this.speed * _0x19636b;
        }
        this.scale -= 0.8;
        if (this.scale >= this.maxScale) {
          this.scale = this.maxScale;
          this.scaleSpeed *= -0.5;
          this.speed = this.speed * 0.75;
        }
        if (this.life <= 0x0) {
          this.life = 0x0;
        }
      }
    };
    this.render = function (_0x1d167b, _0x353a0c, _0x319db6) {
      _0x1d167b.lineWidth = 0xa;
      _0x1d167b.strokeStyle = "#3d3f42";
      _0x1d167b.fillStyle = this.color;
      _0x1d167b.globalAlpha = 0x1;
      _0x1d167b.font = this.scale + "px Hammersmith One";
      _0x1d167b.strokeText(this.text, this.x - _0x353a0c, this.y - _0x319db6);
      _0x1d167b.fillText(this.text, this.x - _0x353a0c, this.y - _0x319db6);
      _0x1d167b.globalAlpha = 0x1;
    };
  }
}
class Textmanager {
  constructor() {
    this.texts = [];
    this.stack = [];
    this.update = function (_0x49b25a, _0x2d498a, _0x93855d, _0x1587ff) {
      _0x2d498a.textBaseline = "middle";
      _0x2d498a.textAlign = "center";
      for (let _0x253f78 = 0x0; _0x253f78 < this.texts.length; ++_0x253f78) {
        if (this.texts[_0x253f78].life) {
          this.texts[_0x253f78].update(_0x49b25a);
          this.texts[_0x253f78].render(_0x2d498a, _0x93855d, _0x1587ff);
        }
      }
    };
    this.showText = function (_0x148aa9, _0xee7685, _0x4d0707, _0x21378d, _0x57f903, _0x53e018, _0x5adf67) {
      let _0x5a83cb;
      for (let _0x315690 = 0x0; _0x315690 < this.texts.length; ++_0x315690) {
        if (!this.texts[_0x315690].life) {
          _0x5a83cb = this.texts[_0x315690];
          break;
        }
      }
      if (!_0x5a83cb) {
        _0x5a83cb = new Animtext();
        this.texts.push(_0x5a83cb);
      }
      _0x5a83cb.init(_0x148aa9, _0xee7685, _0x4d0707, _0x21378d, _0x57f903, _0x53e018, _0x5adf67);
    };
  }
}
class GameObject {
  constructor(_0xe6b0cb) {
    this.sid = _0xe6b0cb;
    this.init = function (_0x26e613, _0x3a2287, _0x5d3ac3, _0x4523e5, _0x2707a5, _0x335796, _0x4ce4d9) {
      _0x335796 = _0x335796 || {};
      this.sentTo = {};
      this.gridLocations = [];
      this.active = true;
      this.render = true;
      this.doUpdate = _0x335796.doUpdate;
      this.x = _0x26e613;
      this.y = _0x3a2287;
      this.dir = _0x5d3ac3;
      this.lastDir = _0x5d3ac3;
      this.xWiggle = 0x0;
      this.yWiggle = 0x0;
      this.visScale = _0x4523e5;
      this.scale = _0x4523e5;
      this.type = _0x2707a5;
      this.id = _0x335796.id;
      this.owner = _0x4ce4d9;
      this.name = _0x335796.name;
      this.isItem = this.id != undefined;
      this.group = _0x335796.group;
      this.maxHealth = _0x335796.health;
      this.health = this.maxHealth;
      this.layer = 0x2;
      if (this.group != undefined) {
        this.layer = this.group.layer;
      } else {
        if (this.type == 0x0) {
          this.layer = 0x3;
        } else {
          if (this.type == 0x2) {
            this.layer = 0x0;
          } else if (this.type == 0x4) {
            this.layer = -0x1;
          }
        }
      }
      this.colDiv = _0x335796.colDiv || 0x1;
      this.blocker = _0x335796.blocker;
      this.ignoreCollision = _0x335796.ignoreCollision;
      this.dontGather = _0x335796.dontGather;
      this.hideFromEnemy = _0x335796.hideFromEnemy;
      this.friction = _0x335796.friction;
      this.projDmg = _0x335796.projDmg;
      this.dmg = _0x335796.dmg;
      this.pDmg = _0x335796.pDmg;
      this.pps = _0x335796.pps;
      this.zIndex = _0x335796.zIndex || 0x0;
      this.turnSpeed = _0x335796.turnSpeed;
      this.req = _0x335796.req;
      this.trap = _0x335796.trap;
      this.healCol = _0x335796.healCol;
      this.teleport = _0x335796.teleport;
      this.boostSpeed = _0x335796.boostSpeed;
      this.projectile = _0x335796.projectile;
      this.shootRange = _0x335796.shootRange;
      this.shootRate = _0x335796.shootRate;
      this.shootCount = this.shootRate;
      this.spawnPoint = _0x335796.spawnPoint;
      this.onNear = 0x0;
      this.breakObj = false;
      this.alpha = _0x335796.alpha || 0x1;
      this.maxAlpha = _0x335796.alpha || 0x1;
      this.damaged = 0x0;
    };
    this.changeHealth = function (_0x499525, _0x1c6066) {
      this.health += _0x499525;
      return this.health <= 0x0;
    };
    this.getScale = function (_0x5a71e7, _0x3f1d9b) {
      _0x5a71e7 = _0x5a71e7 || 0x1;
      return this.scale * (this.isItem || this.type == 0x2 || this.type == 0x3 || this.type == 0x4 ? 0x1 : 0.6 * _0x5a71e7) * (_0x3f1d9b ? 0x1 : this.colDiv);
    };
    this.visibleToPlayer = function (_0x2d1a82) {
      return !this.hideFromEnemy || this.owner && (this.owner == _0x2d1a82 || this.owner.team && _0x2d1a82.team == this.owner.team);
    };
    this.update = function (_0x32b37c) {
      if (this.active) {
        if (this.xWiggle) {
          this.xWiggle *= Math.pow(0.99, _0x32b37c);
        }
        if (this.yWiggle) {
          this.yWiggle *= Math.pow(0.99, _0x32b37c);
        }
        let _0xf419e8 = UTILS.getAngleDist(this.lastDir, this.dir);
        if (_0xf419e8 > 0.01) {
          this.dir += _0xf419e8 / 0x5;
        } else {
          this.dir = this.lastDir;
        }
      } else if (this.alive) {
        this.alpha -= _0x32b37c / (0xc8 / this.maxAlpha);
        this.visScale += _0x32b37c / (this.scale / 2.5);
        if (this.alpha <= 0x0) {
          this.alpha = 0x0;
          this.alive = false;
        }
      }
    };
    this.isTeamObject = function (_0x54cc74) {
      return this.owner == null ? true : this.owner && _0x54cc74.sid == this.owner.sid || _0x54cc74.findAllianceBySid(this.owner.sid);
    };
  }
}
class Items {
  constructor() {
    this.groups = [{
      id: 0x0,
      name: "food",
      layer: 0x0
    }, {
      id: 0x1,
      name: "walls",
      place: true,
      limit: 0x1e,
      layer: 0x0
    }, {
      id: 0x2,
      name: "spikes",
      place: true,
      limit: 0xf,
      layer: 0x0
    }, {
      id: 0x3,
      name: "mill",
      place: true,
      limit: 0x7,
      layer: 0x1
    }, {
      id: 0x4,
      name: "mine",
      place: true,
      limit: 0x1,
      layer: 0x0
    }, {
      id: 0x5,
      name: "trap",
      place: true,
      limit: 0x6,
      layer: -0x1
    }, {
      id: 0x6,
      name: "booster",
      place: true,
      limit: 0xc,
      layer: -0x1
    }, {
      id: 0x7,
      name: "turret",
      place: true,
      limit: 0x2,
      layer: 0x1
    }, {
      id: 0x8,
      name: "watchtower",
      place: true,
      limit: 0xc,
      layer: 0x1
    }, {
      id: 0x9,
      name: "buff",
      place: true,
      limit: 0x4,
      layer: -0x1
    }, {
      id: 0xa,
      name: "spawn",
      place: true,
      limit: 0x1,
      layer: -0x1
    }, {
      id: 0xb,
      name: "sapling",
      place: true,
      limit: 0x2,
      layer: 0x0
    }, {
      id: 0xc,
      name: "blocker",
      place: true,
      limit: 0x3,
      layer: -0x1
    }, {
      id: 0xd,
      name: "teleporter",
      place: true,
      limit: 0x2,
      layer: -0x1
    }];
    this.projectiles = [{
      indx: 0x0,
      layer: 0x0,
      src: "arrow_1",
      dmg: 0x19,
      speed: 1.6,
      scale: 0x67,
      range: 0x3e8
    }, {
      indx: 0x1,
      layer: 0x1,
      dmg: 0x19,
      scale: 0x14
    }, {
      indx: 0x0,
      layer: 0x0,
      src: "arrow_1",
      dmg: 0x23,
      speed: 2.5,
      scale: 0x67,
      range: 0x4b0
    }, {
      indx: 0x0,
      layer: 0x0,
      src: "arrow_1",
      dmg: 0x1e,
      speed: 0x2,
      scale: 0x67,
      range: 0x4b0
    }, {
      indx: 0x1,
      layer: 0x1,
      dmg: 0x10,
      scale: 0x14
    }, {
      indx: 0x0,
      layer: 0x0,
      src: "bullet_1",
      dmg: 0x32,
      speed: 3.6,
      scale: 0xa0,
      range: 0x578
    }];
    this.weapons = [{
      id: 0x0,
      type: 0x0,
      name: "tool hammer",
      desc: "tool for gathering all resources",
      src: "hammer_1",
      length: 0x8c,
      width: 0x8c,
      xOff: -0x3,
      yOff: 0x12,
      dmg: 0x19,
      range: 0x41,
      gather: 0x1,
      speed: 0x12c
    }, {
      id: 0x1,
      type: 0x0,
      age: 0x2,
      name: "hand axe",
      desc: "gathers resources at a higher rate",
      src: "axe_1",
      length: 0x8c,
      width: 0x8c,
      xOff: 0x3,
      yOff: 0x18,
      dmg: 0x1e,
      spdMult: 0x1,
      range: 0x46,
      gather: 0x2,
      speed: 0x190
    }, {
      id: 0x2,
      type: 0x0,
      age: 0x8,
      pre: 0x1,
      name: "great axe",
      desc: "deal more damage and gather more resources",
      src: "great_axe_1",
      length: 0x8c,
      width: 0x8c,
      xOff: -0x8,
      yOff: 0x19,
      dmg: 0x23,
      spdMult: 0x1,
      range: 0x4b,
      gather: 0x4,
      speed: 0x190
    }, {
      id: 0x3,
      type: 0x0,
      age: 0x2,
      name: "short sword",
      desc: "increased attack power but slower move speed",
      src: "sword_1",
      iPad: 1.3,
      length: 0x82,
      width: 0xd2,
      xOff: -0x8,
      yOff: 0x2e,
      dmg: 0x23,
      spdMult: 0.85,
      range: 0x6e,
      gather: 0x1,
      speed: 0x12c
    }, {
      id: 0x4,
      type: 0x0,
      age: 0x8,
      pre: 0x3,
      name: "katana",
      desc: "greater range and damage",
      src: "samurai_1",
      iPad: 1.3,
      length: 0x82,
      width: 0xd2,
      xOff: -0x8,
      yOff: 0x3b,
      dmg: 0x28,
      spdMult: 0.8,
      range: 0x76,
      gather: 0x1,
      speed: 0x12c
    }, {
      id: 0x5,
      type: 0x0,
      age: 0x2,
      name: "polearm",
      desc: "long range melee weapon",
      src: "spear_1",
      iPad: 1.3,
      length: 0x82,
      width: 0xd2,
      xOff: -0x8,
      yOff: 0x35,
      dmg: 0x2d,
      knock: 0.2,
      spdMult: 0.82,
      range: 0x8e,
      gather: 0x1,
      speed: 0x2bc
    }, {
      id: 0x6,
      type: 0x0,
      age: 0x2,
      name: "bat",
      desc: "fast long range melee weapon",
      src: "bat_1",
      iPad: 1.3,
      length: 0x6e,
      width: 0xb4,
      xOff: -0x8,
      yOff: 0x35,
      dmg: 0x14,
      knock: 0.7,
      range: 0x6e,
      gather: 0x1,
      speed: 0x12c
    }, {
      id: 0x7,
      type: 0x0,
      age: 0x2,
      name: "daggers",
      desc: "really fast short range weapon",
      src: "dagger_1",
      iPad: 0.8,
      length: 0x6e,
      width: 0x6e,
      xOff: 0x12,
      yOff: 0x0,
      dmg: 0x14,
      knock: 0.1,
      range: 0x41,
      gather: 0x1,
      hitSlow: 0.1,
      spdMult: 1.13,
      speed: 0x64
    }, {
      id: 0x8,
      type: 0x0,
      age: 0x2,
      name: "stick",
      desc: "great for gathering but very weak",
      src: "stick_1",
      length: 0x8c,
      width: 0x8c,
      xOff: 0x3,
      yOff: 0x18,
      dmg: 0x1,
      spdMult: 0x1,
      range: 0x46,
      gather: 0x7,
      speed: 0x190
    }, {
      id: 0x9,
      type: 0x1,
      age: 0x6,
      name: "hunting bow",
      desc: "bow used for ranged combat and hunting",
      src: "bow_1",
      req: ["wood", 0x4],
      length: 0x78,
      width: 0x78,
      xOff: -0x6,
      yOff: 0x0,
      Pdmg: 0x19,
      projectile: 0x0,
      spdMult: 0.75,
      speed: 0x258
    }, {
      id: 0xa,
      type: 0x1,
      age: 0x6,
      name: "great hammer",
      desc: "hammer used for destroying structures",
      src: "great_hammer_1",
      length: 0x8c,
      width: 0x8c,
      xOff: -0x9,
      yOff: 0x19,
      dmg: 0xa,
      Pdmg: 0xa,
      spdMult: 0.88,
      range: 0x4b,
      sDmg: 7.5,
      gather: 0x1,
      speed: 0x190
    }, {
      id: 0xb,
      type: 0x1,
      age: 0x6,
      name: "wooden shield",
      desc: "blocks projectiles and reduces melee damage",
      src: "shield_1",
      length: 0x78,
      width: 0x78,
      shield: 0.2,
      xOff: 0x6,
      yOff: 0x0,
      Pdmg: 0x0,
      spdMult: 0.7
    }, {
      id: 0xc,
      type: 0x1,
      age: 0x8,
      pre: 0x9,
      name: "crossbow",
      desc: "deals more damage and has greater range",
      src: "crossbow_1",
      req: ["wood", 0x5],
      aboveHand: true,
      armS: 0.75,
      length: 0x78,
      width: 0x78,
      xOff: -0x4,
      yOff: 0x0,
      Pdmg: 0x23,
      projectile: 0x2,
      spdMult: 0.7,
      speed: 0x2bc
    }, {
      id: 0xd,
      type: 0x1,
      age: 0x9,
      pre: 0xc,
      name: "repeater crossbow",
      desc: "high firerate crossbow with reduced damage",
      src: "crossbow_2",
      req: ["wood", 0xa],
      aboveHand: true,
      armS: 0.75,
      length: 0x78,
      width: 0x78,
      xOff: -0x4,
      yOff: 0x0,
      Pdmg: 0x1e,
      projectile: 0x3,
      spdMult: 0.7,
      speed: 0xe6
    }, {
      id: 0xe,
      type: 0x1,
      age: 0x6,
      name: "mc grabby",
      desc: "steals resources from enemies",
      src: "grab_1",
      length: 0x82,
      width: 0xd2,
      xOff: -0x8,
      yOff: 0x35,
      dmg: 0x0,
      Pdmg: 0x0,
      steal: 0xfa,
      knock: 0.2,
      spdMult: 1.05,
      range: 0x7d,
      gather: 0x0,
      speed: 0x2bc
    }, {
      id: 0xf,
      type: 0x1,
      age: 0x9,
      pre: 0xc,
      name: "musket",
      desc: "slow firerate but high damage and range",
      src: "musket_1",
      req: ["stone", 0xa],
      aboveHand: true,
      rec: 0.35,
      armS: 0.6,
      hndS: 0.3,
      hndD: 1.6,
      length: 0xcd,
      width: 0xcd,
      xOff: 0x19,
      yOff: 0x0,
      Pdmg: 0x32,
      projectile: 0x5,
      hideProjectile: true,
      spdMult: 0.6,
      speed: 0x5dc
    }];
    this.list = [{
      group: this.groups[0x0],
      name: "apple",
      desc: "restores 20 health when consumed",
      req: ["food", 0xa],
      consume: function (_0x462334) {
        return _0x462334.changeHealth(0x14, _0x462334);
      },
      scale: 0x16,
      holdOffset: 0xf,
      healing: 0x14,
      itemID: 0x0,
      itemAID: 0x10
    }, {
      age: 0x3,
      group: this.groups[0x0],
      name: "cookie",
      desc: "restores 40 health when consumed",
      req: ["food", 0xf],
      consume: function (_0x4ee653) {
        return _0x4ee653.changeHealth(0x28, _0x4ee653);
      },
      scale: 0x1b,
      holdOffset: 0xf,
      healing: 0x28,
      itemID: 0x1,
      itemAID: 0x11
    }, {
      age: 0x7,
      group: this.groups[0x0],
      name: "cheese",
      desc: "restores 30 health and another 50 over 5 seconds",
      req: ["food", 0x19],
      consume: function (_0x124825) {
        if (_0x124825.changeHealth(0x1e, _0x124825) || _0x124825.health < 0x64) {
          _0x124825.dmgOverTime.dmg = -0xa;
          _0x124825.dmgOverTime.doer = _0x124825;
          _0x124825.dmgOverTime.time = 0x5;
          return true;
        }
        return false;
      },
      scale: 0x1b,
      holdOffset: 0xf,
      healing: 0x1e,
      itemID: 0x2,
      itemAID: 0x12
    }, {
      group: this.groups[0x1],
      name: "wood wall",
      desc: "provides protection for your village",
      req: ["wood", 0xa],
      projDmg: true,
      health: 0x17c,
      scale: 0x32,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x3,
      itemAID: 0x13
    }, {
      age: 0x3,
      group: this.groups[0x1],
      name: "stone wall",
      desc: "provides improved protection for your village",
      req: ["stone", 0x19],
      health: 0x384,
      scale: 0x32,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x4,
      itemAID: 0x14
    }, {
      age: 0x7,
      group: this.groups[0x1],
      name: "castle wall",
      desc: "provides powerful protection for your village",
      req: ["stone", 0x23],
      health: 0x5dc,
      scale: 0x34,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x5,
      itemAID: 0x15
    }, {
      group: this.groups[0x2],
      name: "spikes",
      desc: "damages enemies when they touch them",
      req: ["wood", 0x14, "stone", 0x5],
      health: 0x190,
      dmg: 0x14,
      scale: 0x31,
      spritePadding: -0x17,
      holdOffset: 0x8,
      placeOffset: -0x5,
      itemID: 0x6,
      itemAID: 0x16,
      shadow: {
        offsetX: 0x5,
        offsetY: 0x5,
        blur: 0x14,
        color: "rgba(0, 0, 0, 0.5)"
      }
    }, {
      age: 0x5,
      group: this.groups[0x2],
      name: "greater spikes",
      desc: "damages enemies when they touch them",
      req: ["wood", 0x1e, "stone", 0xa],
      health: 0x1f4,
      dmg: 0x23,
      scale: 0x34,
      spritePadding: -0x17,
      holdOffset: 0x8,
      placeOffset: -0x5,
      itemID: 0x7,
      itemAID: 0x17
    }, {
      age: 0x9,
      group: this.groups[0x2],
      name: "poison spikes",
      desc: "poisons enemies when they touch them",
      req: ["wood", 0x23, "stone", 0xf],
      health: 0x258,
      dmg: 0x1e,
      pDmg: 0x5,
      scale: 0x34,
      spritePadding: -0x17,
      holdOffset: 0x8,
      placeOffset: -0x5,
      itemID: 0x8,
      itemAID: 0x18
    }, {
      age: 0x9,
      group: this.groups[0x2],
      name: "spinning spikes",
      desc: "damages enemies when they touch them",
      req: ["wood", 0x1e, "stone", 0x14],
      health: 0x1f4,
      dmg: 0x2d,
      turnSpeed: 0.003,
      scale: 0x34,
      spritePadding: -0x17,
      holdOffset: 0x8,
      placeOffset: -0x5,
      itemID: 0x9,
      itemAID: 0x19
    }, {
      group: this.groups[0x3],
      name: "windmill",
      desc: "generates gold over time",
      req: ["wood", 0x32, "stone", 0xa],
      health: 0x190,
      pps: 0x1,
      turnSpeed: 0.0016,
      spritePadding: 0x19,
      iconLineMult: 0xc,
      scale: 0x2d,
      holdOffset: 0x14,
      placeOffset: 0x5,
      itemID: 0xa,
      itemAID: 0x1a
    }, {
      age: 0x5,
      group: this.groups[0x3],
      name: "faster windmill",
      desc: "generates more gold over time",
      req: ["wood", 0x3c, "stone", 0x14],
      health: 0x1f4,
      pps: 1.5,
      turnSpeed: 0.0025,
      spritePadding: 0x19,
      iconLineMult: 0xc,
      scale: 0x2f,
      holdOffset: 0x14,
      placeOffset: 0x5,
      itemID: 0xb,
      itemAID: 0x1b
    }, {
      age: 0x8,
      group: this.groups[0x3],
      name: "power mill",
      desc: "generates more gold over time",
      req: ["wood", 0x64, "stone", 0x32],
      health: 0x320,
      pps: 0x2,
      turnSpeed: 0.005,
      spritePadding: 0x19,
      iconLineMult: 0xc,
      scale: 0x2f,
      holdOffset: 0x14,
      placeOffset: 0x5,
      itemID: 0xc,
      itemAID: 0x1c
    }, {
      age: 0x5,
      group: this.groups[0x4],
      type: 0x2,
      name: "mine",
      desc: "allows you to mine stone",
      req: ["wood", 0x14, "stone", 0x64],
      iconLineMult: 0xc,
      scale: 0x41,
      holdOffset: 0x14,
      placeOffset: 0x0,
      itemID: 0xd,
      itemAID: 0x1d
    }, {
      age: 0x5,
      group: this.groups[0xb],
      type: 0x0,
      name: "sapling",
      desc: "allows you to farm wood",
      req: ["wood", 0x96],
      iconLineMult: 0xc,
      colDiv: 0.5,
      scale: 0x6e,
      holdOffset: 0x32,
      placeOffset: -0xf,
      itemID: 0xe,
      itemAID: 0x1e
    }, {
      age: 0x4,
      group: this.groups[0x5],
      name: "pit trap",
      desc: "pit that traps enemies if they walk over it",
      req: ["wood", 0x1e, "stone", 0x1e],
      trap: true,
      ignoreCollision: true,
      hideFromEnemy: true,
      health: 0x1f4,
      colDiv: 0.2,
      scale: 0x32,
      holdOffset: 0x14,
      placeOffset: -0x5,
      alpha: 0.6,
      itemID: 0xf,
      itemAID: 0x1f
    }, {
      age: 0x4,
      group: this.groups[0x6],
      name: "boost pad",
      desc: "provides boost when stepped on",
      req: ["stone", 0x14, "wood", 0x5],
      ignoreCollision: true,
      boostSpeed: 1.5,
      health: 0x96,
      colDiv: 0.7,
      scale: 0x2d,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x10,
      itemAID: 0x20
    }, {
      age: 0x7,
      group: this.groups[0x7],
      doUpdate: true,
      name: "turret",
      desc: "defensive structure that shoots at enemies",
      req: ["wood", 0xc8, "stone", 0x96],
      health: 0x320,
      projectile: 0x1,
      shootRange: 0x2bc,
      shootRate: 0x898,
      scale: 0x2b,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x11,
      itemAID: 0x21
    }, {
      age: 0x7,
      group: this.groups[0x8],
      name: "platform",
      desc: "platform to shoot over walls and cross over water",
      req: ["wood", 0x14],
      ignoreCollision: true,
      zIndex: 0x1,
      health: 0x12c,
      scale: 0x2b,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x12,
      itemAID: 0x22
    }, {
      age: 0x7,
      group: this.groups[0x9],
      name: "healing pad",
      desc: "standing on it will slowly heal you",
      req: ["wood", 0x1e, "food", 0xa],
      ignoreCollision: true,
      healCol: 0xf,
      health: 0x190,
      colDiv: 0.7,
      scale: 0x2d,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x13,
      itemAID: 0x23
    }, {
      age: 0x9,
      group: this.groups[0xa],
      name: "spawn pad",
      desc: "you will spawn here when you die but it will dissapear",
      req: ["wood", 0x64, "stone", 0x64],
      health: 0x190,
      ignoreCollision: true,
      spawnPoint: true,
      scale: 0x2d,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x14,
      itemAID: 0x24
    }, {
      age: 0x7,
      group: this.groups[0xc],
      name: "blocker",
      desc: "blocks building in radius",
      req: ["wood", 0x1e, "stone", 0x19],
      ignoreCollision: true,
      blocker: 0x12c,
      health: 0x190,
      colDiv: 0.7,
      scale: 0x2d,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x15,
      itemAID: 0x25
    }, {
      age: 0x7,
      group: this.groups[0xd],
      name: "teleporter",
      desc: "teleports you to a random point on the map",
      req: ["wood", 0x3c, "stone", 0x3c],
      ignoreCollision: true,
      teleport: true,
      health: 0xc8,
      colDiv: 0.7,
      scale: 0x2d,
      holdOffset: 0x14,
      placeOffset: -0x5,
      itemID: 0x16,
      itemAID: 0x26
    }];
    this.checkItem = {
      index: function (_0xef3218, _0xd51f05) {
        return [0x0, 0x1, 0x2].includes(_0xef3218) ? 0x0 : [0x3, 0x4, 0x5].includes(_0xef3218) ? 0x1 : [0x6, 0x7, 0x8, 0x9].includes(_0xef3218) ? 0x2 : [0xa, 0xb, 0xc].includes(_0xef3218) ? 0x3 : [0xd, 0xe].includes(_0xef3218) ? 0x5 : [0xf, 0x10].includes(_0xef3218) ? 0x4 : [0x11, 0x12, 0x13, 0x15, 0x16].includes(_0xef3218) ? [0xd, 0xe].includes(_0xd51f05) ? 0x6 : 0x5 : _0xef3218 == 0x14 ? [0xd, 0xe].includes(_0xd51f05) ? 0x7 : 0x6 : undefined;
      }
    };
    for (let _0x1e6077 = 0x0; _0x1e6077 < this.list.length; ++_0x1e6077) {
      this.list[_0x1e6077].id = _0x1e6077;
      if (this.list[_0x1e6077].pre) {
        this.list[_0x1e6077].pre = _0x1e6077 - this.list[_0x1e6077].pre;
      }
    }
    if (typeof window !== "undefined") {}
  }
}
class Objectmanager {
  constructor(_0x2e1a03, _0x186a0b, _0x2814a2, _0x3d619d, _0x41681f, _0x57bf36) {
    this.ignoreAdd = false;
    this.hitObj = [];
    this.disableObj = function (_0x45fbe5) {
      _0x45fbe5.active = false;
    };
    let _0x356a94;
    this.add = function (_0x318f3f, _0x5d0072, _0x1158a3, _0x40a18c, _0x272b3c, _0x8cba71, _0x149e18, _0x57fc82, _0x5df48b) {
      _0x356a94 = findSID(gameObjects, _0x318f3f);
      if (!_0x356a94) {
        _0x356a94 = gameObjects.find(_0x49470b => !_0x49470b.active);
        if (!_0x356a94) {
          _0x356a94 = new _0x2e1a03(_0x318f3f);
          gameObjects.push(_0x356a94);
        }
      }
      if (_0x57fc82) {
        _0x356a94.sid = _0x318f3f;
      }
      _0x356a94.init(_0x5d0072, _0x1158a3, _0x40a18c, _0x272b3c, _0x8cba71, _0x149e18, _0x5df48b);
    };
    this.disableBySid = function (_0x2f38a1) {
      let _0xdef5c2 = findSID(gameObjects, _0x2f38a1);
      if (_0xdef5c2) {
        this.disableObj(_0xdef5c2);
      }
    };
    this.removeAllItems = function (_0x437869, _0x19037a) {
      gameObjects.filter(_0x5e6d2f => _0x5e6d2f.active && _0x5e6d2f.owner && _0x5e6d2f.owner.sid == _0x437869).forEach(_0x34becf => this.disableObj(_0x34becf));
    };
    this.checkItemLocation = function (_0x2616f3, _0x1bc152, _0x3907db, _0x252d69, _0x327ab1, _0x4325db, _0x1c0b6d) {
      let _0x4077da = _0x186a0b.find(_0x1bd136 => _0x1bd136.active && _0x2814a2.getDistance(_0x2616f3, _0x1bc152, _0x1bd136.x, _0x1bd136.y) < _0x3907db + (_0x1bd136.blocker ? _0x1bd136.blocker : _0x1bd136.getScale(_0x252d69, _0x1bd136.isItem)));
      if (_0x4077da) {
        return false;
      }
      if (!_0x4325db && _0x327ab1 != 0x12 && _0x1bc152 >= _0x3d619d.mapScale / 0x2 - _0x3d619d.riverWidth / 0x2 && _0x1bc152 <= _0x3d619d.mapScale / 0x2 + _0x3d619d.riverWidth / 0x2) {
        return false;
      }
      return true;
    };
  }
}
class Projectile {
  constructor(_0x535a0e, _0x42b964, _0x2530c5, _0x1e167d, _0x15074b, _0x168686, _0x24c0fe) {
    this.init = function (_0x3e5f13, _0x3171f4, _0x571564, _0x16135c, _0x1f381d, _0x1f0482, _0x514948, _0x3461f6, _0x3afa0f) {
      this.active = true;
      this.tickActive = true;
      this.indx = _0x3e5f13;
      this.x = _0x3171f4;
      this.y = _0x571564;
      this.x2 = _0x3171f4;
      this.y2 = _0x571564;
      this.dir = _0x16135c;
      this.skipMov = true;
      this.speed = _0x1f381d;
      this.dmg = _0x1f0482;
      this.scale = _0x3461f6;
      this.range = _0x514948;
      this.r2 = _0x514948;
      this.owner = _0x3afa0f;
    };
    this.update = function (_0x4df0d4) {
      if (this.active) {
        let _0x1765b7 = this.speed * _0x4df0d4;
        if (!this.skipMov) {
          this.x += _0x1765b7 * Math.cos(this.dir);
          this.y += _0x1765b7 * Math.sin(this.dir);
          this.range -= _0x1765b7;
          if (this.range <= 0x0) {
            this.x += this.range * Math.cos(this.dir);
            this.y += this.range * Math.sin(this.dir);
            _0x1765b7 = 0x1;
            this.range = 0x0;
            this.active = false;
          }
        } else {
          this.skipMov = false;
        }
      }
    };
    this.tickUpdate = function (_0x51a78e) {
      if (this.tickActive) {
        let _0xd241a5 = this.speed * _0x51a78e;
        if (!this.skipMov) {
          this.x2 += _0xd241a5 * Math.cos(this.dir);
          this.y2 += _0xd241a5 * Math.sin(this.dir);
          this.r2 -= _0xd241a5;
          if (this.r2 <= 0x0) {
            this.x2 += this.r2 * Math.cos(this.dir);
            this.y2 += this.r2 * Math.sin(this.dir);
            _0xd241a5 = 0x1;
            this.r2 = 0x0;
            this.tickActive = false;
          }
        } else {
          this.skipMov = false;
        }
      }
    };
  }
}
class Store {
  constructor() {
    this.hats = [{
      id: 0x2d,
      name: "Shame!",
      dontSell: true,
      price: 0x0,
      scale: 0x78,
      desc: "hacks are for winners"
    }, {
      id: 0x33,
      name: "Moo Cap",
      price: 0x0,
      scale: 0x78,
      desc: "coolest mooer around"
    }, {
      id: 0x32,
      name: "Apple Cap",
      price: 0x0,
      scale: 0x78,
      desc: "apple farms remembers"
    }, {
      id: 0x1c,
      name: "Moo Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x1d,
      name: "Pig Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x1e,
      name: "Fluff Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x24,
      name: "Pandou Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x25,
      name: "Bear Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x26,
      name: "Monkey Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x2c,
      name: "Polar Head",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x23,
      name: "Fez Hat",
      price: 0x0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x2a,
      name: "Enigma Hat",
      price: 0x0,
      scale: 0x78,
      desc: "join the enigma army"
    }, {
      id: 0x2b,
      name: "Blitz Hat",
      price: 0x0,
      scale: 0x78,
      desc: "hey everybody i'm blitz"
    }, {
      id: 0x31,
      name: "Bob XIII Hat",
      price: 0x0,
      scale: 0x78,
      desc: "like and subscribe"
    }, {
      id: 0x39,
      name: "Pumpkin",
      price: 0x32,
      scale: 0x78,
      desc: "Spooooky"
    }, {
      id: 0x8,
      name: "Bummle Hat",
      price: 0x64,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x2,
      name: "Straw Hat",
      price: 0x1f4,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0xf,
      name: "Winter Cap",
      price: 0x258,
      scale: 0x78,
      desc: "allows you to move at normal speed in snow",
      coldM: 0x1
    }, {
      id: 0x5,
      name: "Cowboy Hat",
      price: 0x3e8,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x4,
      name: "Ranger Hat",
      price: 0x7d0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x12,
      name: "Explorer Hat",
      price: 0x7d0,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x1f,
      name: "Flipper Hat",
      price: 0x9c4,
      scale: 0x78,
      desc: "have more control while in water",
      watrImm: true
    }, {
      id: 0x1,
      name: "Marksman Cap",
      price: 0xbb8,
      scale: 0x78,
      desc: "increases arrow speed and range",
      aMlt: 1.3
    }, {
      id: 0xa,
      name: "Bush Gear",
      price: 0xbb8,
      scale: 0xa0,
      desc: "allows you to disguise yourself as a bush"
    }, {
      id: 0x30,
      name: "Halo",
      price: 0xbb8,
      scale: 0x78,
      desc: "no effect"
    }, {
      id: 0x6,
      name: "Soldier Helmet",
      price: 0xfa0,
      scale: 0x78,
      desc: "reduces damage taken but slows movement",
      spdMult: 0.94,
      dmgMult: 0.75
    }, {
      id: 0x17,
      name: "Anti Venom Gear",
      price: 0xfa0,
      scale: 0x78,
      desc: "makes you immune to poison",
      poisonRes: 0x1
    }, {
      id: 0xd,
      name: "Medic Gear",
      price: 0x1388,
      scale: 0x6e,
      desc: "slowly regenerates health over time",
      healthRegen: 0x3
    }, {
      id: 0x9,
      name: "Miners Helmet",
      price: 0x1388,
      scale: 0x78,
      desc: "earn 1 extra gold per resource",
      extraGold: 0x1
    }, {
      id: 0x20,
      name: "Musketeer Hat",
      price: 0x1388,
      scale: 0x78,
      desc: "reduces cost of projectiles",
      projCost: 0.5
    }, {
      id: 0x7,
      name: "Bull Helmet",
      price: 0x1770,
      scale: 0x78,
      desc: "increases damage done but drains health",
      healthRegen: -0x5,
      dmgMultO: 1.5,
      spdMult: 0.96
    }, {
      id: 0x16,
      name: "Emp Helmet",
      price: 0x1770,
      scale: 0x78,
      desc: "turrets won't attack but you move slower",
      antiTurret: 0x1,
      spdMult: 0.7
    }, {
      id: 0xc,
      name: "Booster Hat",
      price: 0x1770,
      scale: 0x78,
      desc: "increases your movement speed",
      spdMult: 1.16
    }, {
      id: 0x1a,
      name: "Barbarian Armor",
      price: 0x1f40,
      scale: 0x78,
      desc: "knocks back enemies that attack you",
      dmgK: 0.6
    }, {
      id: 0x15,
      name: "Plague Mask",
      price: 0x2710,
      scale: 0x78,
      desc: "melee attacks deal poison damage",
      poisonDmg: 0x5,
      poisonTime: 0x6
    }, {
      id: 0x2e,
      name: "Bull Mask",
      price: 0x2710,
      scale: 0x78,
      desc: "bulls won't target you unless you attack them",
      bullRepel: 0x1
    }, {
      id: 0xe,
      name: "Windmill Hat",
      topSprite: true,
      price: 0x2710,
      scale: 0x78,
      desc: "generates points while worn",
      pps: 1.5
    }, {
      id: 0xb,
      name: "Spike Gear",
      topSprite: true,
      price: 0x2710,
      scale: 0x78,
      desc: "deal damage to players that damage you",
      dmg: 0.45
    }, {
      id: 0x35,
      name: "Turret Gear",
      topSprite: true,
      price: 0x2710,
      scale: 0x78,
      desc: "you become a walking turret",
      turret: {
        proj: 0x1,
        range: 0x2bc,
        rate: 0x9c4
      },
      spdMult: 0.7
    }, {
      id: 0x14,
      name: "Samurai Armor",
      price: 0x2ee0,
      scale: 0x78,
      desc: "increased attack speed and fire rate",
      atkSpd: 0.78
    }, {
      id: 0x3a,
      name: "Dark Knight",
      price: 0x2ee0,
      scale: 0x78,
      desc: "restores health when you deal damage",
      healD: 0.4
    }, {
      id: 0x1b,
      name: "Scavenger Gear",
      price: 0x3a98,
      scale: 0x78,
      desc: "earn double points for each kill",
      kScrM: 0x2
    }, {
      id: 0x28,
      name: "Tank Gear",
      price: 0x3a98,
      scale: 0x78,
      desc: "increased damage to buildings but slower movement",
      spdMult: 0.3,
      bDmg: 3.3
    }, {
      id: 0x34,
      name: "Thief Gear",
      price: 0x3a98,
      scale: 0x78,
      desc: "steal half of a players gold when you kill them",
      goldSteal: 0.5
    }, {
      id: 0x37,
      name: "Bloodthirster",
      price: 0x4e20,
      scale: 0x78,
      desc: "Restore Health when dealing damage. And increased damage",
      healD: 0.25,
      dmgMultO: 1.2
    }, {
      id: 0x38,
      name: "Assassin Gear",
      price: 0x4e20,
      scale: 0x78,
      desc: "Go invisible when not moving. Can't eat. Increased speed",
      noEat: true,
      spdMult: 1.1,
      invisTimer: 0x3e8
    }];
    this.accessories = [{
      id: 0xc,
      name: "Snowball",
      price: 0x3e8,
      scale: 0x69,
      xOff: 0x12,
      desc: "no effect"
    }, {
      id: 0x9,
      name: "Tree Cape",
      price: 0x3e8,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0xa,
      name: "Stone Cape",
      price: 0x3e8,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x3,
      name: "Cookie Cape",
      price: 0x5dc,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x8,
      name: "Cow Cape",
      price: 0x7d0,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0xb,
      name: "Monkey Tail",
      price: 0x7d0,
      scale: 0x61,
      xOff: 0x19,
      desc: "Super speed but reduced damage",
      spdMult: 1.35,
      dmgMultO: 0.2
    }, {
      id: 0x11,
      name: "Apple Basket",
      price: 0xbb8,
      scale: 0x50,
      xOff: 0xc,
      desc: "slowly regenerates health over time",
      healthRegen: 0x1
    }, {
      id: 0x6,
      name: "Winter Cape",
      price: 0xbb8,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x4,
      name: "Skull Cape",
      price: 0xfa0,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x5,
      name: "Dash Cape",
      price: 0x1388,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x2,
      name: "Dragon Cape",
      price: 0x1770,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x1,
      name: "Super Cape",
      price: 0x1f40,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0x7,
      name: "Troll Cape",
      price: 0x1f40,
      scale: 0x5a,
      desc: "no effect"
    }, {
      id: 0xe,
      name: "Thorns",
      price: 0x2710,
      scale: 0x73,
      xOff: 0x14,
      desc: "no effect"
    }, {
      id: 0xf,
      name: "Blockades",
      price: 0x2710,
      scale: 0x5f,
      xOff: 0xf,
      desc: "no effect"
    }, {
      id: 0x14,
      name: "Devils Tail",
      price: 0x2710,
      scale: 0x5f,
      xOff: 0x14,
      desc: "no effect"
    }, {
      id: 0x10,
      name: "Sawblade",
      price: 0x2ee0,
      scale: 0x5a,
      spin: true,
      xOff: 0x0,
      desc: "deal damage to players that damage you",
      dmg: 0.15
    }, {
      id: 0xd,
      name: "Angel Wings",
      price: 0x3a98,
      scale: 0x8a,
      xOff: 0x16,
      desc: "slowly regenerates health over time",
      healthRegen: 0x3
    }, {
      id: 0x13,
      name: "Shadow Wings",
      price: 0x3a98,
      scale: 0x8a,
      xOff: 0x16,
      desc: "increased movement speed",
      spdMult: 1.1
    }, {
      id: 0x12,
      name: "Blood Wings",
      price: 0x4e20,
      scale: 0xb2,
      xOff: 0x1a,
      desc: "restores health when you deal damage",
      healD: 0.2
    }, {
      id: 0x15,
      name: "Corrupt X Wings",
      price: 0x4e20,
      scale: 0xb2,
      xOff: 0x1a,
      desc: "deal damage to players that damage you",
      dmg: 0.25
    }];
  }
}
class ProjectileManager {
  constructor(_0x294927, _0x14d9f6, _0x362919, _0x5a55e7, _0x16d888, _0x3a7664, _0x20155b, _0x6c90f4, _0x1e6517) {
    this.addProjectile = function (_0x3002fb, _0x260a8a, _0x206163, _0x4f5e02, _0xb064b, _0x84f8a7, _0x1f76a0, _0x40e12c, _0x368ab1, _0x4557a7) {
      let _0x55db71 = _0x3a7664.projectiles[_0x84f8a7];
      let _0x3f2ab6;
      for (let _0xd257c7 = 0x0; _0xd257c7 < _0x14d9f6.length; ++_0xd257c7) {
        if (!_0x14d9f6[_0xd257c7].active) {
          _0x3f2ab6 = _0x14d9f6[_0xd257c7];
          break;
        }
      }
      if (!_0x3f2ab6) {
        _0x3f2ab6 = new _0x294927(_0x362919, _0x5a55e7, _0x16d888, _0x3a7664, _0x20155b, _0x6c90f4, _0x1e6517);
        _0x3f2ab6.sid = _0x14d9f6.length;
        _0x14d9f6.push(_0x3f2ab6);
      }
      _0x3f2ab6.init(_0x84f8a7, _0x3002fb, _0x260a8a, _0x206163, _0xb064b, _0x55db71.dmg, _0x4f5e02, _0x55db71.scale, _0x1f76a0);
      _0x3f2ab6.ignoreObj = _0x40e12c;
      _0x3f2ab6.layer = _0x368ab1 || _0x55db71.layer;
      _0x3f2ab6.inWindow = _0x4557a7;
      _0x3f2ab6.src = _0x55db71.src;
      return _0x3f2ab6;
    };
  }
}
class AiManager {
  constructor(_0x1f14c4, _0x24a412, _0xcbd0f4, _0x455fe6, _0x4d7134, _0x48356f, _0x585380, _0x134a82, _0xe170c0) {
    this.aiTypes = [{
      id: 0x0,
      src: "cow_1",
      killScore: 0x96,
      health: 0x1f4,
      weightM: 0.8,
      speed: 0.00095,
      turnSpeed: 0.001,
      scale: 0x48,
      drop: ["food", 0x32]
    }, {
      id: 0x1,
      src: "pig_1",
      killScore: 0xc8,
      health: 0x320,
      weightM: 0.6,
      speed: 0.00085,
      turnSpeed: 0.001,
      scale: 0x48,
      drop: ["food", 0x50]
    }, {
      id: 0x2,
      name: "Bull",
      src: "bull_2",
      hostile: true,
      dmg: 0x14,
      killScore: 0x3e8,
      health: 0x708,
      weightM: 0.5,
      speed: 0.00094,
      turnSpeed: 0.00074,
      scale: 0x4e,
      viewRange: 0x320,
      chargePlayer: true,
      drop: ["food", 0x64]
    }, {
      id: 0x3,
      name: "Bully",
      src: "bull_1",
      hostile: true,
      dmg: 0x14,
      killScore: 0x7d0,
      health: 0xaf0,
      weightM: 0.45,
      speed: 0.001,
      turnSpeed: 0.0008,
      scale: 0x5a,
      viewRange: 0x384,
      chargePlayer: true,
      drop: ["food", 0x190]
    }, {
      id: 0x4,
      name: "Wolf",
      src: "wolf_1",
      hostile: true,
      dmg: 0x8,
      killScore: 0x1f4,
      health: 0x12c,
      weightM: 0.45,
      speed: 0.001,
      turnSpeed: 0.002,
      scale: 0x54,
      viewRange: 0x320,
      chargePlayer: true,
      drop: ["food", 0xc8]
    }, {
      id: 0x5,
      name: "Quack",
      src: "chicken_1",
      dmg: 0x8,
      killScore: 0x7d0,
      noTrap: true,
      health: 0x12c,
      weightM: 0.2,
      speed: 0.0018,
      turnSpeed: 0.006,
      scale: 0x46,
      drop: ["food", 0x64]
    }, {
      id: 0x6,
      name: "MOOSTAFA",
      nameScale: 0x32,
      src: "enemy",
      hostile: true,
      dontRun: true,
      fixedSpawn: true,
      spawnDelay: 0xea60,
      noTrap: true,
      colDmg: 0x64,
      dmg: 0x28,
      killScore: 0x1f40,
      health: 0x4650,
      weightM: 0.4,
      speed: 0.0007,
      turnSpeed: 0.01,
      scale: 0x50,
      spriteMlt: 1.8,
      leapForce: 0.9,
      viewRange: 0x3e8,
      hitRange: 0xd2,
      hitDelay: 0x3e8,
      chargePlayer: true,
      drop: ["food", 0x64]
    }, {
      id: 0x7,
      name: "Treasure",
      hostile: true,
      nameScale: 0x23,
      src: "crate_1",
      fixedSpawn: true,
      spawnDelay: 0x1d4c0,
      colDmg: 0xc8,
      killScore: 0x1388,
      health: 0x4e20,
      weightM: 0.1,
      speed: 0x0,
      turnSpeed: 0x0,
      scale: 0x46,
      spriteMlt: 0x1
    }, {
      id: 0x8,
      name: "MOOFIE",
      src: "wolf_2",
      hostile: true,
      fixedSpawn: true,
      dontRun: true,
      hitScare: 0x4,
      spawnDelay: 0x7530,
      noTrap: true,
      nameScale: 0x23,
      dmg: 0xa,
      colDmg: 0x64,
      killScore: 0xbb8,
      health: 0x1b58,
      weightM: 0.45,
      speed: 0.0015,
      turnSpeed: 0.002,
      scale: 0x5a,
      viewRange: 0x320,
      chargePlayer: true,
      drop: ["food", 0x3e8]
    }, {
      id: 0x9,
      name: "💀MOOFIE",
      src: "wolf_2",
      hostile: true,
      fixedSpawn: true,
      dontRun: true,
      hitScare: 0x32,
      spawnDelay: 0xea60,
      noTrap: true,
      nameScale: 0x23,
      dmg: 0xc,
      colDmg: 0x64,
      killScore: 0xbb8,
      health: 0x2328,
      weightM: 0.45,
      speed: 0.0015,
      turnSpeed: 0.0025,
      scale: 0x5e,
      viewRange: 0x5a0,
      chargePlayer: true,
      drop: ["food", 0xbb8],
      minSpawnRange: 0.85,
      maxSpawnRange: 0.9
    }, {
      id: 0xa,
      name: "💀Wolf",
      src: "wolf_1",
      hostile: true,
      fixedSpawn: true,
      dontRun: true,
      hitScare: 0x32,
      spawnDelay: 0x7530,
      dmg: 0xa,
      killScore: 0x2bc,
      health: 0x1f4,
      weightM: 0.45,
      speed: 0.00115,
      turnSpeed: 0.0025,
      scale: 0x58,
      viewRange: 0x5a0,
      chargePlayer: true,
      drop: ["food", 0x190],
      minSpawnRange: 0.85,
      maxSpawnRange: 0.9
    }, {
      id: 0xb,
      name: "💀Bully",
      src: "bull_1",
      hostile: true,
      fixedSpawn: true,
      dontRun: true,
      hitScare: 0x32,
      dmg: 0x14,
      killScore: 0x1388,
      health: 0x1388,
      spawnDelay: 0x186a0,
      weightM: 0.45,
      speed: 0.00115,
      turnSpeed: 0.0025,
      scale: 0x5e,
      viewRange: 0x5a0,
      chargePlayer: true,
      drop: ["food", 0x320],
      minSpawnRange: 0.85,
      maxSpawnRange: 0.9
    }];
    this.spawn = function (_0x587512, _0x280198, _0x5ad1dd, _0x42090f) {
      let _0x3b9994 = _0x1f14c4.find(_0x2644fb => !_0x2644fb.active);
      if (!_0x3b9994) {
        _0x3b9994 = new _0x24a412(_0x1f14c4.length, _0x4d7134, _0xcbd0f4, _0x455fe6, _0x585380, _0x48356f, _0x134a82, _0xe170c0);
        _0x1f14c4.push(_0x3b9994);
      }
      _0x3b9994.init(_0x587512, _0x280198, _0x5ad1dd, _0x42090f, this.aiTypes[_0x42090f]);
      return _0x3b9994;
    };
  }
}
class AI {
  constructor(_0x413b75, _0x4d70c4, _0xeb3bf1, _0x1be207, _0x1bbc5e, _0x3afbd6, _0x49e942, _0x44a99e) {
    this.sid = _0x413b75;
    this.isAI = true;
    this.nameIndex = _0x1bbc5e.randInt(0x0, _0x3afbd6.cowNames.length - 0x1);
    this.init = function (_0x2f0102, _0xc47177, _0x5999a7, _0x20e1d3, _0x326015) {
      this.x = _0x2f0102;
      this.y = _0xc47177;
      this.startX = _0x326015.fixedSpawn ? _0x2f0102 : null;
      this.startY = _0x326015.fixedSpawn ? _0xc47177 : null;
      this.xVel = 0x0;
      this.yVel = 0x0;
      this.zIndex = 0x0;
      this.dir = _0x5999a7;
      this.dirPlus = 0x0;
      this.showName = "aaa";
      this.index = _0x20e1d3;
      this.src = _0x326015.src;
      if (_0x326015.name) {
        this.name = _0x326015.name;
      }
      this.weightM = _0x326015.weightM;
      this.speed = _0x326015.speed;
      this.killScore = _0x326015.killScore;
      this.turnSpeed = _0x326015.turnSpeed;
      this.scale = _0x326015.scale;
      this.maxHealth = _0x326015.health;
      this.leapForce = _0x326015.leapForce;
      this.health = this.maxHealth;
      this.chargePlayer = _0x326015.chargePlayer;
      this.viewRange = _0x326015.viewRange;
      this.drop = _0x326015.drop;
      this.dmg = _0x326015.dmg;
      this.hostile = _0x326015.hostile;
      this.dontRun = _0x326015.dontRun;
      this.hitRange = _0x326015.hitRange;
      this.hitDelay = _0x326015.hitDelay;
      this.hitScare = _0x326015.hitScare;
      this.spriteMlt = _0x326015.spriteMlt;
      this.nameScale = _0x326015.nameScale;
      this.colDmg = _0x326015.colDmg;
      this.noTrap = _0x326015.noTrap;
      this.spawnDelay = _0x326015.spawnDelay;
      this.hitWait = 0x0;
      this.waitCount = 0x3e8;
      this.moveCount = 0x0;
      this.targetDir = 0x0;
      this.active = true;
      this.alive = true;
      this.runFrom = null;
      this.chargeTarget = null;
      this.dmgOverTime = {};
    };
    let _0x776665 = 0x0;
    let _0x53d78c = 0x0;
    this.animate = function (_0xdd1956) {
      if (this.animTime > 0x0) {
        this.animTime -= _0xdd1956;
        if (this.animTime <= 0x0) {
          this.animTime = 0x0;
          this.dirPlus = 0x0;
          _0x776665 = 0x0;
          _0x53d78c = 0x0;
        } else if (_0x53d78c == 0x0) {
          _0x776665 += _0xdd1956 / (this.animSpeed * _0x3afbd6.hitReturnRatio);
          this.dirPlus = _0x1bbc5e.lerp(0x0, this.targetAngle, Math.min(0x1, _0x776665));
          if (_0x776665 >= 0x1) {
            _0x776665 = 0x1;
            _0x53d78c = 0x1;
          }
        } else {
          _0x776665 -= _0xdd1956 / (this.animSpeed * (0x1 - _0x3afbd6.hitReturnRatio));
          this.dirPlus = _0x1bbc5e.lerp(0x0, this.targetAngle, Math.max(0x0, _0x776665));
        }
      }
    };
    this.startAnim = function () {
      this.animTime = this.animSpeed = 0x258;
      this.targetAngle = Math.PI * 0.8;
      _0x776665 = 0x0;
      _0x53d78c = 0x0;
    };
  }
}
class DeadPlayer {
  constructor(_0x56e343, _0x20168c, _0x398bb6, _0x260c53, _0x4f4917, _0x5946c2, _0x44a616, _0x1aeefc, _0xa8a102) {
    this.x = _0x56e343;
    this.y = _0x20168c;
    this.lastDir = _0x398bb6;
    this.dir = _0x398bb6 + Math.PI;
    this.buildIndex = _0x260c53;
    this.weaponIndex = _0x4f4917;
    this.weaponVariant = _0x5946c2;
    this.skinColor = _0x44a616;
    this.scale = _0x1aeefc;
    this.visScale = 0x0;
    this.name = _0xa8a102;
    this.alpha = 0x1;
    this.active = true;
    this.animate = function (_0x18325f) {
      let _0xb269bf = UTILS.getAngleDist(this.lastDir, this.dir);
      if (_0xb269bf > 0.01) {
        this.dir += _0xb269bf / 0x14;
      } else {
        this.dir = this.lastDir;
      }
      if (this.visScale < this.scale) {
        this.visScale += _0x18325f / (this.scale / 0x2);
        if (this.visScale >= this.scale) {
          this.visScale = this.scale;
        }
      }
      this.alpha -= _0x18325f / 0x7530;
      if (this.alpha <= 0x0) {
        this.alpha = 0x0;
        this.active = false;
      }
    };
  }
}
class Player {
  constructor(_0x913df9, _0x5e593b, _0x106042, _0x4984dd, _0xe3b65c, _0x41eceb, _0x3ea951, _0x547a93, _0x5b916f, _0x5035eb, _0x5aca83, _0x2b75a5, _0x15cb6b, _0x36f5b6) {
    this.id = _0x913df9;
    this.sid = _0x5e593b;
    this.tmpScore = 0x0;
    this.team = null;
    this.latestSkin = 0x0;
    this.oldSkinIndex = 0x0;
    this.skinIndex = 0x0;
    this.latestTail = 0x0;
    this.oldTailIndex = 0x0;
    this.tailIndex = 0x0;
    this.hitTime = 0x0;
    this.lastHit = 0x0;
    this.showName = "NOOO";
    this.tails = {};
    for (let _0x20da3a = 0x0; _0x20da3a < _0x5aca83.length; ++_0x20da3a) {
      if (_0x5aca83[_0x20da3a].price <= 0x0) {
        this.tails[_0x5aca83[_0x20da3a].id] = 0x1;
      }
    }
    this.skins = {};
    for (let _0x392440 = 0x0; _0x392440 < _0x5035eb.length; ++_0x392440) {
      if (_0x5035eb[_0x392440].price <= 0x0) {
        this.skins[_0x5035eb[_0x392440].id] = 0x1;
      }
    }
    this.points = 0x0;
    this.dt = 0x0;
    this.hidden = false;
    this.itemCounts = {};
    this.isPlayer = true;
    this.pps = 0x0;
    this.moveDir = undefined;
    this.skinRot = 0x0;
    this.lastPing = 0x0;
    this.iconIndex = 0x0;
    this.skinColor = 0x0;
    this.dist2 = 0x0;
    this.aim2 = 0x0;
    this.maxSpeed = 0x1;
    this.chat = {
      message: null,
      count: 0x0
    };
    this.backupNobull = true;
    this.circle = false;
    this.circleRad = 0xc8;
    this.circleRadSpd = 0.1;
    this.cAngle = 0x0;
    this.spawn = function (_0x48a4a8) {
      this.attacked = false;
      this.timeDamaged = 0x0;
      this.timeHealed = 0x0;
      this.pinge = 0x0;
      this.millPlace = "NOOO";
      this.lastshamecount = 0x0;
      this.death = false;
      this.spinDir = 0x0;
      this.sync = false;
      this.antiBull = 0x0;
      this.bullTimer = 0x0;
      this.poisonTimer = 0x0;
      this.active = true;
      this.alive = true;
      this.lockMove = false;
      this.lockDir = false;
      this.minimapCounter = 0x0;
      this.chatCountdown = 0x0;
      this.shameCount = 0x0;
      this.shameTimer = 0x0;
      this.sentTo = {};
      this.gathering = 0x0;
      this.gatherIndex = 0x0;
      this.shooting = {};
      this.shootIndex = 0x9;
      this.autoGather = 0x0;
      this.animTime = 0x0;
      this.animSpeed = 0x0;
      this.mouseState = 0x0;
      this.buildIndex = -0x1;
      this.weaponIndex = 0x0;
      this.weaponCode = 0x0;
      this.weaponVariant = 0x0;
      this.primaryIndex = undefined;
      this.secondaryIndex = undefined;
      this.dmgOverTime = {};
      this.noMovTimer = 0x0;
      this.maxXP = 0x12c;
      this.XP = 0x0;
      this.age = 0x1;
      this.kills = 0x0;
      this.upgrAge = 0x2;
      this.upgradePoints = 0x0;
      this.x = 0x0;
      this.y = 0x0;
      this.oldXY = {
        x: 0x0,
        y: 0x0
      };
      this.zIndex = 0x0;
      this.xVel = 0x0;
      this.yVel = 0x0;
      this.slowMult = 0x1;
      this.dir = 0x0;
      this.dirPlus = 0x0;
      this.targetDir = 0x0;
      this.targetAngle = 0x0;
      this.maxHealth = 0x64;
      this.health = this.maxHealth;
      this.oldHealth = this.maxHealth;
      this.damaged = 0x0;
      this.scale = _0x106042.playerScale;
      this.speed = _0x106042.playerSpeed;
      this.resetMoveDir();
      this.resetResources(_0x48a4a8);
      this.items = [0x0, 0x3, 0x6, 0xa];
      this.weapons = [0x0];
      this.shootCount = 0x0;
      this.weaponXP = [];
      this.reloads = {
        0x0: 0x0,
        0x1: 0x0,
        0x2: 0x0,
        0x3: 0x0,
        0x4: 0x0,
        0x5: 0x0,
        0x6: 0x0,
        0x7: 0x0,
        0x8: 0x0,
        0x9: 0x0,
        0xa: 0x0,
        0xb: 0x0,
        0xc: 0x0,
        0xd: 0x0,
        0xe: 0x0,
        0xf: 0x0,
        0x35: 0x0
      };
      this.bowThreat = {
        0x9: 0x0,
        0xc: 0x0,
        0xd: 0x0,
        0xf: 0x0
      };
      this.damageThreat = 0x0;
      this.inTrap = false;
      this.canEmpAnti = false;
      this.empAnti = false;
      this.soldierAnti = false;
      this.poisonTick = 0x0;
      this.bullTick = 0x0;
      this.setPoisonTick = false;
      this.setBullTick = false;
      this.antiTimer = 0x2;
    };
    this.resetMoveDir = function () {
      this.moveDir = undefined;
    };
    this.resetResources = function (_0x47d2ea) {
      for (let _0x59344f = 0x0; _0x59344f < _0x106042.resourceTypes.length; ++_0x59344f) {
        this[_0x106042.resourceTypes[_0x59344f]] = _0x47d2ea ? 0x64 : 0x0;
      }
    };
    this.getItemType = function (_0x2a5bc9) {
      let _0x3ebea8 = this.items.findIndex(_0x52c008 => _0x52c008 == _0x2a5bc9);
      return _0x3ebea8 != -0x1 ? _0x3ebea8 : _0x5b916f.checkItem.index(_0x2a5bc9, this.items);
    };
    this.setData = function (_0x4d7af7) {
      this.id = _0x4d7af7[0x0];
      this.sid = _0x4d7af7[0x1];
      this.name = _0x4d7af7[0x2];
      this.x = _0x4d7af7[0x3];
      this.y = _0x4d7af7[0x4];
      this.dir = _0x4d7af7[0x5];
      this.health = _0x4d7af7[0x6];
      this.maxHealth = _0x4d7af7[0x7];
      this.scale = _0x4d7af7[0x8];
      this.skinColor = _0x4d7af7[0x9];
    };
    this.updateTimer = function () {
      this.bullTimer -= 0x1;
      if (this.bullTimer <= 0x0) {
        this.setBullTick = false;
        this.bullTick = -1;
        this.bullTimer = _0x106042.serverUpdateRate;
      }
      this.poisonTimer -= 0x1;
      if (this.poisonTimer <= 0x0) {
        this.setPoisonTick = false;
        this.poisonTick = -1;
        this.poisonTimer = _0x106042.serverUpdateRate;
      }
    };
    this.update = function (_0x5b2065) {
      if (this.sid == playerSID) {
        this.circleRad = parseInt(document.getElementById("circleRad").value) || 0x0;
        this.circleRadSpd = parseFloat(document.getElementById("radSpeed").value) || 0x0;
        this.cAngle += this.circleRadSpd;
      }
      if (this.active) {
        let _0x3ca0ac = {
          skin: findID(_0x5035eb, this.skinIndex),
          tail: findID(_0x5aca83, this.tailIndex)
        };
        let _0xa0d8ab = (this.buildIndex >= 0x0 ? 0.5 : 0x1) * (_0x5b916f.weapons[this.weaponIndex].spdMult || 0x1) * (_0x3ca0ac.skin ? _0x3ca0ac.skin.spdMult || 0x1 : 0x1) * (_0x3ca0ac.tail ? _0x3ca0ac.tail.spdMult || 0x1 : 0x1) * (this.y <= _0x106042.snowBiomeTop ? _0x3ca0ac.skin && _0x3ca0ac.skin.coldM ? 0x1 : _0x106042.snowSpeed : 0x1) * this.slowMult;
        this.maxSpeed = _0xa0d8ab;
      }
    };
    let _0x2dd56c = 0x0;
    let _0x1b5cff = 0x0;
    this.animate = function (_0x41282d) {
      if (this.animTime > 0x0) {
        this.animTime -= _0x41282d;
        if (this.animTime <= 0x0) {
          this.animTime = 0x0;
          this.dirPlus = 0x0;
          _0x2dd56c = 0x0;
          _0x1b5cff = 0x0;
        } else if (_0x1b5cff == 0x0) {
          _0x2dd56c += _0x41282d / (this.animSpeed * _0x106042.hitReturnRatio);
          this.dirPlus = _0x4984dd.lerp(0x0, this.targetAngle, Math.min(0x1, _0x2dd56c));
          if (_0x2dd56c >= 0x1) {
            _0x2dd56c = 0x1;
            _0x1b5cff = 0x1;
          }
        } else {
          _0x2dd56c -= _0x41282d / (this.animSpeed * (0x1 - _0x106042.hitReturnRatio));
          this.dirPlus = _0x4984dd.lerp(0x0, this.targetAngle, Math.max(0x0, _0x2dd56c));
        }
      }
    };
    this.startAnim = function (_0x26aa95, _0x3a13d7) {
      this.animTime = this.animSpeed = _0x5b916f.weapons[_0x3a13d7].speed;
      this.targetAngle = _0x26aa95 ? -_0x106042.hitAngle : -Math.PI;
      _0x2dd56c = 0x0;
      _0x1b5cff = 0x0;
    };
    this.canSee = function (_0x3472f4) {
      if (!_0x3472f4) {
        return false;
      }
      let _0x217445 = Math.abs(_0x3472f4.x - this.x) - _0x3472f4.scale;
      let _0xe16765 = Math.abs(_0x3472f4.y - this.y) - _0x3472f4.scale;
      return _0x217445 <= _0x106042.maxScreenWidth / 0x2 * 1.3 && _0xe16765 <= _0x106042.maxScreenHeight / 0x2 * 1.3;
    };
    this.judgeShame = function () {
      this.lastshamecount = this.shameCount;
      if (this.oldHealth < this.health) {
        if (this.hitTime) {
          let _0x4a46a1 = 0x0 - this.hitTime;
          this.lastHit = 0x0;
          this.hitTime = 0x0;
          if (_0x4a46a1 < 0x2) {
            this.shameCount++;
          } else {
            this.shameCount = Math.max(0x0, this.shameCount - 0x2);
          }
        }
      } else if (this.oldHealth > this.health) {
        this.hitTime = 0x0;
      }
    };
    this.addShameTimer = function () {
      this.shameCount = 0x0;
      this.shameTimer = 0x1e;
      let _0x12f73b = setInterval(() => {
        this.shameTimer--;
        if (this.shameTimer <= 0x0) {
          clearInterval(_0x12f73b);
        }
      }, 0x3e8);
    };
    this.isTeam = function (_0x38933c) {
      return this == _0x38933c || this.team && this.team == _0x38933c.team;
    };
    this.findAllianceBySid = function (_0x50f85d) {
      return this.team ? alliancePlayers.find(_0x1543a0 => _0x1543a0 === _0x50f85d) : null;
    };
    this.checkCanInsta = function (_0x42e811) {
      let _0x345763 = 0x0;
      if (this.alive && inGame) {
        let _0x237010 = {
          weapon: this.weapons[0x0],
          variant: this.primaryVariant,
          dmg: this.weapons[0x0] == undefined ? 0x0 : _0x5b916f.weapons[this.weapons[0x0]].dmg
        };
        let _0xfe3eb3 = {
          weapon: this.weapons[0x1],
          variant: this.secondaryVariant,
          dmg: this.weapons[0x1] == undefined ? 0x0 : _0x5b916f.weapons[this.weapons[0x1]].Pdmg
        };
        let _0x1a6dcc = this.skins[0x7] && !_0x42e811 ? 1.5 : 0x1;
        let _0x48a80d = _0x237010.variant != undefined ? _0x106042.weaponVariants[_0x237010.variant].val : 0x1;
        if (_0x237010.weapon != undefined && this.reloads[_0x237010.weapon] == 0x0) {
          _0x345763 += _0x237010.dmg * _0x48a80d * _0x1a6dcc;
        }
        if (_0xfe3eb3.weapon != undefined && this.reloads[_0xfe3eb3.weapon] == 0x0) {
          _0x345763 += _0xfe3eb3.dmg;
        }
        if (this.skins[0x35] && this.reloads[0x35] <= (player.weapons[0x1] == 0xa ? 0x0 : game.tickRate) && near.skinIndex != 0x16) {
          _0x345763 += 0x19;
        }
        _0x345763 *= near.skinIndex == 0x6 ? 0.75 : 0x1;
        return _0x345763;
      }
      return 0x0;
    };
    this.manageReload = function () {
      if (this.shooting[0x35]) {
        this.shooting[0x35] = 0x0;
        this.reloads[0x35] = 0x9c4 - game.tickRate;
      } else if (this.reloads[0x35] > 0x0) {
        this.reloads[0x35] = Math.max(0x0, this.reloads[0x35] - game.tickRate);
      }
      if (this.reloads[this.weaponIndex] <= 111.11111111111111) {
        let _0x4d2496 = this.weaponIndex;
        let _0x1804a7 = liztobj.filter(_0x452dc1 => (_0x452dc1.active || _0x452dc1.alive) && _0x452dc1.health < _0x452dc1.maxHealth && _0x452dc1.group !== undefined && _0x4984dd.getDist(_0x452dc1, player, 0x0, 0x2) <= _0x5b916f.weapons[player.weaponIndex].range + _0x452dc1.scale);
        for (let _0x42ea8c = 0x0; _0x42ea8c < _0x1804a7.length; _0x42ea8c++) {
          let _0x30c3cf = _0x1804a7[_0x42ea8c];
          let _0x18a549 = _0x5b916f.weapons[_0x4d2496].dmg * _0x106042.weaponVariants[tmpObj[(_0x4d2496 < 0x9 ? "prima" : "seconda") + "ryVariant"]].val * (_0x5b916f.weapons[_0x4d2496].sDmg || 0x1);
          if (_0x30c3cf.health - _0x18a549 <= 0x0 && near.length) {
            place(near.dist2 < near.scale * 1.8 + 0x32 ? 0x4 : 0x2, caf(_0x30c3cf, player) + Math.PI);
          }
        }
      }
      if (this.gathering || this.shooting[0x1]) {
        if (this.gathering) {
          this.gathering = 0x0;
          this.reloads[this.gatherIndex] = _0x5b916f.weapons[this.gatherIndex].speed * (this.skinIndex == 0x14 ? 0.78 : 0x1);
          this.attacked = true;
        }
        if (this.shooting[0x1]) {
          this.shooting[0x1] = 0x0;
          this.reloads[this.shootIndex] = _0x5b916f.weapons[this.shootIndex].speed * (this.skinIndex == 0x14 ? 0.78 : 0x1);
          this.attacked = true;
        }
      } else {
        this.attacked = false;
        if (this.buildIndex < 0x0) {
          if (this.reloads[this.weaponIndex] > 0x0) {
            this.reloads[this.weaponIndex] = Math.max(0x0, this.reloads[this.weaponIndex] - 0x6e);
            if (this == player) {
              if (document.getElementById("weaponGrind").checked) {
                for (let _0x138b3c = 0x0; _0x138b3c < Math.PI * 0x2; _0x138b3c += Math.PI / 0x2) {
                  checkPlace(player.getItemType(0x16), _0x138b3c);
                }
              }
            }
            if (this.reloads[this.primaryIndex] == 0x0 && this.reloads[this.weaponIndex] == 0x0) {
              this.antiBull++;
              game.tickBase(() => {
                this.antiBull = 0x0;
              }, 0x1);
            }
          }
        }
      }
    };
    this.addDamageThreat = function (_0x2e4259) {
      let _0x5008b5 = {
        weapon: this.primaryIndex,
        variant: this.primaryVariant
      };
      _0x5008b5.dmg = _0x5008b5.weapon == undefined ? 0x2d : _0x5b916f.weapons[_0x5008b5.weapon].dmg;
      let _0x7367fd = {
        weapon: this.secondaryIndex,
        variant: this.secondaryVariant
      };
      _0x7367fd.dmg = _0x7367fd.weapon == undefined ? 0x4b : _0x5b916f.weapons[_0x7367fd.weapon].Pdmg;
      let _0x35e8f7 = _0x5008b5.variant != undefined ? _0x106042.weaponVariants[_0x5008b5.variant].val : 1.18;
      let _0x3bcf28 = _0x7367fd.variant != undefined ? [0x9, 0xc, 0xd, 0xf].includes(_0x7367fd.weapon) ? 0x1 : _0x106042.weaponVariants[_0x7367fd.variant].val : 1.18;
      if (_0x5008b5.weapon == undefined ? true : this.reloads[_0x5008b5.weapon] == 0x0) {
        this.damageThreat += _0x5008b5.dmg * _0x35e8f7 * 1.5;
      }
      if (_0x7367fd.weapon == undefined ? true : this.reloads[_0x7367fd.weapon] == 0x0) {
        this.damageThreat += _0x7367fd.dmg * _0x3bcf28;
      }
      if (this.reloads[0x35] <= game.tickRate) {
        this.damageThreat += 0x19;
      }
      this.damageThreat *= _0x2e4259.skinIndex == 0x6 ? 0.75 : 0x1;
      if (!this.isTeam(_0x2e4259) && this.dist2 <= 0x12c) {
        _0x2e4259.damageThreat += this.damageThreat;
      }
    };
  }
}
this.addDamageProbability = function (_0x2a27d0) {
  let _0x4e481d = {
    weapon: this.primaryIndex,
    variant: this.primaryVariant
  };
  _0x4e481d.dmg = _0x4e481d.weapon == undefined ? 0x2d : items.weapons[_0x4e481d.weapon].dmg;
  let _0x27fbda = {
    weapon: this.secondaryIndex,
    variant: this.secondaryVariant
  };
  _0x27fbda.dmg = _0x27fbda.weapon == undefined ? 0x32 : items.weapons[_0x27fbda.weapon].Pdmg;
  let _0x3fae82 = _0x4e481d.variant != undefined ? config.weaponVariants[_0x4e481d.variant].val : 1.18;
  let _0x3b4aeb = _0x27fbda.variant != undefined ? [0x9, 0xc, 0xd, 0xf].includes(_0x27fbda.weapon) ? 0x1 : config.weaponVariants[_0x27fbda.variant].val : 1.18;
  if (_0x4e481d.weapon == undefined ? true : this.reloads[_0x4e481d.weapon] == 0x0) {
    this.damageProbably += _0x4e481d.dmg * _0x3fae82 * 1.5 * 0.75;
  }
  if (_0x27fbda.weapon == undefined ? true : this.reloads[_0x27fbda.weapon] == 0x0) {
    this.damageProbably += _0x27fbda.dmg * _0x3b4aeb;
  }
  this.damageProbably *= 0.75;
  if (!this.isTeam(_0x2a27d0) && this.dist2 <= 0x12c) {
    _0x2a27d0.damageProbably += this.damageProbably;
  }
};
function sendUpgrade(_0x39ca6c) {
  player.reloads[_0x39ca6c] = 0x0;
  packet("H", _0x39ca6c);
}
function storeEquip(_0x5778d5, _0x3fe703) {
  packet("c", 0x0, _0x5778d5, _0x3fe703);
}
function storeBuy(_0x5b8c2b, _0x3716c4) {
  packet("c", 0x1, _0x5b8c2b, _0x3716c4);
}
function buyEquip(_0x2532d0, _0xe2dbbf) {
  let _0x31ed53 = player.skins[0x6] ? 0x6 : 0x0;
  if (player.alive && inGame) {
    if (_0xe2dbbf == 0x0) {
      if (player.skins[_0x2532d0]) {
        if (player.latestSkin != _0x2532d0) {
          packet("c", 0x0, _0x2532d0, 0x0);
        }
      } else {
        let _0x3b41ef = findID(hats, _0x2532d0);
        if (_0x3b41ef) {
          if (player.points >= _0x3b41ef.price) {
            packet("c", 0x1, _0x2532d0, 0x0);
            packet("c", 0x0, _0x2532d0, 0x0);
          } else if (player.latestSkin != _0x31ed53) {
            packet("c", 0x0, _0x31ed53, 0x0);
          }
        } else if (player.latestSkin != _0x31ed53) {
          packet("c", 0x0, _0x31ed53, 0x0);
        }
      }
    } else {
      if (_0xe2dbbf == 0x1) {
        if (useWasd && _0x2532d0 != 0xb && _0x2532d0 != 0x0) {
          if (player.latestTail != 0x0) {
            packet("c", 0x0, 0x0, 0x1);
          }
          return;
        }
        if (player.tails[_0x2532d0]) {
          if (player.latestTail != _0x2532d0) {
            packet("c", 0x0, _0x2532d0, 0x1);
          }
        } else {
          let _0x2f0be1 = findID(accessories, _0x2532d0);
          if (_0x2f0be1) {
            if (player.points >= _0x2f0be1.price) {
              packet("c", 0x1, _0x2532d0, 0x1);
              packet("c", 0x0, _0x2532d0, 0x1);
            } else if (player.latestTail != 0x0) {
              packet("c", 0x0, 0x0, 0x1);
            }
          } else if (player.latestTail != 0x0) {
            packet("c", 0x0, 0x0, 0x1);
          }
        }
      }
    }
  }
}
function selectToBuild(_0x4e5948, _0x5485fe) {
  packet("G", _0x4e5948, _0x5485fe);
}
function selectWeapon(_0xe0f159, _0x4eb144) {
  if (!_0x4eb144) {
    player.weaponCode = _0xe0f159;
  }
  packet("G", _0xe0f159, 0x1);
}
function sendAutoGather() {
  packet("K", 0x1, 0x1);
}
function sendAtck(_0x4b0502, _0x4c2ed5) {
  packet("d", _0x4b0502, _0x4c2ed5, 0x1);
}
function place(_0x22cc74, _0x1b8f21, _0x4e02fd) {
  try {
    if (_0x22cc74 == undefined) {
      return;
    }
    let _0x4f5539 = items.list[player.items[_0x22cc74]];
    let _0x10b5a2 = player.scale + _0x4f5539.scale + (_0x4f5539.placeOffset || 0x0);
    let _0x3da94e = player.x2 + _0x10b5a2 * Math.cos(_0x1b8f21);
    let _0x188771 = player.y2 + _0x10b5a2 * Math.sin(_0x1b8f21);
    if (player.alive && inGame && player.itemCounts[_0x4f5539.group.id] == undefined ? true : player.itemCounts[_0x4f5539.group.id] < (config.isSandbox ? 0x12b : _0x4f5539.group.limit ? _0x4f5539.group.limit : 0x63)) {
      selectToBuild(player.items[_0x22cc74]);
      sendAtck(0x1, _0x1b8f21);
      selectWeapon(player.weaponCode, 0x1);
      if (_0x4e02fd && document.getElementById("placeVis").checked) {
        placeVisible.push({
          x: _0x3da94e,
          y: _0x188771,
          name: _0x4f5539.name,
          scale: _0x4f5539.scale,
          dir: _0x1b8f21
        });
        game.tickBase(() => {
          placeVisible.shift();
        }, 0x1);
      }
    }
  } catch (_0x10fb7e) {}
}
function checkPlace(_0x4cee51, _0x5e8712) {
  try {
    if (_0x4cee51 == undefined) {
      return;
    }
    let _0x3b8413 = items.list[player.items[_0x4cee51]];
    let _0x2147b5 = player.scale + _0x3b8413.scale + (_0x3b8413.placeOffset || 0x0);
    let _0x3c7c35 = player.x2 + _0x2147b5 * Math.cos(_0x5e8712);
    let _0x373d81 = player.y2 + _0x2147b5 * Math.sin(_0x5e8712);
    if (objectManager.checkItemLocation(_0x3c7c35, _0x373d81, _0x3b8413.scale, 0.6, _0x3b8413.id, false, player)) {
      place(_0x4cee51, _0x5e8712, 0x1);
    }
  } catch (_0x1b9fac) {}
}
function soldierMult() {
  return player.latestSkin == 0x6 ? 0.75 : 0x1;
}
function healthBased() {
  if (player.health == 0x64) {
    return 0x0;
  }
  if (player.skinIndex != 0x2d && player.skinIndex != 0x38) {
    return Math.ceil((0x64 - player.health) / items.list[player.items[0x0]].healing);
  }
  return 0x0;
}
function getAttacker(_0x2d1660) {
  let _0x18be4b = enemy.filter(_0x1ca5dc => {
    let _0xeb3a20 = {
      three: _0x1ca5dc.attacked
    };
    return _0xeb3a20.three;
  });
  return _0x18be4b;
}
function healer() {
  for (let _0x32004f = 0x0; _0x32004f < healthBased(); _0x32004f++) {
    place(0x0, getAttackDir());
  }
}
function healer33() {
  for (let _0x1e102d = 0x0; _0x1e102d < healthBased(); _0x1e102d++) {
    place(0x0, getAttackDir());
  }
}
function healer1() {
  place(0x0, getAttackDir());
  return Math.ceil((0x64 - player.health) / items.list[player.items[0x0]].healing);
}
function noshameheal() {
  place(0x0, getAttackDir());
  if (player.shameCount >= 0x5) {
    place(0x0, getAttackDir());
    healer33();
  } else {
    if (player.shameCount <= 0x4 && player.skinIndex != 0x6 && player.skinIndex != 0x16) {
      healer33();
      buyEquip(0x6, 0x0);
    } else {
      if (player.shameCount >= 0x5 && player.skinIndex != 0x6 && player.skinIndex != 0x16) {
        return Math.ceil((0x64 - player.health) / items.list[player.items[0x0]].healing);
        healer33();
      }
    }
  }
}
function antiSyncHealing(_0x5eb0af) {
  my.antiSync = true;
  let _0x459b30 = setInterval(() => {
    if (player.shameCount < 0x5) {
      place(0x0, getAttackDir());
    }
  }, 0x4b);
  setTimeout(() => {
    clearInterval(_0x459b30);
    setTimeout(() => {
      my.antiSync = false;
    }, game.tickRate);
  }, game.tickRate);
}
function biomeGear(_0x1d2d31, _0x50bc86) {
  if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
    if (_0x50bc86) {
      return 0x1f;
    }
    buyEquip(0x1f, 0x0);
  } else {
    if (player.y2 <= config.snowBiomeTop) {
      if (_0x50bc86) {
        return enemy && near.dist2 <= 0x12c ? 0x6 : 0xf;
      }
      buyEquip(0xf, 0x0);
    } else {
      if (_0x50bc86) {
        return enemy && near.dist2 <= 0x12c ? 0x6 : 0xc;
      }
      buyEquip(enemy ? 0x6 : 0xc, 0x0);
    }
  }
  if (_0x50bc86) {
    return 0x0;
  }
}
class Traps {
  constructor(_0x2238a6, _0x5d9193) {
    this.dist = 0x0;
    this.aim = 0x0;
    this.inTrap = false;
    this.replaced = false;
    this.antiTrapped = false;
    this.info = {};
    this.notFast = function () {
      return player.weapons[0x1] == 0xa && (this.info.health > _0x5d9193.weapons[player.weapons[0x0]].dmg || player.weapons[0x0] == 0x5);
    };
    this.testCanPlace = function (_0x230d76, _0x271a7d = -(Math.PI / 0x2), _0x5e59f3 = Math.PI / 0x2, _0x1730a1 = Math.PI / 0x12, _0x343fab, _0x262183, _0x51f5c9) {
      try {
        let _0x3a2a22 = _0x5d9193.list[player.items[_0x230d76]];
        let _0x500e9e = player.scale + _0x3a2a22.scale + (_0x3a2a22.placeOffset || 0x0);
        let _0x37f018 = [];
        liztobj.forEach(_0x277735 => {
          _0x37f018.push({
            x: _0x277735.x,
            y: _0x277735.y,
            active: _0x277735.active,
            blocker: _0x277735.blocker,
            scale: _0x277735.scale,
            isItem: _0x277735.isItem,
            type: _0x277735.type,
            colDiv: _0x277735.colDiv,
            getScale: function (_0x34a839, _0xe4121e) {
              _0x34a839 = _0x34a839 || 0x1;
              return this.scale * (this.isItem || this.type == 0x2 || this.type == 0x3 || this.type == 0x4 ? 0x1 : 0.6 * _0x34a839) * (_0xe4121e ? 0x1 : this.colDiv);
            }
          });
        });
        for (let _0x51d249 = _0x271a7d; _0x51d249 < _0x5e59f3; _0x51d249 += _0x1730a1) {
          0x0++;
          let _0x5c0831 = _0x343fab + _0x51d249;
          let _0x226701 = player.x2 + _0x500e9e * Math.cos(_0x5c0831);
          let _0x20c0b6 = player.y2 + _0x500e9e * Math.sin(_0x5c0831);
          let _0x363fcc = _0x37f018.find(_0x149ca3 => _0x149ca3.active && _0x2238a6.getDistance(_0x226701, _0x20c0b6, _0x149ca3.x, _0x149ca3.y) < _0x3a2a22.scale + (_0x149ca3.blocker ? _0x149ca3.blocker : _0x149ca3.getScale(0.6, _0x149ca3.isItem)));
          if (_0x363fcc) {
            continue;
          }
          if (_0x3a2a22.id != 0x12 && _0x20c0b6 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && _0x20c0b6 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
            continue;
          }
          if (!_0x262183 && _0x51f5c9) {
            if (_0x51f5c9.inTrap) {
              if (_0x2238a6.getAngleDist(near.aim2 + Math.PI, _0x5c0831 + Math.PI) <= Math.PI * 1.3) {
                place(0x2, _0x5c0831, 0x1);
              } else if (player.items[0x4] == 0xf) {
                place(0x4, _0x5c0831, 0x1);
              }
            } else if (_0x2238a6.getAngleDist(near.aim2, _0x5c0831) <= config.gatherAngle / 2.6) {
              place(0x2, _0x5c0831, 0x1);
            } else if (player.items[0x4] == 0xf) {
              place(0x4, _0x5c0831, 0x1);
            }
          } else {
            place(_0x230d76, _0x5c0831, 0x1);
          }
          _0x37f018.push({
            x: _0x226701,
            y: _0x20c0b6,
            active: true,
            blocker: _0x3a2a22.blocker,
            scale: _0x3a2a22.scale,
            isItem: true,
            type: null,
            colDiv: _0x3a2a22.colDiv,
            getScale: function () {
              return this.scale;
            }
          });
          if (_0x2238a6.getAngleDist(near.aim2, _0x5c0831) <= 0x1) {
            0x0++;
          }
        }
        if (false && _0x262183 && _0x3a2a22.dmg && near.dist2 <= _0x5d9193.weapons[player.weapons[0x0]].range + player.scale * 1.8 && true) {
          instaC.canSpikeTick = true;
        }
      } catch (_0x618bf3) {}
    };
    this.checkSpikeTick = function () {
      try {
        if (![0x3, 0x4, 0x5].includes(near.primaryIndex)) {
          return false;
        }
        if (document.getElementById("safeAntiSpikeTick").checked || false ? false : near.primaryIndex == undefined ? true : near.reloads[near.primaryIndex] > game.tickRate) {
          return false;
        }
        if (near.dist2 <= _0x5d9193.weapons[near.primaryIndex || 0x5].range + near.scale * 1.8) {
          let _0x3c33eb = _0x5d9193.list[0x9];
          let _0x10b6ac = near.scale + _0x3c33eb.scale + (_0x3c33eb.placeOffset || 0x0);
          let _0x57381c = 0x0;
          let _0x501943 = {
            attempts: 0x0,
            block: "unblocked"
          };
          for (let _0x2df9cd = -0x1; _0x2df9cd <= 0x1; _0x2df9cd += 0.1) {
            0x0++;
            let _0x1f7793 = _0x2238a6.getDirect(player, near, 0x2, 0x2) + _0x2df9cd;
            let _0x5df14a = near.x2 + _0x10b6ac * Math.cos(_0x1f7793);
            let _0x4457d7 = near.y2 + _0x10b6ac * Math.sin(_0x1f7793);
            let _0x165b36 = liztobj.find(_0x3d74e2 => _0x3d74e2.active && _0x2238a6.getDistance(_0x5df14a, _0x4457d7, _0x3d74e2.x, _0x3d74e2.y) < _0x3c33eb.scale + (_0x3d74e2.blocker ? _0x3d74e2.blocker : _0x3d74e2.getScale(0.6, _0x3d74e2.isItem)));
            if (_0x165b36) {
              continue;
            }
            if (_0x4457d7 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && _0x4457d7 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
              continue;
            }
            _0x57381c++;
            _0x501943.block = "blocked";
            break;
          }
          if (_0x57381c) {
            my.anti0Tick = 0x1;
            return true;
          }
        }
      } catch (_0x5b1774) {
        return null;
      }
      return false;
    };
    this.protect = function (_0x2d41e6) {
      if (player.items[0x4]) {
        this.testCanPlace(0x4, -(Math.PI / 0x2), Math.PI / 0x2, Math.PI / 0x12, _0x2d41e6 + Math.PI);
        this.antiTrapped = true;
      }
    };
    this.autoPlace = function () {
      if (enemy.length && true && !instaC.ticking) {
        if (gameObjects.length) {
          let _0x1cdf7a = {
            inTrap: true
          };
          let _0x1db0e3 = gameObjects.filter(_0x2a2881 => _0x2a2881.trap && _0x2a2881.active && _0x2a2881.isTeamObject(player) && _0x2238a6.getDist(_0x2a2881, near, 0x0, 0x2) <= near.scale + _0x2a2881.getScale() + 0x5).sort(function (_0x4e903b, _0x2d4fdf) {
            return _0x2238a6.getDist(_0x4e903b, near, 0x0, 0x2) - _0x2238a6.getDist(_0x2d4fdf, near, 0x0, 0x2);
          })[0x0];
          if (_0x1db0e3) {
            _0x1cdf7a.inTrap = true;
          } else {
            _0x1cdf7a.inTrap = true;
          }
          if (this.testMode ? enemy.length : near.dist2 <= 0x177) {
            if (near.dist2 <= 0xc8) {
              this.testCanPlace(0x4, 0x0, Math.PI * 0x2, Math.PI / 0x18, near.aim2, 0x0, {
                inTrap: true
              });
            } else if (player.items[0x4] == 0xf) {
              this.testCanPlace(0x4, 0x0, Math.PI * 0x2, Math.PI / 0x18, near.aim2);
            }
          }
        } else if ((this.testMode ? enemy.length : near.dist2 <= 0x3e8) && player.items[0x4] == 0xf) {
          this.testCanPlace(0x4, 0x0, Math.PI * 0x2, Math.PI / 0x18, near.aim2);
        }
      }
    };
    let _0x263594 = false;
    let _0x34d022 = false;
    this.replacer = function (_0x409d7d) {
      if (!_0x409d7d || false) {
        return;
      }
      if (!inGame) {
        return;
      }
      if (this.antiTrapped) {
        return;
      }
      game.tickBase(() => {
        let _0x19b4a6 = _0x2238a6.getDirect(_0x409d7d, player, 0x0, 0x2);
        let _0x5127d8 = _0x2238a6.getDist(_0x409d7d, player, 0x0, 0x2);
        if (document.getElementById("weaponGrind").checked && _0x5127d8 <= _0x5d9193.weapons[player.weaponIndex].range + player.scale) {
          return;
        }
        if (_0x263594) {
          if (player.items[0x4] == 0xf) {
            this.testCanPlace(0x4, 0x0, Math.PI * 0x2, Math.PI / 0x18, _0x19b4a6, 0x1);
          }
          _0x263594 = false;
        }
        if (near.dist2 <= 0xfa && !_0x34d022) {
          for (let _0x127c99 = 0x0; _0x127c99 < 0x18; _0x127c99++) {
            let _0x10875b = Math.PI * 0x2 * _0x127c99 / 0x18;
            this.testCanPlace(0x2, _0x10875b, _0x10875b + Math.PI / 0x18, Math.PI / 0x18, _0x19b4a6, 0x1);
            _0x263594 = true;
          }
        }
        if (_0x5127d8 <= 0xfa && near.dist2 <= 0xfa) {
          let _0x185254 = this.checkSpikeTick();
          if (!_0x185254 && near.dist3 <= _0x5d9193.weapons[near.primaryIndex || 0x5].range + near.scale * 1.8) {
            for (let _0x150b19 = 0x0; _0x150b19 < 0x18; _0x150b19++) {
              let _0x11ec53 = Math.PI * 0x2 * _0x150b19 / 0x18;
              this.testCanPlace(0x2, _0x11ec53, _0x11ec53 + Math.PI / 0x18, Math.PI / 0x18, _0x19b4a6, 0x1);
              this.testCanPlace(0x2, Math.PI / 0x2, Math.PI / 0x2, Math.PI / 0x2, near, _0x19b4a6, 0x1);
              _0x34d022 = true;
            }
          } else if (player.items[0x4] == 0xf) {
            this.testCanPlace(0x4, 0x0, Math.PI * 0x2, Math.PI / 0x18, _0x19b4a6, 0x1);
          }
          this.replaced = true;
        }
      }, 0x1);
    };
  }
}
class Instakill {
  constructor() {
    this.wait = false;
    this.can = false;
    this.isTrue = false;
    this.nobull = false;
    this.ticking = false;
    this.canSpikeTick = false;
    this.startTick = false;
    this.readyTick = false;
    this.canCounter = false;
    this.revTick = false;
    this.syncHit = false;
    this.changeType = function (_0x163ab5) {
      this.wait = false;
      this.isTrue = true;
      my.autoAim = true;
      near.backupNobull = false;
      if (_0x163ab5 == "rev") {
        healer1();
        selectWeapon(player.weapons[0x1]);
        buyEquip(0x35, 0x0);
        sendAutoGather();
        setTimeout(() => {
          selectWeapon(player.weapons[0x0]);
          buyEquip(0x7, 0x0);
          setTimeout(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
          }, 0xe1);
        }, 0x64);
      } else {
        if (_0x163ab5 == "nobull") {
          selectWeapon(player.weapons[0x0]);
          healer1();
          buyEquip(0x7, 0x0);
          buyEquip(0x15, 0x1);
          sendAutoGather();
          setTimeout(() => {
            selectWeapon(player.weapons[0x1]);
            buyEquip(player.reloads[0x35] == 0x0 ? 0x35 : 0x6, 0x0);
            setTimeout(() => {
              sendAutoGather();
              this.isTrue = false;
              my.autoAim = false;
            }, 0xff);
          }, 0x69);
        } else if (_0x163ab5 == "normal") {
          selectWeapon(player.weapons[0x0]);
          healer1();
          buyEquip(0x7, 0x0);
          buyEquip(0x15, 0x1);
          sendAutoGather();
          setTimeout(() => {
            selectWeapon(player.weapons[0x1]);
            buyEquip(player.reloads[0x35] == 0x0 ? 0x35 : 0x6, 0x0);
            setTimeout(() => {
              sendAutoGather();
              this.isTrue = false;
              my.autoAim = false;
            }, 0xff);
          }, 0x64);
        } else {
          setTimeout(() => {
            this.isTrue = false;
            my.autoAim = false;
          }, 0x32);
        }
      }
    };
    this.spikeTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      healer1();
      selectWeapon(player.weapons[0x0]);
      buyEquip(0x7, 0x0);
      sendAutoGather();
      game.tickBase(() => {
        selectWeapon(player.weapons[0x0]);
        buyEquip(0x35, 0x0);
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
        }, 0x1);
      }, 0x1);
    };
    this.counterType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[0x0]);
      buyEquip(0x7, 0x0);
      sendAutoGather();
      game.tickBase(() => {
        selectWeapon(player.weapons[0x0]);
        buyEquip(0x35, 0x0);
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
        }, 0x1);
      }, 0x1);
    };
    this.rangeType = function (_0x417f51) {
      this.isTrue = true;
      my.autoAim = true;
      if (_0x417f51 == "ageInsta") {
        my.ageInsta = false;
        if (player.items[0x5] == 0x12) {
          place(0x5, near.aim2);
        }
        packet("a", undefined, 0x1);
        buyEquip(0x16, 0x0);
        buyEquip(0x15, 0x1);
        game.tickBase(() => {
          selectWeapon(player.weapons[0x1]);
          buyEquip(0x35, 0x0);
          buyEquip(0x15, 0x1);
          sendAutoGather();
          game.tickBase(() => {
            sendUpgrade(0xc);
            selectWeapon(player.weapons[0x1]);
            buyEquip(0x35, 0x0);
            buyEquip(0x15, 0x1);
            game.tickBase(() => {
              sendUpgrade(0xf);
              selectWeapon(player.weapons[0x1]);
              buyEquip(0x35, 0x0);
              buyEquip(0x15, 0x1);
              game.tickBase(() => {
                sendAutoGather();
                this.isTrue = false;
                my.autoAim = false;
              }, 0x1);
            }, 0x1);
          }, 0x1);
        }, 0x1);
      } else {
        selectWeapon(player.weapons[0x1]);
        if (player.reloads[0x35] == 0x0 && near.dist2 <= 0x2bc && near.skinIndex != 0x16) {
          buyEquip(0x35, 0x0);
        } else {
          buyEquip(0x14, 0x0);
        }
        buyEquip(0xb, 0x1);
        sendAutoGather();
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
        }, 0x1);
      }
    };
    this.oneTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[0x1]);
      buyEquip(0x35, 0x0);
      buyEquip(0xb, 0x1);
      packet("a", near.aim2, 0x1);
      if (player.weapons[0x1] == 0xf) {
        my.revAim = true;
        sendAutoGather();
      }
      game.tickBase(() => {
        my.revAim = false;
        selectWeapon(player.weapons[0x0]);
        buyEquip(0x7, 0x0);
        buyEquip(0x13, 0x1);
        packet("a", near.aim2, 0x1);
        if (player.weapons[0x1] != 0xf) {
          sendAutoGather();
        }
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
          packet("a", undefined, 0x1);
        }, 0x1);
      }, 0x1);
    };
    this.threeOneTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
      biomeGear();
      buyEquip(0xb, 0x1);
      packet("a", near.aim2, 0x1);
      game.tickBase(() => {
        selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
        buyEquip(0x35, 0x0);
        buyEquip(0xb, 0x1);
        packet("a", near.aim2, 0x1);
        game.tickBase(() => {
          selectWeapon(player.weapons[0x0]);
          buyEquip(0x7, 0x0);
          buyEquip(0x13, 0x1);
          sendAutoGather();
          packet("a", near.aim2, 0x1);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            packet("a", undefined, 0x1);
          }, 0x1);
        }, 0x1);
      }, 0x1);
    };
    this.kmTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      my.revAim = true;
      selectWeapon(player.weapons[0x1]);
      buyEquip(0x35, 0x0);
      buyEquip(0xb, 0x1);
      sendAutoGather();
      packet("a", near.aim2, 0x1);
      game.tickBase(() => {
        my.revAim = false;
        selectWeapon(player.weapons[0x0]);
        buyEquip(0x7, 0x0);
        buyEquip(0x13, 0x1);
        packet("a", near.aim2, 0x1);
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
          packet("a", undefined, 0x1);
        }, 0x1);
      }, 0x1);
    };
    this.boostTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      biomeGear();
      buyEquip(0xb, 0x1);
      packet("a", near.aim2, 0x1);
      game.tickBase(() => {
        if (player.weapons[0x1] == 0xf) {
          my.revAim = true;
        }
        selectWeapon(player.weapons[[0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
        buyEquip(0x35, 0x0);
        buyEquip(0xb, 0x1);
        if ([0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1])) {
          sendAutoGather();
        }
        packet("a", near.aim2, 0x1);
        place(0x4, near.aim2);
        game.tickBase(() => {
          my.revAim = false;
          selectWeapon(player.weapons[0x0]);
          buyEquip(0x7, 0x0);
          buyEquip(0x13, 0x1);
          if (![0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1])) {
            sendAutoGather();
          }
          packet("a", near.aim2, 0x1);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            packet("a", undefined, 0x1);
          }, 0x1);
        }, 0x1);
      }, 0x1);
    };
    this.gotoGoal = function (_0x1ae02b, _0x42cef7) {
      let _0x45d0e7 = {
        a: _0x1ae02b - _0x42cef7,
        b: _0x1ae02b + _0x42cef7,
        c: _0x1ae02b - 0x1 * config.playerScale,
        d: _0x1ae02b + 0x1 * config.playerScale,
        e: _0x1ae02b - 0x2 * config.playerScale,
        f: _0x1ae02b + 0x2 * config.playerScale,
        g: _0x1ae02b - 0x4 * config.playerScale,
        h: _0x1ae02b + 0x4 * config.playerScale
      };
      let _0xe5ccf9 = function (_0x468b19, _0x4abf0b) {
        if (player.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && player.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2 && _0x4abf0b == 0x0) {
          buyEquip(0x1f, 0x0);
        } else {
          buyEquip(_0x468b19, _0x4abf0b);
        }
      };
      if (enemy.length) {
        let _0x1688ba = near.dist2;
        this.ticking = true;
        if (_0x1688ba >= _0x45d0e7.a && _0x1688ba <= _0x45d0e7.b) {
          _0xe5ccf9(0x16, 0x0);
          _0xe5ccf9(0xb, 0x1);
          if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
            selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
          }
          return {
            dir: undefined,
            action: 0x1
          };
        } else {
          if (_0x1688ba < _0x45d0e7.a) {
            if (_0x1688ba >= _0x45d0e7.g) {
              if (_0x1688ba >= _0x45d0e7.e) {
                if (_0x1688ba >= _0x45d0e7.c) {
                  _0xe5ccf9(0x28, 0x0);
                  _0xe5ccf9(0x15, 0x1);
                  if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                    selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                  }
                } else {
                  _0xe5ccf9(0x1a, 0x0);
                  _0xe5ccf9(0x15, 0x1);
                  if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                    selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                  }
                }
              } else {
                _0xe5ccf9(0x1a, 0x0);
                _0xe5ccf9(0xc, 0x1);
                if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                  selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                }
              }
            } else {
              biomeGear();
              _0xe5ccf9(0xb, 0x1);
              if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
              }
            }
            return {
              dir: near.aim2 + Math.PI,
              action: 0x0
            };
          } else {
            if (_0x1688ba > _0x45d0e7.b) {
              if (_0x1688ba <= _0x45d0e7.h) {
                if (_0x1688ba <= _0x45d0e7.f) {
                  if (_0x1688ba <= _0x45d0e7.d) {
                    _0xe5ccf9(0x28, 0x0);
                    _0xe5ccf9(0x9, 0x1);
                    if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                      selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                    }
                  } else {
                    _0xe5ccf9(0x16, 0x0);
                    _0xe5ccf9(0x13, 0x1);
                    if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                      selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                    }
                  }
                } else {
                  _0xe5ccf9(0x6, 0x0);
                  _0xe5ccf9(0xc, 0x1);
                  if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                    selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                  }
                }
              } else {
                biomeGear();
                _0xe5ccf9(0xb, 0x1);
                if (player.weaponIndex != player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0] || player.buildIndex > -0x1) {
                  selectWeapon(player.weapons[[0xa, 0xe].includes(player.weapons[0x1]) ? 0x1 : 0x0]);
                }
              }
              return {
                dir: near.aim2,
                action: 0x0
              };
            }
          }
          return {
            dir: undefined,
            action: 0x0
          };
        }
      } else {
        this.ticking = false;
        return {
          dir: undefined,
          action: 0x0
        };
      }
    };
    this.bowMovement = function () {
      let _0x59fb4b = this.gotoGoal(0x2ad, 0x3);
      if (_0x59fb4b.action) {
        if (player.reloads[0x35] == 0x0 && !this.isTrue) {
          this.rangeType("ageInsta");
        } else {
          packet("a", _0x59fb4b.dir, 0x1);
        }
      } else {
        packet("a", _0x59fb4b.dir, 0x1);
      }
    };
    this.tickMovement = function () {
      let _0x15ae34 = this.gotoGoal([0xa, 0xe].includes(player.weapons[0x1]) && player.y2 > config.snowBiomeTop ? 0xf0 : player.weapons[0x1] == 0xf ? 0xfa : player.y2 <= config.snowBiomeTop ? [0xa, 0xe].includes(player.weapons[0x1]) ? 0x10e : 0x109 : 0x113, 0x3);
      if (_0x15ae34.action) {
        if (![0x6, 0x16].includes(near.skinIndex) && player.reloads[0x35] == 0x0 && !this.isTrue) {
          if ([0xa, 0xe].includes(player.weapons[0x1]) && player.y2 > config.snowBiomeTop || player.weapons[0x1] == 0xf) {
            this.oneTickType();
          } else {
            this.threeOneTickType();
          }
        } else {
          packet("a", _0x15ae34.dir, 0x1);
        }
      } else {
        packet("a", _0x15ae34.dir, 0x1);
      }
    };
    this.kmTickMovement = function () {
      let _0x460dde = this.gotoGoal(0xf0, 0x3);
      if (_0x460dde.action) {
        if (near.skinIndex != 0x16 && player.reloads[0x35] == 0x0 && !this.isTrue && (0x0 - near.poisonTick) % config.serverUpdateRate == 0x8) {
          this.kmTickType();
        } else {
          packet("a", _0x460dde.dir, 0x1);
        }
      } else {
        packet("a", _0x460dde.dir, 0x1);
      }
    };
    this.boostTickMovement = function () {
      let _0x589ee0 = player.weapons[0x1] == 0x9 ? 0x16d : player.weapons[0x1] == 0xc ? 0x17c : player.weapons[0x1] == 0xd ? 0x186 : player.weapons[0x1] == 0xf ? 0x16d : 0x172;
      let _0x38af1e = player.weapons[0x1] == 0x9 ? 0x2 : player.weapons[0x1] == 0xc ? 1.5 : player.weapons[0x1] == 0xd ? 1.5 : player.weapons[0x1] == 0xf ? 0x2 : 0x3;
      let _0x45ba17 = this.gotoGoal(_0x589ee0, _0x38af1e);
      if (_0x45ba17.action) {
        if (player.reloads[0x35] == 0x0 && !this.isTrue) {
          this.boostTickType();
        } else {
          packet("a", _0x45ba17.dir, 0x1);
        }
      } else {
        packet("a", _0x45ba17.dir, 0x1);
      }
    };
    this.perfCheck = function (_0x1e8520, _0x57c5cb) {
      if (_0x57c5cb.weaponIndex == 0xb && UTILS.getAngleDist(_0x57c5cb.aim2 + Math.PI, _0x57c5cb.d2) <= config.shieldAngle) {
        return false;
      }
      if (![0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1])) {
        return true;
      }
      let _0x728282 = {
        x: _0x57c5cb.x2 + 0x46 * Math.cos(_0x57c5cb.aim2 + Math.PI),
        y: _0x57c5cb.y2 + 0x46 * Math.sin(_0x57c5cb.aim2 + Math.PI)
      };
      if (UTILS.lineInRect(_0x1e8520.x2 - _0x1e8520.scale, _0x1e8520.y2 - _0x1e8520.scale, _0x1e8520.x2 + _0x1e8520.scale, _0x1e8520.y2 + _0x1e8520.scale, _0x728282.x, _0x728282.y, _0x728282.x, _0x728282.y)) {
        return true;
      }
      let _0xcb13b0 = ais.filter(_0x5765c9 => _0x5765c9.visible).find(_0xaddb15 => {
        if (UTILS.lineInRect(_0xaddb15.x2 - _0xaddb15.scale, _0xaddb15.y2 - _0xaddb15.scale, _0xaddb15.x2 + _0xaddb15.scale, _0xaddb15.y2 + _0xaddb15.scale, _0x728282.x, _0x728282.y, _0x728282.x, _0x728282.y)) {
          return true;
        }
      });
      if (_0xcb13b0) {
        return false;
      }
      _0xcb13b0 = liztobj.filter(_0x2d1037 => _0x2d1037.active).find(_0x35efd4 => {
        let _0x314ea1 = _0x35efd4.getScale();
        if (!_0x35efd4.ignoreCollision && UTILS.lineInRect(_0x35efd4.x - _0x314ea1, _0x35efd4.y - _0x314ea1, _0x35efd4.x + _0x314ea1, _0x35efd4.y + _0x314ea1, _0x728282.x, _0x728282.y, _0x728282.x, _0x728282.y)) {
          return true;
        }
      });
      if (_0xcb13b0) {
        return false;
      }
      return true;
    };
  }
}
class Autobuy {
  constructor(_0x56505a, _0x2c1b01) {
    this.hat = function () {
      _0x56505a.forEach(_0x3a3e53 => {
        let _0x5c98e7 = findID(hats, _0x3a3e53);
        if (_0x5c98e7 && !player.skins[_0x3a3e53] && player.points >= _0x5c98e7.price) {
          packet("c", 0x1, _0x3a3e53, 0x0);
        }
      });
    };
    this.acc = function () {
      _0x2c1b01.forEach(_0x13664a => {
        let _0x504a88 = findID(accessories, _0x13664a);
        if (_0x504a88 && !player.tails[_0x13664a] && player.points >= _0x504a88.price) {
          packet("c", 0x1, _0x13664a, 0x1);
        }
      });
    };
  }
}
class Autoupgrade {
  constructor() {
    this.sb = function (_0xb7e7eb) {
      _0xb7e7eb(0x3);
      _0xb7e7eb(0x11);
      _0xb7e7eb(0x1f);
      _0xb7e7eb(0x17);
      _0xb7e7eb(0x9);
      _0xb7e7eb(0x26);
    };
    this.kh = function (_0x4b9fbd) {
      _0x4b9fbd(0x3);
      _0x4b9fbd(0x11);
      _0x4b9fbd(0x1f);
      _0x4b9fbd(0x17);
      _0x4b9fbd(0xa);
      _0x4b9fbd(0x26);
      _0x4b9fbd(0x4);
      _0x4b9fbd(0x19);
    };
    this.pb = function (_0x4a55f9) {
      _0x4a55f9(0x5);
      _0x4a55f9(0x11);
      _0x4a55f9(0x20);
      _0x4a55f9(0x17);
      _0x4a55f9(0x9);
      _0x4a55f9(0x26);
    };
    this.ph = function (_0x42330e) {
      _0x42330e(0x5);
      _0x42330e(0x11);
      _0x42330e(0x20);
      _0x42330e(0x17);
      _0x42330e(0xa);
      _0x42330e(0x26);
      _0x42330e(0x1c);
      _0x42330e(0x19);
    };
    this.db = function (_0xc61fe1) {
      _0xc61fe1(0x7);
      _0xc61fe1(0x11);
      _0xc61fe1(0x1f);
      _0xc61fe1(0x17);
      _0xc61fe1(0x9);
      _0xc61fe1(0x22);
    };
    this.km = function (_0x447e72) {
      _0x447e72(0x7);
      _0x447e72(0x11);
      _0x447e72(0x1f);
      _0x447e72(0x17);
      _0x447e72(0xa);
      _0x447e72(0x26);
      _0x447e72(0x4);
      _0x447e72(0xf);
    };
  }
}
let tmpList = [];
let UTILS = new Utils();
let items = new Items();
let objectManager = new Objectmanager(GameObject, gameObjects, UTILS, config);
let store = new Store();
let hats = store.hats;
let accessories = store.accessories;
let projectileManager = new ProjectileManager(Projectile, projectiles, players, ais, objectManager, items, config, UTILS);
let aiManager = new AiManager(ais, AI, players, items, null, config, UTILS);
let textManager = new Textmanager();
let traps = new Traps(UTILS, items);
let instaC = new Instakill();
let autoBuy = new Autobuy([0x28, 0x6, 0x7, 0x16, 0x35, 0xf, 0x1f], [0xb, 0x15, 0x12, 0xd]);
let autoUpgrade = new Autoupgrade();
let lastDeath;
let minimapData;
let mapMarker = {};
let mapPings = [];
let tmpPing;
let antiinsta = true;
let antiinsta1 = false;
let breakTrackers = [];
function sendChat(_0x2f724b) {
  packet("6", _0x2f724b.slice(0x0, 0x1e));
}
let runAtNextTick = [];
function checkProjectileHolder(_0x1fb952, _0x2e151a, _0x31c4b3, _0x1eced6, _0x55337c, _0x573ae9, _0x2edf22, _0x5ca412) {
  let _0x2b742e = _0x573ae9 == 0x0 ? 0x9 : _0x573ae9 == 0x2 ? 0xc : _0x573ae9 == 0x3 ? 0xd : _0x573ae9 == 0x5 && 0xf;
  let _0x32772d = config.playerScale * 0x2;
  let _0x208258 = {
    x: _0x573ae9 == 0x1 ? _0x1fb952 : _0x1fb952 - _0x32772d * Math.cos(_0x31c4b3),
    y: _0x573ae9 == 0x1 ? _0x2e151a : _0x2e151a - _0x32772d * Math.sin(_0x31c4b3)
  };
  let _0x2b3542 = players.filter(_0x371db => _0x371db.visible && UTILS.getDist(_0x208258, _0x371db, 0x0, 0x2) <= _0x371db.scale).sort(function (_0x1d304f, _0x23148c) {
    return UTILS.getDist(_0x208258, _0x1d304f, 0x0, 0x2) - UTILS.getDist(_0x208258, _0x23148c, 0x0, 0x2);
  })[0x0];
  if (_0x2b3542) {
    if (_0x573ae9 == 0x1) {
      _0x2b3542.shooting[0x35] = 0x1;
    } else {
      _0x2b3542.shootIndex = _0x2b742e;
      _0x2b3542.shooting[0x1] = 0x1;
      antiProj(_0x2b3542, _0x31c4b3, _0x1eced6, _0x55337c, _0x573ae9, _0x2b742e);
    }
  }
}
let projectileCount = 0x0;
function antiProj(_0x4c7f68, _0x3cd551, _0x2a98b5, _0x2a0886, _0x7c1ac5, _0x368be3) {
  if (!_0x4c7f68.isTeam(player)) {
    tmpDir = UTILS.getDirect(player, _0x4c7f68, 0x2, 0x2);
    if (UTILS.getAngleDist(tmpDir, _0x3cd551) <= 0.2) {
      _0x4c7f68.bowThreat[_0x368be3]++;
      if (_0x7c1ac5 == 0x5) {
        projectileCount++;
      }
      setTimeout(() => {
        _0x4c7f68.bowThreat[_0x368be3]--;
        if (_0x7c1ac5 == 0x5) {
          projectileCount--;
        }
      }, _0x2a98b5 / _0x2a0886);
      if (_0x4c7f68.bowThreat[0x9] >= 0x1 && (_0x4c7f68.bowThreat[0xc] >= 0x1 || _0x4c7f68.bowThreat[0xf] >= 0x1)) {
        place(0x1, _0x4c7f68.aim2);
        my.anti0Tick = 0x4;
        antiSyncHealing(0x4);
      } else if (projectileCount >= 0x2) {
        place(0x1, _0x4c7f68.aim2);
        healer();
        sendChat("sync is homo");
        buyEquip(0x16, 0x0);
        buyEquip(0xd, 0x1);
        my.anti0Tick = 0x4;
        antiSyncHealing(0x4);
      } else if (projectileCount === 0x1) {
        buyEquip(0x6, 0x0);
        buyEquip(0xd, 0x1);
      }
    }
  }
}
function showItemInfo(_0x3a3618, _0x3406cd, _0x49bf8e) {
  if (player && _0x3a3618) {
    UTILS.removeAllChildren(itemInfoHolder);
    itemInfoHolder.classList.add("visible");
    UTILS.generateElement({
      id: "itemInfoName",
      text: UTILS.capitalizeFirst(_0x3a3618.name),
      parent: itemInfoHolder
    });
    UTILS.generateElement({
      id: "itemInfoDesc",
      text: _0x3a3618.desc,
      parent: itemInfoHolder
    });
    if (_0x49bf8e) {} else {
      if (_0x3406cd) {
        UTILS.generateElement({
          class: "itemInfoReq",
          text: !_0x3a3618.type ? "primary" : "secondary",
          parent: itemInfoHolder
        });
      } else {
        for (let _0x3388f6 = 0x0; _0x3388f6 < _0x3a3618.req.length; _0x3388f6 += 0x2) {
          UTILS.generateElement({
            class: "itemInfoReq",
            html: _0x3a3618.req[_0x3388f6] + "<span class='itemInfoReqVal'> x" + _0x3a3618.req[_0x3388f6 + 0x1] + "</span>",
            parent: itemInfoHolder
          });
        }
        if (_0x3a3618.group.limit) {
          UTILS.generateElement({
            class: "itemInfoLmt",
            text: (player.itemCounts[_0x3a3618.group.id] || 0x0) + "/" + (config.isSandbox ? 0x63 : _0x3a3618.group.limit),
            parent: itemInfoHolder
          });
        }
      }
    }
  } else {
    itemInfoHolder.classList.remove("visible");
  }
}
window.addEventListener("resize", UTILS.checkTrusted(resize));
function resize() {
  screenWidth = window.innerWidth;
  screenHeight = window.innerHeight;
  let _0x331ebf = Math.max(screenWidth / maxScreenWidth, screenHeight / maxScreenHeight) * 0x1;
  gameCanvas.width = screenWidth * 0x1;
  gameCanvas.height = screenHeight * 0x1;
  gameCanvas.style.width = screenWidth + "px";
  gameCanvas.style.height = screenHeight + "px";
  mainContext.setTransform(_0x331ebf, 0x0, 0x0, _0x331ebf, (screenWidth * 0x1 - maxScreenWidth * _0x331ebf) / 0x2, (screenHeight * 0x1 - maxScreenHeight * _0x331ebf) / 0x2);
}
resize();
var usingTouch;
const mals = document.getElementById("touch-controls-fullscreen");
mals.style.display = "block";
mals.addEventListener("mousemove", gameInput, false);
function gameInput(_0x339cc1) {
  mouseX = _0x339cc1.clientX;
  mouseY = _0x339cc1.clientY;
}
let clicks = {
  left: false,
  middle: false,
  right: false
};
mals.addEventListener("mousedown", mouseDown, false);
function mouseDown(_0x854753) {
  if (attackState != 0x1) {
    attackState = 0x1;
    if (_0x854753.button == 0x0) {
      clicks.left = true;
    } else {
      if (_0x854753.button == 0x1) {
        clicks.middle = true;
      } else if (_0x854753.button == 0x2) {
        clicks.right = true;
      }
    }
  }
}
mals.addEventListener("mouseup", UTILS.checkTrusted(mouseUp));
function mouseUp(_0x27f0a6) {
  if (attackState != 0x0) {
    attackState = 0x0;
    if (_0x27f0a6.button == 0x0) {
      clicks.left = false;
    } else {
      if (_0x27f0a6.button == 0x1) {
        clicks.middle = false;
      } else if (_0x27f0a6.button == 0x2) {
        clicks.right = false;
      }
    }
  }
}
mals.addEventListener("wheel", wheel, false);
let wbe = 0x1;
function wheel(_0x37bf03) {
  if (_0x37bf03.deltaY < 0x0) {
    wbe -= 0.05;
    maxScreenWidth = config.maxScreenWidth * wbe;
    maxScreenHeight = config.maxScreenHeight * wbe;
    resize();
  } else {
    wbe += 0.05;
    maxScreenWidth = config.maxScreenWidth * wbe;
    maxScreenHeight = config.maxScreenHeight * wbe;
    resize();
  }
}
function getMoveDir() {
  let _0x98c2fe = 0x0;
  let _0x28d55b = 0x0;
  for (let _0x11f32b in moveKeys) {
    let _0x4a45cd = moveKeys[_0x11f32b];
    _0x98c2fe += !!keys[_0x11f32b] * _0x4a45cd[0x0];
    _0x28d55b += !!keys[_0x11f32b] * _0x4a45cd[0x1];
  }
  return _0x98c2fe == 0x0 && _0x28d55b == 0x0 ? undefined : Math.atan2(_0x28d55b, _0x98c2fe);
}
function getSafeDir() {
  if (!player) {
    return 0x0;
  }
  if (!player.lockDir) {
    lastDir = Math.atan2(mouseY - screenHeight / 0x2, mouseX - screenWidth / 0x2);
  }
  return lastDir || 0x0;
}
let plusDir = 0x0;
let lastSpin = Date.now();
function getAttackDir() {
  if (player && Date.now() - lastSpin >= 0xeb && !(false || false)) {
    plusDir += Math.random() * (Math.PI * 0x2);
    lastSpin = Date.now();
  }
  if (!player) {
    return "0";
  }
  if (false || (false || useWasd && near.dist2 <= items.weapons[player.weapons[0x0]].range + near.scale * 1.8 && !traps.inTrap) && player.reloads[player.weapons[0x0]] == 0x0) {
    lastDir = document.getElementById("weaponGrind").checked ? getSafeDir() : enemy.length ? near.aim2 : getSafeDir();
  } else {
    if (false && player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
      lastDir = getSafeDir();
    } else {
      if (traps.inTrap) {
        lastDir = traps.aim;
      } else if (!player.lockDir && !player.lockDir && true) {
        if (useWasd) {
          lastDir = lastDir;
        } else {
          lastDir = getSafeDir();
        }
      }
    }
  }
  return lastDir;
}
function getVisualDir() {
  if (!player) {
    return 0x0;
  }
  lastDir = getSafeDir();
  return lastDir || 0x0;
}
function keysActive() {
  return allianceMenu.style.display != "block" && chatHolder.style.display != "block" && !menuCBFocus;
}
function toggleMenuChat() {
  if (menuChatDiv.style.display != "none") {
    let _0x2ed174 = {
      found: menuChatBox.value.startsWith("/") && commands[menuChatBox.value.slice(0x1).split(" ")[0x0]],
      fv: commands[menuChatBox.value.slice(0x1).split(" ")[0x0]]
    };
    if (_0x2ed174.found) {
      if (typeof _0x2ed174.fv.action === "function") {
        _0x2ed174.fv.action(menuChatBox.value);
      }
    } else {
      sendChat(menuChatBox.value);
    }
    menuChatBox.value = "";
    menuChatBox.blur();
  } else if (menuCBFocus) {
    menuChatBox.blur();
  } else {
    menuChatBox.focus();
  }
}
function keyDown(_0x342ee3) {
  let _0x1b0938 = _0x342ee3.which || _0x342ee3.keyCode || 0x0;
  if (player && player.alive && allianceMenu.style.display != "block" && chatHolder.style.display != "block" && !menuCBFocus) {
    if (!keys[_0x1b0938]) {
      keys[_0x1b0938] = 0x1;
      macro[_0x342ee3.key] = 0x1;
      if (_0x1b0938 == 0x1b) {
        openMenu = !openMenu;
        $("#menuDiv").toggle();
        $("#menuChatDiv").toggle();
      } else {
        if (_0x1b0938 == 0x45) {
          sendAutoGather();
        } else {
          if (_0x1b0938 == 0x43) {
            updateMapMarker();
          } else {
            if (player.weapons[_0x1b0938 - 0x31] != undefined) {
              player.weaponCode = player.weapons[_0x1b0938 - 0x31];
            } else {
              if (moveKeys[_0x1b0938]) {
                sendMoveDir();
              } else {
                if (_0x342ee3.key == "m") {
                  mills.placeSpawnPads = true;
                } else {
                  if (_0x342ee3.key == "z") {
                    mills.place = true;
                  } else {
                    if (_0x342ee3.key == "Z") {
                      if (typeof window.debug == "function") {
                        window.debug();
                      }
                    } else {
                      if (_0x1b0938 == 0x20) {
                        packet("d", 0x1, getSafeDir(), 0x1);
                        packet("d", 0x0, getSafeDir(), 0x1);
                      } else {
                        if (_0x342ee3.key == ",") {
                          io.send("6", "syncon");
                          project.send(JSON.stringify(["tezt", "ratio"]));
                          for (let _0x2bb3a2 = 0x0; _0x2bb3a2 < botz.length; _0x2bb3a2++) {
                            botz[_0x2bb3a2][0x0].zync(near);
                            console.log(botz[_0x2bb3a2][0x0]);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
addEventListener("keydown", UTILS.checkTrusted(keyDown));
function keyUp(_0xd33081) {
  if (player && player.alive) {
    let _0x2d3cbc = _0xd33081.which || _0xd33081.keyCode || 0x0;
    if (_0x2d3cbc == 0xd) {
      toggleMenuChat();
    } else {
      if (allianceMenu.style.display != "block" && chatHolder.style.display != "block" && !menuCBFocus) {
        if (keys[_0x2d3cbc]) {
          keys[_0x2d3cbc] = 0x0;
          macro[_0xd33081.key] = 0x0;
          if (moveKeys[_0x2d3cbc]) {
            sendMoveDir();
          } else if (_0xd33081.key == ",") {
            player.sync = false;
          }
        }
      }
    }
  }
}
window.addEventListener("keyup", UTILS.checkTrusted(keyUp));
function sendMoveDir() {
  let _0x205a74 = getMoveDir();
  if (lastMoveDir == undefined || _0x205a74 == undefined || Math.abs(_0x205a74 - lastMoveDir) > 0.3) {
    if (true && true) {
      packet("a", _0x205a74, 0x1);
    }
    lastMoveDir = _0x205a74;
  }
}
function bindEvents() {}
bindEvents();
let isItemSetted = [];
function updateItemCountDisplay(_0x5148ea = undefined) {
  for (let _0x3d02af = 0x3; _0x3d02af < items.list.length; ++_0x3d02af) {
    let _0x2c279c = items.list[_0x3d02af].group.id;
    let _0x28a514 = items.weapons.length + _0x3d02af;
    if (!isItemSetted[_0x28a514]) {
      isItemSetted[_0x28a514] = document.createElement("div");
      isItemSetted[_0x28a514].id = "itemCount" + _0x28a514;
      document.getElementById("actionBarItem" + _0x28a514).appendChild(isItemSetted[_0x28a514]);
      isItemSetted[_0x28a514].style = "\n                        display: block;\n                        position: absolute;\n                        padding-left: 5px;\n                        font-size: 2em;\n                        color: #fff;\n                        ";
      isItemSetted[_0x28a514].innerHTML = player.itemCounts[_0x2c279c] || 0x0;
    } else {
      if (_0x5148ea == _0x2c279c) {
        isItemSetted[_0x28a514].innerHTML = player.itemCounts[_0x5148ea] || 0x0;
      }
    }
  }
}
var retrappable = false;
function autoPush() {
  retrappable = true;
  let _0x484f85 = gameObjects.filter(_0x216081 => _0x216081.trap && _0x216081.active && _0x216081.isTeamObject(player) && UTILS.getDist(_0x216081, near, 0x0, 0x2) <= near.scale + _0x216081.getScale() + 0x5).sort(function (_0x11e5ff, _0xcabc2d) {
    return UTILS.getDist(_0x11e5ff, near, 0x0, 0x2) - UTILS.getDist(_0xcabc2d, near, 0x0, 0x2);
  })[0x0];
  if (_0x484f85) {
    let _0x244ae4 = gameObjects.filter(_0x227c0c => _0x227c0c.dmg && _0x227c0c.active && _0x227c0c.isTeamObject(player) && UTILS.getDist(_0x227c0c, _0x484f85, 0x0, 0x0) <= near.scale + _0x484f85.scale + _0x227c0c.scale).sort(function (_0x3b706f, _0x2c7765) {
      return UTILS.getDist(_0x3b706f, near, 0x0, 0x2) - UTILS.getDist(_0x2c7765, near, 0x0, 0x2);
    })[0x0];
    if (_0x244ae4) {
      let _0x5c62bb = {
        x: _0x244ae4.x + 0xfa * Math.cos(UTILS.getDirect(near, _0x244ae4, 0x2, 0x0)),
        y: _0x244ae4.y + 0xfa * Math.sin(UTILS.getDirect(near, _0x244ae4, 0x2, 0x0)),
        x2: _0x244ae4.x + (UTILS.getDist(near, _0x244ae4, 0x2, 0x0) + player.scale) * Math.cos(UTILS.getDirect(near, _0x244ae4, 0x2, 0x0)),
        y2: _0x244ae4.y + (UTILS.getDist(near, _0x244ae4, 0x2, 0x0) + player.scale) * Math.sin(UTILS.getDirect(near, _0x244ae4, 0x2, 0x0))
      };
      let _0x54f477 = gameObjects.filter(_0x17266b => _0x17266b.active).find(_0x426fae => {
        let _0x488aac = _0x426fae.getScale();
        if (!_0x426fae.ignoreCollision && UTILS.lineInRect(_0x426fae.x - _0x488aac, _0x426fae.y - _0x488aac, _0x426fae.x + _0x488aac, _0x426fae.y + _0x488aac, player.x2, player.y2, _0x5c62bb.x2, _0x5c62bb.y2)) {
          return true;
        }
      });
      if (_0x54f477) {} else {
        my.autoPush = true;
        my.pushData = {
          x: _0x244ae4.x,
          y: _0x244ae4.y,
          x2: _0x5c62bb.x2,
          y2: _0x5c62bb.y2
        };
        let _0x436020 = player.scale / 0xa;
        if (UTILS.lineInRect(player.x2 - _0x436020, player.y2 - _0x436020, player.x2 + _0x436020, player.y2 + _0x436020, near.x2, near.y2, _0x5c62bb.x, _0x5c62bb.y)) {
          packet("a", near.aim2, 0x1);
        } else {
          packet("a", UTILS.getDirect(_0x5c62bb, player, 0x2, 0x2), 0x1);
        }
      }
    }
  }
}
function addDeadPlayer(_0x3ec3d0) {
  deadPlayers.push(new DeadPlayer(_0x3ec3d0.x, _0x3ec3d0.y, _0x3ec3d0.dir, _0x3ec3d0.buildIndex, _0x3ec3d0.weaponIndex, _0x3ec3d0.weaponVariant, _0x3ec3d0.skinColor, _0x3ec3d0.scale, _0x3ec3d0.name));
}
function setInitData(_0x2e3f86) {
  alliances = _0x2e3f86.teams;
}
function setupGame(_0x3a5a8a) {
  keys = {};
  macro = {};
  playerSID = _0x3a5a8a;
  attackState = 0x0;
  inGame = true;
  packet("d", 0x0, getAttackDir(), 0x1);
  my.ageInsta = true;
  if (firstSetup) {
    firstSetup = false;
    gameObjects.length = 0x0;
    liztobj.length = 0x0;
  }
}
function addPlayer(_0x18224e, _0x9b63e5) {
  let _0x390485 = findID(players, _0x18224e[0x0]);
  if (!_0x390485) {
    _0x390485 = new Player(_0x18224e[0x0], _0x18224e[0x1], config, UTILS, projectileManager, objectManager, players, ais, items, hats, accessories);
    players.push(_0x390485);
    if (_0x18224e[0x1] != playerSID) {
      addMenuChText(null, "Found " + _0x18224e[0x2] + " {" + _0x18224e[0x1] + "}", "lime");
    }
  } else if (_0x18224e[0x1] != playerSID) {
    addMenuChText(null, "Found " + _0x18224e[0x2] + " {" + _0x18224e[0x1] + "}", "lime");
  }
  _0x390485.spawn(_0x9b63e5 ? true : null);
  _0x390485.visible = false;
  _0x390485.oldPos = {
    x2: undefined,
    y2: undefined
  };
  _0x390485.x2 = undefined;
  _0x390485.y2 = undefined;
  _0x390485.x3 = undefined;
  _0x390485.y3 = undefined;
  _0x390485.setData(_0x18224e);
  if (_0x9b63e5) {
    if (!player) {
      window.prepareUI(_0x390485);
    }
    player = _0x390485;
    camX = player.x;
    camY = player.y;
    my.lastDir = 0x0;
    updateItems();
    updateAge();
    updateItemCountDisplay();
    if (player.skins[0x7]) {
      my.reSync = true;
    }
  }
}
function removePlayer(_0x458cb4) {
  for (let _0x4f5ddc = 0x0; _0x4f5ddc < players.length; _0x4f5ddc++) {
    if (players[_0x4f5ddc].id == _0x458cb4) {
      addMenuChText("Game", players[_0x4f5ddc].name + "[" + players[_0x4f5ddc].sid + "] left the game", "red");
      players.splice(_0x4f5ddc, 0x1);
      break;
    }
  }
}
function updateHealth(_0x1f2b95, _0x59a3c9) {
  tmpObj = findSID(players, _0x1f2b95);
  if (tmpObj) {
    tmpObj.oldHealth = tmpObj.health;
    tmpObj.health = _0x59a3c9;
    tmpObj.judgeShame();
    if (tmpObj.oldHealth > tmpObj.health) {
      tmpObj.timeDamaged = Date.now();
      tmpObj.damaged = tmpObj.oldHealth - tmpObj.health;
      let _0x5349b3 = tmpObj.damaged;
      tmpObj = findSID(players, _0x1f2b95);
      if (tmpObj.health <= 0x0) {
        if (!tmpObj.death) {
          tmpObj.death = true;
          if (tmpObj != player) {
            if (tmpObj.skinIndex == 0x2d) {
              addMenuChText("Game", tmpObj.name + "[" + tmpObj.sid + "] has died due to clown", "red");
            } else if (tmpObj.shameCount >= 0x5) {
              addMenuChText("Game", tmpObj.name + "[" + tmpObj.sid + "] has died due to high shame", "red");
            } else {
              addMenuChText("Game", tmpObj.name + "[" + tmpObj.sid + "] has died", "red");
            }
          }
          addDeadPlayer(tmpObj);
        }
      }
      if (tmpObj == player) {
        if (tmpObj.skinIndex == 0x7 && (_0x5349b3 == 0x5 || tmpObj.latestTail == 0xd && _0x5349b3 == 0x2)) {}
        let _0x4ac291 = false;
        let _0x2eff51 = true;
        if (inGame) {
          let _0x368cd5 = [0.25, 0.45].map(_0x4fca6d => _0x4fca6d * items.weapons[player.weapons[0x0]].dmg);
          let _0x164686 = near.length ? true && _0x368cd5.includes(_0x5349b3) && near[0x0].skinIndex == 0xb && near[0x0].tailIndex == 0x15 : false;
          if (_0x5349b3 >= 0x0 && _0x5349b3 <= 0x42 && player.shameCount === 0x4 && player.shameCount === 0x4 && tmpObj.primaryIndex !== "4") {
            _0x4ac291 = true;
            antiinsta = false;
            antiinsta1 = false;
            _0x2eff51 = false;
          } else if (player.shameCount !== 0x4) {
            _0x4ac291 = false;
            antiinsta = true;
            _0x2eff51 = true;
          }
          if (_0x5349b3 <= 0x42 && player.shameCount === 0x3 && tmpObj.primaryIndex !== "4") {
            antiinsta = false;
          } else if (player.shameCount !== 0x3) {
            antiinsta = true;
          }
          if (_0x5349b3 <= 0x42 && player.shameCount === 0x4 && tmpObj.primaryIndex !== "4") {
            antiinsta1 = true;
          } else if (player.shameCount !== 0x4) {
            antiinsta1 = false;
          }
          "if (damaged >= 0 && damaged <= 90 && player.shameCount === 2){ // попытка сделать невозможным довести до 3 шеймов через буллспам\n                                                    antiinsta4 = false;\n                                                    }else{\n                                                    if(player.shameCount !== 3){\n                                                    antiinsta4 = true;\n                                                    }\n                                                    }\n                                                    if (damaged >= 0 && damaged <= 90 && !antiinsta){\n                                                    if(player.shameCount === 3){\n                                                    antiinsta1 = true;\n                                                    }else{\n                                                    antiinsta1 = false;\n                                                    }\n                                                    }";
          if (_0x5349b3 <= 0x42 && player.skinIndex != 0x6 && enemy.weaponIndex === 0x4) {
            game.tickBase(() => {
              healer1();
            }, 0x2);
          }
          if (_0x5349b3 >= (_0x164686 ? 0x8 : 0x14) && tmpObj.damageThreat >= 0x14 && _0x2eff51 && 0x0 - tmpObj.antiTimer > 0x1) {
            if (tmpObj.reloads[0x35] == 0x0 && tmpObj.reloads[tmpObj.weapons[0x1]] == 0x0) {
              tmpObj.canEmpAnti = true;
            } else {
              player.soldierAnti = true;
            }
            tmpObj.antiTimer = 0x0;
            let _0x18b267 = tmpObj.weapons[0x0] == 0x4 ? 0x2 : 0x5;
            if (tmpObj.shameCount < _0x18b267) {
              healer();
            } else {
              game.tickBase(() => {
                healer();
              }, 0x2);
            }
            if (_0x5349b3 >= (_0x164686 ? 0x8 : 0x14) && tmpObj.damageThreat >= 0x14 && _0x4ac291) {
              setTimeout(() => {
                healer();
              }, 0x78);
            }
            if (_0x5349b3 >= (_0x164686 ? 0x8 : 0x14) && tmpObj.damageThreat >= 0x14 && antiinsta && tmpObj.primaryIndex !== "4" && 0x0 - tmpObj.antiTimer > 0x1) {
              if (tmpObj.reloads[0x35] == 0x0 && tmpObj.reloads[tmpObj.weapons[0x1]] == 0x0) {
                tmpObj.canEmpAnti = true;
              } else {
                player.soldierAnti = true;
              }
              tmpObj.antiTimer = 0x0;
              let _0x3ccd06 = tmpObj.weapons[0x0] == 0x4 ? 0x2 : 0x5;
              if (tmpObj.shameCount < _0x3ccd06) {
                healer();
              } else {
                game.tickBase(() => {
                  healer();
                }, 0x2);
              }
            }
            if (_0x5349b3 >= 0x14 && player.skinIndex == 0xb && player.shameCount <= 0x3) {
              instaC.canCounter = true;
            }
          } else {
            game.tickBase(() => {
              healer();
            }, 0x2);
          }
        }
      } else if (!tmpObj.setPoisonTick && (tmpObj.damaged == 0x5 || tmpObj.latestTail == 0xd && tmpObj.damaged == 0x2)) {
        tmpObj.setPoisonTick = true;
      }
    }
  }
}
function killPlayer() {
  inGame = false;
  lastDeath = {
    x: player.x,
    y: player.y
  };
}
function updateItemCounts(_0x1e4100, _0x21276c) {
  if (player) {
    player.itemCounts[_0x1e4100] = _0x21276c;
    updateItemCountDisplay(_0x1e4100);
  }
}
function updateAge(_0x536b89, _0xa42039, _0x242a8f) {
  if (_0x536b89 != undefined) {
    player.XP = _0x536b89;
  }
  if (_0xa42039 != undefined) {
    player.maxXP = _0xa42039;
  }
  if (_0x242a8f != undefined) {
    player.age = _0x242a8f;
  }
}
function updateUpgrades(_0x20628d, _0x2e9b23) {
  player.upgradePoints = _0x20628d;
  player.upgrAge = _0x2e9b23;
  if (_0x20628d > 0x0) {
    tmpList.length = 0x0;
    UTILS.removeAllChildren(upgradeHolder);
    for (let _0x5cf06e = 0x0; _0x5cf06e < items.weapons.length; ++_0x5cf06e) {
      if (items.weapons[_0x5cf06e].age == _0x2e9b23 && (items.weapons[_0x5cf06e].pre == undefined || player.weapons.indexOf(items.weapons[_0x5cf06e].pre) >= 0x0)) {
        let _0x38614a = UTILS.generateElement({
          id: "upgradeItem" + _0x5cf06e,
          class: "actionBarItem",
          onmouseout: function () {
            showItemInfo();
          },
          parent: upgradeHolder
        });
        _0x38614a.style.backgroundImage = document.getElementById("actionBarItem" + _0x5cf06e).style.backgroundImage;
        tmpList.push(_0x5cf06e);
      }
    }
    for (let _0xc3bf6a = 0x0; _0xc3bf6a < items.list.length; ++_0xc3bf6a) {
      if (items.list[_0xc3bf6a].age == _0x2e9b23 && (items.list[_0xc3bf6a].pre == undefined || player.items.indexOf(items.list[_0xc3bf6a].pre) >= 0x0)) {
        let _0x34c9d5 = items.weapons.length + _0xc3bf6a;
        let _0x1a22d3 = UTILS.generateElement({
          id: "upgradeItem" + _0x34c9d5,
          class: "actionBarItem",
          onmouseout: function () {
            showItemInfo();
          },
          parent: upgradeHolder
        });
        _0x1a22d3.style.backgroundImage = document.getElementById("actionBarItem" + _0x34c9d5).style.backgroundImage;
        tmpList.push(_0x34c9d5);
      }
    }
    for (let _0x574289 = 0x0; _0x574289 < tmpList.length; _0x574289++) {
      (function (_0x445e0b) {
        let _0x2998bc = document.getElementById("upgradeItem" + _0x445e0b);
        _0x2998bc.onclick = UTILS.checkTrusted(function () {
          packet("H", _0x445e0b);
        });
        UTILS.hookTouchEvents(_0x2998bc);
      })(tmpList[_0x574289]);
    }
    if (tmpList.length) {
      upgradeHolder.style.display = "block";
      upgradeCounter.style.display = "block";
      upgradeCounter.innerHTML = "SELECT ITEMS (" + _0x20628d + ")";
    } else {
      upgradeHolder.style.display = "none";
      upgradeCounter.style.display = "none";
      showItemInfo();
    }
  } else {
    upgradeHolder.style.display = "none";
    upgradeCounter.style.display = "none";
    showItemInfo();
  }
}
function killObject(_0x1af446) {
  let _0x5f040f = findSID(gameObjects, _0x1af446);
  objectManager.disableBySid(_0x1af446);
  if (player) {
    for (let _0x5a5899 = 0x0; _0x5a5899 < breakObjects.length; _0x5a5899++) {
      if (breakObjects[_0x5a5899].sid == _0x1af446) {
        breakObjects.splice(_0x5a5899, 0x1);
        break;
      }
    }
    if (!player.canSee(_0x5f040f)) {
      breakTrackers.push({
        x: _0x5f040f.x,
        y: _0x5f040f.y
      });
    }
    if (breakTrackers.length > 0x8) {
      breakTrackers.shift();
    }
    traps.replacer(_0x5f040f);
  }
}
function killObjects(_0x5bc408) {
  if (player) {
    objectManager.removeAllItems(_0x5bc408);
  }
}
function setTickout(_0x191159, _0x2e7e2b) {
  if (!ticks.manage[0x0 + _0x2e7e2b]) {
    ticks.manage[0x0 + _0x2e7e2b] = [_0x191159];
  } else {
    ticks.manage[0x0 + _0x2e7e2b].push(_0x191159);
  }
}
function caf(_0xd7cfec, _0x206499) {
  try {
    return Math.atan2((_0x206499.y2 || _0x206499.y) - (_0xd7cfec.y2 || _0xd7cfec.y), (_0x206499.x2 || _0x206499.x) - (_0xd7cfec.x2 || _0xd7cfec.x));
  } catch (_0x371735) {
    return 0x0;
  }
}
let autoQ = false;
let autos = {
  insta: {
    todo: false,
    wait: false,
    count: 0x4,
    shame: 0x5
  },
  bull: false,
  antibull: 0x0,
  reloaded: false,
  stopspin: true
};
function updatePlayers(_0x287516) {
  if (player.shameCount > 0x1) {
    buyEquip(0x7, 0x0);
    buyEquip(0xd, 0x1);
  } else if (player.lastshamecount != 0x1 || player.lastshamecount != 0x2 || player.lastshamecount != 0x3 || player.lastshamecount != 0x4 || player.lastshamecount != 0x5 || player.lastshamecount != 0x6 || player.lastshamecount == 0x0) {
    buyEquip(0x6, 0x0);
  }
  0x0++;
  enemy = [];
  nears = [];
  near = [];
  game.tickSpeed = performance.now() - game.lastTick;
  game.lastTick = performance.now();
  players.forEach(_0x45f3ee => {
    _0x45f3ee.forcePos = !_0x45f3ee.visible;
    _0x45f3ee.visible = false;
    if (_0x45f3ee.timeHealed - _0x45f3ee.timeDamaged > 0x0 && _0x45f3ee.lastshamecount < _0x45f3ee.shameCount) {
      _0x45f3ee.pinge = _0x45f3ee.timeHealed - _0x45f3ee.timeDamaged;
    }
  });
  for (let _0x318df2 = 0x0; _0x318df2 < _0x287516.length;) {
    tmpObj = findSID(players, _0x287516[_0x318df2]);
    if (tmpObj) {
      tmpObj.t1 = tmpObj.t2 === undefined ? game.lastTick : tmpObj.t2;
      tmpObj.t2 = game.lastTick;
      tmpObj.oldPos.x2 = tmpObj.x2;
      tmpObj.oldPos.y2 = tmpObj.y2;
      tmpObj.x1 = tmpObj.x;
      tmpObj.y1 = tmpObj.y;
      tmpObj.x2 = _0x287516[_0x318df2 + 0x1];
      tmpObj.y2 = _0x287516[_0x318df2 + 0x2];
      tmpObj.x3 = tmpObj.x2 + (tmpObj.x2 - tmpObj.oldPos.x2);
      tmpObj.y3 = tmpObj.y2 + (tmpObj.y2 - tmpObj.oldPos.y2);
      tmpObj.d1 = tmpObj.d2 === undefined ? _0x287516[_0x318df2 + 0x3] : tmpObj.d2;
      tmpObj.d2 = _0x287516[_0x318df2 + 0x3];
      tmpObj.dt = 0x0;
      tmpObj.buildIndex = _0x287516[_0x318df2 + 0x4];
      tmpObj.weaponIndex = _0x287516[_0x318df2 + 0x5];
      tmpObj.weaponVariant = _0x287516[_0x318df2 + 0x6];
      tmpObj.team = _0x287516[_0x318df2 + 0x7];
      tmpObj.isLeader = _0x287516[_0x318df2 + 0x8];
      tmpObj.oldSkinIndex = tmpObj.skinIndex;
      tmpObj.oldTailIndex = tmpObj.tailIndex;
      tmpObj.skinIndex = _0x287516[_0x318df2 + 0x9];
      tmpObj.tailIndex = _0x287516[_0x318df2 + 0xa];
      tmpObj.iconIndex = _0x287516[_0x318df2 + 0xb];
      tmpObj.zIndex = _0x287516[_0x318df2 + 0xc];
      tmpObj.visible = true;
      tmpObj.update(0x0);
      tmpObj.dist2 = UTILS.getDist(tmpObj, player, 0x2, 0x2);
      tmpObj.aim2 = UTILS.getDirect(tmpObj, player, 0x2, 0x2);
      tmpObj.dist3 = UTILS.getDist(tmpObj, player, 0x3, 0x3);
      tmpObj.aim3 = UTILS.getDirect(tmpObj, player, 0x3, 0x3);
      tmpObj.damageThreat = 0x0;
      if (tmpObj.skinIndex == 0x2d && tmpObj.shameTimer <= 0x0) {
        tmpObj.addShameTimer();
      }
      if (tmpObj.oldSkinIndex == 0x2d && tmpObj.skinIndex != 0x2d) {
        tmpObj.shameTimer = 0x0;
        tmpObj.shameCount = 0x0;
        if (tmpObj == player) {
          healer();
        }
      }
      botSkts.forEach(_0x35a3f7 => {
        _0x35a3f7.showName = "YEAHHH";
      });
      for (let _0x4ff3ac = 0x0; _0x4ff3ac < players.length; _0x4ff3ac++) {
        for (let _0x68a000 = 0x0; _0x68a000 < botSkts.length; _0x68a000++) {
          if (player.id === _0x68a000.id) {
            _0x68a000.showName = "YEAHHHHHH";
          }
        }
      }
      if (player.shameCount < 0x4 && near.dist3 <= 0x12c && near.reloads[near.primaryIndex] <= game.tickRate * (window.pingTime >= 0xc8 ? 0x2 : 0x1)) {
        autoQ = true;
        healer();
      } else {
        if (autoQ) {
          healer();
        }
        autoQ = false;
      }
      if (tmpObj == player) {
        if (liztobj.length) {
          liztobj.forEach(_0x1ffafe => {
            _0x1ffafe.onNear = false;
            if (_0x1ffafe.active) {
              if (!_0x1ffafe.onNear && UTILS.getDist(_0x1ffafe, tmpObj, 0x0, 0x2) <= _0x1ffafe.scale + items.weapons[tmpObj.weapons[0x0]].range) {
                _0x1ffafe.onNear = true;
              }
              if (_0x1ffafe.isItem && _0x1ffafe.owner && !_0x1ffafe.pps && tmpObj.sid == _0x1ffafe.owner.sid && UTILS.getDist(_0x1ffafe, tmpObj, 0x0, 0x2) > (parseInt(document.getElementById("breakRange").value) || 0x0) && !_0x1ffafe.breakObj && ![0xd, 0xe, 0x14].includes(_0x1ffafe.id)) {
                _0x1ffafe.breakObj = true;
                breakObjects.push({
                  x: _0x1ffafe.x,
                  y: _0x1ffafe.y,
                  sid: _0x1ffafe.sid
                });
              }
            }
          });
          let _0x4aeed6 = liztobj.filter(_0x3dccca => _0x3dccca.trap && _0x3dccca.active && UTILS.getDist(_0x3dccca, tmpObj, 0x0, 0x2) <= tmpObj.scale + _0x3dccca.getScale() + 0x19 && !_0x3dccca.isTeamObject(tmpObj)).sort(function (_0x5baf2b, _0x58ba44) {
            return UTILS.getDist(_0x5baf2b, tmpObj, 0x0, 0x2) - UTILS.getDist(_0x58ba44, tmpObj, 0x0, 0x2);
          })[0x0];
          if (_0x4aeed6) {
            let _0x3de326 = gameObjects.filter(_0x1c412e => _0x1c412e.dmg && cdf(tmpObj, _0x1c412e) <= tmpObj.scale + _0x4aeed6.scale / 0x2 && !_0x1c412e.isTeamObject(tmpObj) && _0x1c412e.active)[0x0];
            traps.dist = UTILS.getDist(_0x4aeed6, tmpObj, 0x0, 0x2);
            traps.aim = UTILS.getDirect(_0x3de326 ? _0x3de326 : _0x4aeed6, tmpObj, 0x0, 0x2);
            traps.protect(caf(_0x4aeed6, tmpObj) - Math.PI);
            traps.inTrap = true;
            traps.info = _0x4aeed6;
          } else {
            traps.inTrap = false;
            traps.info = {};
          }
        } else {
          traps.inTrap = false;
        }
      }
      if (tmpObj.weaponIndex < 0x9) {
        tmpObj.primaryIndex = tmpObj.weaponIndex;
        tmpObj.primaryVariant = tmpObj.weaponVariant;
      } else if (tmpObj.weaponIndex > 0x8) {
        tmpObj.secondaryIndex = tmpObj.weaponIndex;
        tmpObj.secondaryVariant = tmpObj.weaponVariant;
      }
    }
    _0x318df2 += 0xd;
  }
  if (textManager.stack.length) {
    let _0x2486aa = 0x0;
    let _0x3b76ff = 0x0;
    let _0x876009 = {
      x: null,
      y: null
    };
    let _0x403d22 = {
      x: null,
      y: null
    };
    textManager.stack.forEach(_0x9e49b0 => {
      if (_0x9e49b0.value >= 0x0) {
        if (_0x2486aa == 0x0) {
          _0x876009 = {
            x: _0x9e49b0.x,
            y: _0x9e49b0.y
          };
        }
        _0x2486aa += Math.abs(_0x9e49b0.value);
      } else {
        if (_0x3b76ff == 0x0) {
          _0x403d22 = {
            x: _0x9e49b0.x,
            y: _0x9e49b0.y
          };
        }
        _0x3b76ff += Math.abs(_0x9e49b0.value);
      }
    });
    if (_0x3b76ff > 0x0) {
      textManager.showText(_0x403d22.x, _0x403d22.y, Math.max(0x2d, Math.min(0x32, _0x3b76ff)), 0.18, 0x1f4, _0x3b76ff, "#8ecc51");
    }
    if (_0x2486aa > 0x0) {
      textManager.showText(_0x876009.x, _0x876009.y, Math.max(0x2d, Math.min(0x32, _0x2486aa)), 0.18, 0x1f4, _0x2486aa, "#fff");
    }
    textManager.stack = [];
  }
  if (runAtNextTick.length) {
    runAtNextTick.forEach(_0x2d2782 => {
      checkProjectileHolder(..._0x2d2782);
    });
    runAtNextTick = [];
  }
  for (let _0x5b8d90 = 0x0; _0x5b8d90 < _0x287516.length;) {
    tmpObj = findSID(players, _0x287516[_0x5b8d90]);
    if (tmpObj) {
      if (!tmpObj.isTeam(player)) {
        enemy.push(tmpObj);
        if (tmpObj.dist2 <= items.weapons[tmpObj.primaryIndex == undefined ? 0x5 : tmpObj.primaryIndex].range + player.scale * 0x2) {
          nears.push(tmpObj);
        }
      }
      tmpObj.manageReload();
      if (tmpObj != player) {
        tmpObj.addDamageThreat(player);
      }
    }
    _0x5b8d90 += 0xd;
  }
  if (player && player.alive) {
    if (enemy.length) {
      near = enemy.sort(function (_0x28685e, _0x13af3b) {
        return _0x28685e.dist2 - _0x13af3b.dist2;
      })[0x0];
    } else {}
    if (game.tickQueue[0x0]) {
      game.tickQueue[0x0].forEach(_0x31ad4e => {
        _0x31ad4e();
      });
      game.tickQueue[0x0] = null;
    }
    players.forEach(_0x5778b5 => {
      if (!_0x5778b5.visible && player != _0x5778b5) {
        _0x5778b5.reloads = {
          0x0: 0x0,
          0x1: 0x0,
          0x2: 0x0,
          0x3: 0x0,
          0x4: 0x0,
          0x5: 0x0,
          0x6: 0x0,
          0x7: 0x0,
          0x8: 0x0,
          0x9: 0x0,
          0xa: 0x0,
          0xb: 0x0,
          0xc: 0x0,
          0xd: 0x0,
          0xe: 0x0,
          0xf: 0x0,
          0x35: 0x0
        };
      }
      if (_0x5778b5.setBullTick) {
        _0x5778b5.bullTimer = 0x0;
      }
      if (_0x5778b5.setPoisonTick) {
        _0x5778b5.poisonTimer = 0x0;
      }
      _0x5778b5.updateTimer();
    });
    if (inGame) {
      if (enemy.length) {
        if (player.canEmpAnti) {
          player.canEmpAnti = false;
          if (near.dist2 <= 0x12c && ![0x0, 0x8].includes(near.primaryIndex) && ![0xa, 0xb, 0xe].includes(near.secondaryIndex)) {
            if (near.reloads[0x35] == 0x0) {
              player.empAnti = true;
              player.soldierAnti = false;
            } else {
              player.empAnti = false;
              player.soldierAnti = true;
            }
          }
        }
        let _0x5e2284 = liztobj.filter(_0x13379a => _0x13379a.dmg && _0x13379a.active && _0x13379a.isTeamObject(player) && UTILS.getDist(_0x13379a, near, 0x0, 0x3) <= _0x13379a.scale + near.scale).sort(function (_0x23cf4b, _0xd318a6) {
          return UTILS.getDist(_0x23cf4b, near, 0x0, 0x2) - UTILS.getDist(_0xd318a6, near, 0x0, 0x2);
        })[0x0];
        if (_0x5e2284 && near.dist3 <= items.weapons[player.weapons[0x0]].range + player.scale * 1.8 && true) {
          instaC.canSpikeTick = true;
          instaC.syncHit = true;
          if (true && player.weapons[0x1] == 0xf && player.reloads[0x35] == 0x0 && instaC.perfCheck(player, near)) {
            instaC.revTick = true;
          }
        }
        let _0x564478 = liztobj.filter(_0x543263 => _0x543263.dmg && _0x543263.active && !_0x543263.isTeamObject(player) && UTILS.getDist(_0x543263, player, 0x0, 0x3) < _0x543263.scale + player.scale).sort(function (_0x366a86, _0x20b089) {
          return UTILS.getDist(_0x366a86, player, 0x0, 0x2) - UTILS.getDist(_0x20b089, player, 0x0, 0x2);
        })[0x0];
        if (_0x564478 && !traps.inTrap && near.dist3 <= items.weapons[0x5].range + near.scale * 1.8) {
          my.anti0Tick = 0x1;
        }
      }
      if ((useWasd ? true : (player.checkCanInsta(true) >= 0x64 ? player.checkCanInsta(true) : player.checkCanInsta(false)) >= (player.weapons[0x1] == 0xa ? 0x5f : 0x64)) && near.dist2 <= items.weapons[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]].range + near.scale * 1.8 && (instaC.wait || useWasd && Math.floor(Math.random() * 0x5) == 0x0) && !instaC.isTrue && true && player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] == 0x0 && (useWasd ? true : document.getElementById("instaType").value == "oneShot" ? player.reloads[0x35] <= (player.weapons[0x1] == 0xa ? 0x0 : game.tickRate) : true) && instaC.perfCheck(player, near)) {
        if (player.checkCanInsta(true) >= 0x64) {
          instaC.nobull = useWasd ? false : !instaC.canSpikeTick;
        } else {
          instaC.nobull = false;
        }
        instaC.can = true;
      } else {
        instaC.can = false;
      }
      if (macro.q) {
        place(0x0, getAttackDir());
      }
      if (macro.f) {
        place(0x4, getSafeDir());
      }
      if (macro.v) {
        place(0x2, getSafeDir());
      }
      if (macro.y) {
        place(0x5, getSafeDir());
      }
      if (macro.h) {
        place(player.getItemType(0x16), getSafeDir());
      }
      if (macro.n) {
        place(0x3, getSafeDir());
      }
      if (instaC.can) {
        instaC.changeType(player.weapons[0x1] == 0xa ? "rev" : "normal");
      }
      if (instaC.canCounter) {
        instaC.canCounter = false;
        if (player.reloads[player.weapons[0x0]] == 0x0 && !instaC.isTrue) {
          instaC.counterType();
        }
      }
      if (instaC.canSpikeTick) {
        instaC.canSpikeTick = false;
        if (instaC.revTick) {
          instaC.revTick = false;
          if ([0x1, 0x2, 0x3, 0x4, 0x5, 0x6].includes(player.weapons[0x0]) && player.reloads[player.weapons[0x1]] == 0x0 && !instaC.isTrue) {
            instaC.changeType("rev");
            chch(null, "[RevSyncHit]", "yellow");
          }
        } else if ([0x1, 0x2, 0x3, 0x4, 0x5, 0x6].includes(player.weapons[0x0]) && player.reloads[player.weapons[0x0]] == 0x0 && !instaC.isTrue) {
          instaC.spikeTickType();
          if (instaC.syncHit) {
            chch(null, "[SyncHit]", "yellow");
          }
        }
      }
      if (true && (false || false) && !instaC.isTrue) {
        if (player.weaponIndex != (false && player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]) || player.buildIndex > -0x1) {
          selectWeapon(false && player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]);
        }
        if (player.reloads[false && player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0 && true) {
          sendAutoGather();
          my.waitHit = 0x1;
          game.tickBase(() => {
            sendAutoGather();
            my.waitHit = 0x0;
          }, 0x1);
        }
      }
      if (useWasd && true && true && !instaC.isTrue && near.dist2 <= items.weapons[player.weapons[0x0]].range + near.scale * 1.8 && !traps.inTrap) {
        if (player.weaponIndex != player.weapons[0x0] || player.buildIndex > -0x1) {
          selectWeapon(player.weapons[0x0]);
        }
        if (player.reloads[player.weapons[0x0]] == 0x0 && true) {
          sendAutoGather();
          my.waitHit = 0x1;
          game.tickBase(() => {
            sendAutoGather();
            my.waitHit = 0x0;
          }, 0x1);
        }
      }
      if (traps.inTrap && true && true && !instaC.isTrue) {
        if (player.weaponIndex != (traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]) || player.buildIndex > -0x1) {
          selectWeapon(traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]);
        }
        if (player.reloads[traps.notFast() ? player.weapons[0x1] : player.weapons[0x0]] == 0x0 && true) {
          sendAutoGather();
          my.waitHit = 0x1;
          game.tickBase(() => {
            sendAutoGather();
            my.waitHit = 0x0;
          }, 0x1);
        }
      }
      if (false && !traps.inTrap && !instaC.isTrue && player.reloads[player.weapons[0x1]] == 0x0) {
        if (true && player.weapons[0x0] != 0x4 && player.weapons[0x1] == 0x9 && player.age >= 0x9 && enemy.length) {
          instaC.bowMovement();
        } else {
          instaC.rangeType();
        }
      }
      if (macro.t && !traps.inTrap && !instaC.isTrue && player.reloads[player.weapons[0x0]] == 0x0 && (player.weapons[0x1] == 0xf ? player.reloads[player.weapons[0x1]] == 0x0 : true) && (player.weapons[0x0] == 0x5 || player.weapons[0x0] == 0x4 && player.weapons[0x1] == 0xf)) {
        instaC[player.weapons[0x0] == 0x4 && player.weapons[0x1] == 0xf ? "kmTickMovement" : "tickMovement"]();
      }
      if (macro["."] && !traps.inTrap && !instaC.isTrue && player.reloads[player.weapons[0x0]] == 0x0 && ([0x9, 0xc, 0xd, 0xf].includes(player.weapons[0x1]) ? player.reloads[player.weapons[0x1]] == 0x0 : true)) {
        instaC.boostTickMovement();
      }
      if (player.weapons[0x1] && true && true && !traps.inTrap && !instaC.isTrue && !(useWasd && near.dist2 <= items.weapons[player.weapons[0x0]].range + near.scale * 1.8)) {
        if (player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] == 0x0) {
          my.reloaded = true;
          let _0x393528 = items.weapons[player.weapons[0x0]].spdMult < items.weapons[player.weapons[0x1]].spdMult ? 0x1 : 0x0;
          if (player.weaponIndex != player.weapons[_0x393528] || player.buildIndex > -0x1) {
            selectWeapon(player.weapons[_0x393528]);
          }
        } else {
          my.reloaded = false;
          if (useWasd) {
            autos.stopspin = false;
          }
          if (player.reloads[player.weapons[0x0]] > 0x0) {
            if (player.weaponIndex != player.weapons[0x0] || player.buildIndex > -0x1) {
              selectWeapon(player.weapons[0x0]);
            }
          } else if (player.reloads[player.weapons[0x0]] == 0x0 && player.reloads[player.weapons[0x1]] > 0x0) {
            if (player.weaponIndex != player.weapons[0x1] || player.buildIndex > -0x1) {
              selectWeapon(player.weapons[0x1]);
            }
            if (useWasd && false) {
              setTimeout(() => {
                autos.stopspin = true;
              }, 0x2ee);
            }
          }
        }
      }
      if (!instaC.isTrue && !traps.inTrap && !traps.replaced) {
        traps.autoPlace();
      }
      if (!macro.q && !macro.f && !macro.v && !macro.h && !macro.n) {
        packet("D", getAttackDir());
      }
      let _0x482d21 = function () {
        if (false || false) {} else {
          if (false || false) {
            if ((player.shameCount > 0x0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) && (near && near.dist2 > 0x78 || !near)) {} else {}
          } else {
            if (traps.inTrap) {
              if (traps.info.health <= items.weapons[player.weaponIndex].dmg ? false : player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
                buyEquip(0x28, 0x0);
                buyEquip(0x15, 0x1);
              } else {
                if ((player.shameCount > 0x0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) && (near && near.dist2 > 0x8c || !near)) {}
              }
            } else {
              if ((player.shameCount > 0x0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) && (near && near.dist2 > 0x8c || !near)) {} else if (near.dist2 <= 0x12c) {
                buyEquip(document.getElementById("antiBullType").value == "abreload" && near.antiBull > 0x0 ? 0xb : document.getElementById("antiBullType").value == "abalway" && near.reloads[near.primaryIndex] == 0x0 ? 0xb : 0x6, 0x0);
              } else {
                biomeGear(0x1);
              }
            }
          }
        }
      };
      let _0x4beebc = function () {
        if (instaC.can && player.checkCanInsta(true) >= 0x64) {
          buyEquip(0x12, 0x1);
        } else {
          if (near.dist2 <= 0xf0) {
            buyEquip(0x15, 0x1);
          } else if (traps.inTrap) {
            buyEquip(0x15, 0x1);
          } else {
            buyEquip(0xb, 0x1);
          }
        }
      };
      let _0x1aba8c = function () {
        if (false || false) {
          if (player.shameCount > 0x10e0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) {
            buyEquip(0x7, 0x0);
          } else {}
        } else {
          if (near.dist2 <= items.weapons[player.weapons[0x0]].range + near.scale * 1.8 && !traps.inTrap) {
            if (player.shameCount > 0x10e0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) {
              buyEquip(0x7, 0x0);
            } else {
              buyEquip(player.reloads[player.weapons[0x0]] == 0x0 ? 0x7 : player.empAnti ? 0x16 : 0x6, 0x0);
            }
          } else if (traps.inTrap) {
            if (traps.info.health <= items.weapons[player.weaponIndex].dmg ? false : player.reloads[player.weapons[0x1] == 0xa ? player.weapons[0x1] : player.weapons[0x0]] == 0x0) {
              buyEquip(0x28, 0x0);
            } else if (player.shameCount > 0x10e0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) {
              buyEquip(0x7, 0x0);
            } else {
              buyEquip(player.empAnti ? 0x16 : 0x6, 0x0);
            }
          } else if (player.empAnti) {
            buyEquip(0x16, 0x0);
          } else if (player.shameCount > 0x10e0 && (0x0 - player.bullTick) % config.serverUpdateRate === 0x0 && player.skinIndex != 0x2d || false) {
            buyEquip(0x7, 0x0);
          } else {
            buyEquip(0x6, 0x0);
          }
        }
        if (false || false) {} else {
          if (near.dist2 <= items.weapons[player.weapons[0x0]].range + near.scale * 1.8 && !traps.inTrap) {
            buyEquip(0x0, 0x1);
          } else if (traps.inTrap) {
            buyEquip(0x0, 0x1);
          } else {
            buyEquip(0xb, 0x1);
          }
        }
      };
      if (storeMenu.style.display != "block" && !instaC.isTrue && !instaC.ticking) {
        if (useWasd) {
          _0x1aba8c();
        } else {
          _0x482d21();
          _0x4beebc();
        }
      }
      if (true && enemy.length && !traps.inTrap && !instaC.ticking) {
        autoPush();
      }
      if (instaC.ticking) {
        instaC.ticking = false;
      }
      if (instaC.syncHit) {
        instaC.syncHit = false;
      }
      if (player.empAnti) {
        player.empAnti = false;
      }
      if (player.soldierAnti) {
        player.soldierAnti = false;
      }
      if (traps.replaced) {
        traps.replaced = false;
      }
      if (traps.antiTrapped) {
        traps.antiTrapped = false;
      }
    }
  }
  if (botSkts.length) {
    botSkts.forEach(_0x21b7bb => {
      _0x21b7bb[0x0].showName = "YEAHHH";
    });
  }
}
for (var i1 = 0x0; i1 < liztobj.length; i1++) {
  if (liztobj[i1].active && liztobj[i1].health > 0x0 && UTILS.getDist(liztobj[i1], player, 0x0, 0x2) < 0x96 && document.getElementById("antipush").checked && liztobj[i1].name.includes("spike") && liztobj[i1] && liztobj[i1].owner.sid != player.sid && true && tmpObj.reloads[tmpObj.secondaryIndex] == 0x0) {
    selectWeapon(player.weapons[0x1]);
    buyEquip(0x28, 0x0);
    packet("D", UTILS.getDirect(liztobj[i1], player, 0x0, 0x2));
    setTickout(() => {
      buyEquip(0x6, 0x0);
    }, 0x1);
  }
}
function ez(_0x419ff2, _0x5225b9, _0x4bcdbc) {
  _0x419ff2.fillStyle = "rgba(0, 255, 255, 0.2)";
  _0x419ff2.beginPath();
  _0x419ff2.arc(_0x5225b9, _0x4bcdbc, 0x37, 0x0, Math.PI * 0x2);
  _0x419ff2.fill();
  _0x419ff2.closePath();
  _0x419ff2.globalAlpha = 0x1;
}
function updateLeaderboard(_0x105c18) {
  lastLeaderboardData = _0x105c18;
  return;
  UTILS.removeAllChildren(leaderboardData);
  let _0x3dcaf5 = 0x1;
  for (let _0xe1a945 = 0x0; _0xe1a945 < _0x105c18.length; _0xe1a945 += 0x3) {
    (function (_0x1d8f7a) {
      UTILS.generateElement({
        class: "leaderHolder",
        parent: leaderboardData,
        children: [UTILS.generateElement({
          class: "leaderboardItem",
          style: "color:" + (_0x105c18[_0x1d8f7a] == playerSID ? "#fff" : "rgba(255,255,255,0.6)"),
          text: _0x3dcaf5 + ". " + (_0x105c18[_0x1d8f7a + 0x1] != "" ? _0x105c18[_0x1d8f7a + 0x1] : "unknown")
        }), UTILS.generateElement({
          class: "leaderScore",
          text: UTILS.sFormat(_0x105c18[_0x1d8f7a + 0x2]) || "0"
        })]
      });
    })(_0xe1a945);
    _0x3dcaf5++;
  }
}
function loadGameObject(_0x3e5f07) {
  for (let _0x575ee1 = 0x0; _0x575ee1 < _0x3e5f07.length;) {
    objectManager.add(_0x3e5f07[_0x575ee1], _0x3e5f07[_0x575ee1 + 0x1], _0x3e5f07[_0x575ee1 + 0x2], _0x3e5f07[_0x575ee1 + 0x3], _0x3e5f07[_0x575ee1 + 0x4], _0x3e5f07[_0x575ee1 + 0x5], items.list[_0x3e5f07[_0x575ee1 + 0x6]], true, _0x3e5f07[_0x575ee1 + 0x7] >= 0x0 ? {
      sid: _0x3e5f07[_0x575ee1 + 0x7]
    } : null);
    _0x575ee1 += 0x8;
  }
}
function loadAI(_0x13203b) {
  for (let _0x5eaafb = 0x0; _0x5eaafb < ais.length; ++_0x5eaafb) {
    ais[_0x5eaafb].forcePos = !ais[_0x5eaafb].visible;
    ais[_0x5eaafb].visible = false;
  }
  if (_0x13203b) {
    let _0x5707b7 = performance.now();
    for (let _0x488bd1 = 0x0; _0x488bd1 < _0x13203b.length;) {
      tmpObj = findSID(ais, _0x13203b[_0x488bd1]);
      if (tmpObj) {
        tmpObj.index = _0x13203b[_0x488bd1 + 0x1];
        tmpObj.t1 = tmpObj.t2 === undefined ? _0x5707b7 : tmpObj.t2;
        tmpObj.t2 = _0x5707b7;
        tmpObj.x1 = tmpObj.x;
        tmpObj.y1 = tmpObj.y;
        tmpObj.x2 = _0x13203b[_0x488bd1 + 0x2];
        tmpObj.y2 = _0x13203b[_0x488bd1 + 0x3];
        tmpObj.d1 = tmpObj.d2 === undefined ? _0x13203b[_0x488bd1 + 0x4] : tmpObj.d2;
        tmpObj.d2 = _0x13203b[_0x488bd1 + 0x4];
        tmpObj.health = _0x13203b[_0x488bd1 + 0x5];
        tmpObj.dt = 0x0;
        tmpObj.visible = true;
      } else {
        tmpObj = aiManager.spawn(_0x13203b[_0x488bd1 + 0x2], _0x13203b[_0x488bd1 + 0x3], _0x13203b[_0x488bd1 + 0x4], _0x13203b[_0x488bd1 + 0x1]);
        tmpObj.x2 = tmpObj.x;
        tmpObj.y2 = tmpObj.y;
        tmpObj.d2 = tmpObj.dir;
        tmpObj.health = _0x13203b[_0x488bd1 + 0x5];
        if (!aiManager.aiTypes[_0x13203b[_0x488bd1 + 0x1]].name) {
          tmpObj.name = config.cowNames[_0x13203b[_0x488bd1 + 0x6]];
        }
        tmpObj.forcePos = true;
        tmpObj.sid = _0x13203b[_0x488bd1];
        tmpObj.visible = true;
      }
      _0x488bd1 += 0x7;
    }
  }
}
function animateAI(_0x3e07e9) {
  tmpObj = findSID(ais, _0x3e07e9);
  if (tmpObj) {
    tmpObj.startAnim();
  }
}
function gatherAnimation(_0xbf882, _0x591b11, _0x3ea60a) {
  tmpObj = findSID(players, _0xbf882);
  if (tmpObj) {
    tmpObj.startAnim(_0x591b11, _0x3ea60a);
    tmpObj.gatherIndex = _0x3ea60a;
    tmpObj.gathering = 0x1;
    if (_0x591b11) {
      let _0x239b1f = objectManager.hitObj;
      objectManager.hitObj = [];
      game.tickBase(() => {
        tmpObj = findSID(players, _0xbf882);
        let _0x447f83 = items.weapons[_0x3ea60a].dmg * config.weaponVariants[tmpObj[(_0x3ea60a < 0x9 ? "prima" : "seconda") + "ryVariant"]].val * (items.weapons[_0x3ea60a].sDmg || 0x1) * (tmpObj.skinIndex == 0x28 ? 3.3 : 0x1);
        _0x239b1f.forEach(_0x54efbe => {
          _0x54efbe.health -= _0x447f83;
        });
      }, 0x1);
    }
  }
}
if (nears.filter(_0x56a544 => _0x56a544.gathering).length > 0x1) {
  player.chat.message = "pSyD";
  healer();
}
function wiggleGameObject(_0x4ac368, _0x50de24) {
  tmpObj = findSID(gameObjects, _0x50de24);
  if (tmpObj) {
    tmpObj.xWiggle += config.gatherWiggle * Math.cos(_0x4ac368);
    tmpObj.yWiggle += config.gatherWiggle * Math.sin(_0x4ac368);
    if (tmpObj.health) {
      objectManager.hitObj.push(tmpObj);
    }
  }
}
function shootTurret(_0x177ad2, _0x17db55) {
  tmpObj = findSID(gameObjects, _0x177ad2);
  if (tmpObj) {
    if (config.anotherVisual) {
      tmpObj.lastDir = _0x17db55;
    } else {
      tmpObj.dir = _0x17db55;
    }
    tmpObj.xWiggle += config.gatherWiggle * Math.cos(_0x17db55 + Math.PI);
    tmpObj.yWiggle += config.gatherWiggle * Math.sin(_0x17db55 + Math.PI);
  }
}
function updatePlayerValue(_0x2cc141, _0x55166a, _0x309e42) {
  if (player) {
    player[_0x2cc141] = _0x55166a;
    if (_0x2cc141 == "points") {
      autoBuy.hat();
      autoBuy.acc();
    } else if (_0x2cc141 == "kills" && true) {
      sendChat("Dumbasses Down:" + _0x55166a);
      setTimeout(() => {
        sendChat("I'm super pro!");
        setTimeout(() => {
          io.send("6", "chicken mod v2.4");
          setTimeout(() => {}, 0x44c);
        }, 0x44c);
      }, 0x5dc);
    }
  }
}
function updateItems(_0x583194, _0x316afc) {
  if (_0x583194) {
    if (_0x316afc) {
      player.weapons = _0x583194;
      player.primaryIndex = player.weapons[0x0];
      player.secondaryIndex = player.weapons[0x1];
      if (!instaC.isTrue) {
        selectWeapon(player.weapons[0x0]);
      }
    } else {
      player.items = _0x583194;
    }
  }
  for (let _0x4cdfc8 = 0x0; _0x4cdfc8 < items.list.length; _0x4cdfc8++) {
    let _0xdfb83f = items.weapons.length + _0x4cdfc8;
    let _0x4b02ef = document.getElementById("actionBarItem" + _0xdfb83f);
    _0x4b02ef.style.display = player.items.indexOf(items.list[_0x4cdfc8].id) >= 0x0 ? "inline-block" : "none";
    document.getElementsByTagName("button").style.boxShadow = "2px 2px 5px rgba(0, 0, 0, 0.5)";
  }
  for (let _0x55797e = 0x0; _0x55797e < items.weapons.length; _0x55797e++) {
    let _0x1de366 = document.getElementById("actionBarItem" + _0x55797e);
    _0x1de366.style.display = player.weapons[items.weapons[_0x55797e].type] == items.weapons[_0x55797e].id ? "inline-block" : "none";
    document.getElementsByTagName("button").style.boxShadow = "2px 2px 5px rgba(0, 0, 0, 0.5)";
  }
  let _0x4c9aec = player.weapons[0x0] == 0x3 && player.weapons[0x1] == 0xf;
  if (_0x4c9aec) {
    document.getElementById("actionBarItem3").style.display = "none";
    document.getElementById("actionBarItem4").style.display = "inline-block";
  }
}
function addProjectile(_0x39e382, _0xf4784b, _0xef2bb5, _0xd4b232, _0x20a15f, _0x3fee47, _0x309a45, _0xee08a8) {
  projectileManager.addProjectile(_0x39e382, _0xf4784b, _0xef2bb5, _0xd4b232, _0x20a15f, _0x3fee47, null, null, _0x309a45, inWindow).sid = _0xee08a8;
  runAtNextTick.push(Array.prototype.slice.call(arguments));
}
function remProjectile(_0x2c2d59, _0x5c92a5) {
  for (let _0x388573 = 0x0; _0x388573 < projectiles.length; ++_0x388573) {
    if (projectiles[_0x388573].sid == _0x2c2d59) {
      projectiles[_0x388573].range = _0x5c92a5;
      let _0x30d5a3 = objectManager.hitObj;
      objectManager.hitObj = [];
      game.tickBase(() => {
        let _0x540acb = projectiles[_0x388573].dmg;
        _0x30d5a3.forEach(_0x2c3c57 => {
          if (_0x2c3c57.projDmg) {
            _0x2c3c57.health -= _0x540acb;
          }
        });
      }, 0x1);
    }
  }
}
let noob = false;
let serverReady = true;
var isProd = location.hostname !== "127.0.0.1" && !location.hostname.startsWith("192.168.");
let wssws = isProd ? "wss" : "ws";
let project = new WebSocket(wssws + "://beautiful-sapphire-toad.glitch.me");
let withSync = false;
project.binaryType = "arraybuffer";
project.onmessage = function (_0x1306b1) {
  let _0x535877 = _0x1306b1.data;
  if (_0x535877 == "isready") {
    serverReady = true;
  }
  if (_0x535877 == "fine") {
    noob = false;
  }
  if (_0x535877 == "tezt") {
    addMenuChText(player.name + "[" + player.sid + "]", "EEEEEEEEEEE", "white");
  }
  if (_0x535877 == "yeswearesyncer") {
    withSync = true;
    if (player) {
      textManager.showText(player.x, player.y, 0x23, 0.1, 0x1f4, "Sync: " + window.pingTime + "ms", "#fff");
      console.log("synced!!!!!!!! also delay: " + window.pingTime + "ms");
    }
  }
};
function allianceNotification(_0x44efc8, _0x21c5e8) {
  let _0x57bdde = findSID(bots, _0x44efc8);
  if (_0x57bdde) {}
}
function setPlayerTeam(_0x191581, _0x2ea2d0) {
  if (player) {
    player.team = _0x191581;
    player.isOwner = _0x2ea2d0;
    if (_0x191581 == null) {
      alliancePlayers = [];
    }
  }
}
function setAlliancePlayers(_0x10643e) {
  alliancePlayers = _0x10643e;
}
function updateStoreItems(_0x2ec231, _0x20cf9a, _0x1c9c92) {
  if (_0x1c9c92) {
    if (!_0x2ec231) {
      player.tails[_0x20cf9a] = 0x1;
    } else {
      player.latestTail = _0x20cf9a;
    }
  } else {
    if (!_0x2ec231) {
      player.skins[_0x20cf9a] = 0x1;
      if (_0x20cf9a == 0x7) {
        my.reSync = true;
      }
    } else {
      player.latestSkin = _0x20cf9a;
    }
  }
}
function receiveChat(_0x2ae6e5, _0x1a579e) {
  let _0x2f6eef = findSID(players, _0x2ae6e5);
  addMenuChText(_0x2f6eef.name + "[" + _0x2f6eef.sid + "]", _0x1a579e, "white");
  _0x2f6eef.chatMessage = _0x1a579e;
  _0x2f6eef.chatCountdown = config.chatCountdown;
}
function updateMinimap(_0x428c19) {
  minimapData = _0x428c19;
}
function showText(_0x28a9f1, _0x456705, _0x53a091, _0x4fb4b6) {
  textManager.stack.push({
    x: _0x28a9f1,
    y: _0x456705,
    value: _0x53a091
  });
}
let bots = [];
let ranLocation = {
  x: UTILS.randInt(0x23, 0x381d),
  y: UTILS.randInt(0x23, 0x381d)
};
setInterval(() => {
  ranLocation = {
    x: UTILS.randInt(0x23, 0x381d),
    y: UTILS.randInt(0x23, 0x381d)
  };
}, 0xea60);
class Bot {
  constructor(_0xc57aa, _0x38809a, _0x787dea, _0x49e9e8) {
    this.millPlace = true;
    this.id = _0xc57aa;
    this.sid = _0x38809a;
    this.team = null;
    this.skinIndex = 0x0;
    this.tailIndex = 0x0;
    this.hitTime = 0x0;
    this.iconIndex = 0x0;
    this.enemy = [];
    this.near = [];
    this.dist2 = 0x0;
    this.aim2 = 0x0;
    this.tick = 0x0;
    this.itemCounts = {};
    this.latestSkin = 0x0;
    this.latestTail = 0x0;
    this.points = 0x0;
    this.tails = {};
    for (let _0x47664b = 0x0; _0x47664b < _0x49e9e8.length; ++_0x47664b) {
      if (_0x49e9e8[_0x47664b].price <= 0x0) {
        this.tails[_0x49e9e8[_0x47664b].id] = 0x1;
      }
    }
    this.skins = {};
    for (let _0x26044a = 0x0; _0x26044a < _0x787dea.length; ++_0x26044a) {
      if (_0x787dea[_0x26044a].price <= 0x0) {
        this.skins[_0x787dea[_0x26044a].id] = 0x1;
      }
    }
    this.spawn = function (_0x1f620e) {
      this.upgraded = 0x0;
      this.enemy = [];
      this.near = [];
      this.active = true;
      this.alive = true;
      this.lockMove = false;
      this.lockDir = false;
      this.minimapCounter = 0x0;
      this.chatCountdown = 0x0;
      this.shameCount = 0x0;
      this.shameTimer = 0x0;
      this.sentTo = {};
      this.gathering = 0x0;
      this.autoGather = 0x0;
      this.animTime = 0x0;
      this.animSpeed = 0x0;
      this.mouseState = 0x0;
      this.buildIndex = -0x1;
      this.weaponIndex = 0x0;
      this.dmgOverTime = {};
      this.noMovTimer = 0x0;
      this.maxXP = 0x12c;
      this.XP = 0x0;
      this.age = 0x1;
      this.kills = 0x0;
      this.upgrAge = 0x2;
      this.upgradePoints = 0x0;
      this.x = 0x0;
      this.y = 0x0;
      this.zIndex = 0x0;
      this.xVel = 0x0;
      this.yVel = 0x0;
      this.slowMult = 0x1;
      this.dir = 0x0;
      this.nDir = 0x0;
      this.dirPlus = 0x0;
      this.targetDir = 0x0;
      this.targetAngle = 0x0;
      this.maxHealth = 0x64;
      this.health = this.maxHealth;
      this.oldHealth = this.maxHealth;
      this.scale = config.playerScale;
      this.speed = config.playerSpeed;
      this.resetMoveDir();
      this.resetResources(_0x1f620e);
      this.items = [0x0, 0x3, 0x6, 0xa];
      this.weapons = [0x0];
      this.shootCount = 0x0;
      this.weaponXP = [];
      this.isBot = false;
      this.reloads = {
        0x0: 0x0,
        0x1: 0x0,
        0x2: 0x0,
        0x3: 0x0,
        0x4: 0x0,
        0x5: 0x0,
        0x6: 0x0,
        0x7: 0x0,
        0x8: 0x0,
        0x9: 0x0,
        0xa: 0x0,
        0xb: 0x0,
        0xc: 0x0,
        0xd: 0x0,
        0xe: 0x0,
        0xf: 0x0,
        0x35: 0x0
      };
      this.timeZinceZpawn = 0x0;
      this.whyDie = "";
      this.clearRadius = false;
      this.circlee = 0x0;
    };
    this.resetMoveDir = function () {
      this.moveDir = undefined;
    };
    this.resetResources = function (_0x1b02cd) {
      for (let _0xdf4d0b = 0x0; _0xdf4d0b < config.resourceTypes.length; ++_0xdf4d0b) {
        this[config.resourceTypes[_0xdf4d0b]] = _0x1b02cd ? 0x64 : 0x0;
      }
    };
    this.setData = function (_0x5e4bb7) {
      this.id = _0x5e4bb7[0x0];
      this.sid = _0x5e4bb7[0x1];
      this.name = _0x5e4bb7[0x2];
      this.x = _0x5e4bb7[0x3];
      this.y = _0x5e4bb7[0x4];
      this.dir = _0x5e4bb7[0x5];
      this.health = _0x5e4bb7[0x6];
      this.maxHealth = _0x5e4bb7[0x7];
      this.scale = _0x5e4bb7[0x8];
      this.skinColor = _0x5e4bb7[0x9];
    };
    this.judgeShame = function () {
      if (this.oldHealth < this.health) {
        if (this.hitTime) {
          let _0xf81162 = this.tick - this.hitTime;
          this.hitTime = 0x0;
          if (_0xf81162 < 0x2) {
            this.lastshamecount = this.shameCount;
            this.shameCount++;
          } else {
            this.lastshamecount = this.shameCount;
            this.shameCount = Math.max(0x0, this.shameCount - 0x2);
          }
        }
      } else if (this.oldHealth > this.health) {
        this.hitTime = this.tick;
      }
    };
    this.manageReloadaa = function () {
      if (this.shooting[0x35]) {
        this.shooting[0x35] = 0x0;
        this.reloads[0x35] = 2388.8888888888887;
      } else if (this.reloads[0x35] > 0x0) {
        this.reloads[0x35] = Math.max(0x0, this.reloads[0x35] - 111.11111111111111);
      }
      if (this.gathering || this.shooting[0x1]) {
        if (this.gathering) {
          this.gathering = 0x0;
          this.reloads[this.gatherIndex] = items.weapons[this.gatherIndex].speed * (this.skinIndex == 0x14 ? 0.78 : 0x1);
          this.attacked = true;
        }
        if (this.shooting[0x1]) {
          this.shooting[0x1] = 0x0;
          this.reloads[this.shootIndex] = items.weapons[this.shootIndex].speed * (this.skinIndex == 0x14 ? 0.78 : 0x1);
          this.attacked = true;
        }
      } else {
        this.attacked = false;
        if (this.buildIndex < 0x0 && this.reloads[this.weaponIndex] > 0x0) {
          this.reloads[this.weaponIndex] = Math.max(0x0, this.reloads[this.weaponIndex] - game.tickRate);
        }
      }
    };
    this.closeSockets = function (_0x4f9e5c) {
      _0x4f9e5c.close();
    };
    this.whyDieChat = function (_0x41bff3, _0x31dcda) {
      _0x41bff3.sendWS("6", "why die XDDD " + _0x31dcda);
    };
  }
}
class BotObject {
  constructor(_0xb1a51a) {
    this.sid = _0xb1a51a;
    this.init = function (_0x275506, _0x242a53, _0x8e0f76, _0x4a72e1, _0xb28cf3, _0xd61eea, _0x1a4bb1) {
      _0xd61eea = _0xd61eea || {};
      this.active = true;
      this.x = _0x275506;
      this.y = _0x242a53;
      this.scale = _0x4a72e1;
      this.owner = _0x1a4bb1;
      this.id = _0xd61eea.id;
      this.dmg = _0xd61eea.dmg;
      this.trap = _0xd61eea.trap;
      this.teleport = _0xd61eea.teleport;
      this.isItem = this.id != undefined;
    };
  }
}
class BotObjManager {
  constructor(_0x8ae041, _0x2288e1) {
    this.disableObj = function (_0x551d3d) {
      _0x551d3d.active = false;
      if (config.anotherVisual) {} else {
        _0x551d3d.alive = false;
      }
    };
    let _0x3c706c;
    this.add = function (_0x2a58a2, _0x127607, _0x101490, _0x265632, _0x2588b9, _0x297601, _0x3c5db1, _0x596630, _0x3d0357) {
      _0x3c706c = _0x2288e1(_0x2a58a2);
      if (!_0x3c706c) {
        _0x3c706c = _0x8ae041.find(_0x1ed185 => !_0x1ed185.active);
        if (!_0x3c706c) {
          _0x3c706c = new BotObject(_0x2a58a2);
          _0x8ae041.push(_0x3c706c);
        }
      }
      if (_0x596630) {
        _0x3c706c.sid = _0x2a58a2;
      }
      _0x3c706c.init(_0x127607, _0x101490, _0x265632, _0x2588b9, _0x297601, _0x3c5db1, _0x3d0357);
    };
    this.disableBySid = function (_0x37390f) {
      let _0x3412c8 = _0x2288e1(_0x37390f);
      if (_0x3412c8) {
        this.disableObj(_0x3412c8);
      }
    };
    this.removeAllItems = function (_0x1b21af, _0x2cd12c) {
      _0x8ae041.filter(_0x1ded1f => _0x1ded1f.active && _0x1ded1f.owner && _0x1ded1f.owner.sid == _0x1b21af).forEach(_0x538d1d => this.disableObj(_0x538d1d));
    };
  }
}
let botz = [];
function botSpawn(_0x47e266) {
  let _0x1ad316;
  console.log(WS);
  let _0x16e432 = WS.url.split("wss://")[0x1].split("?")[0x0];
  _0x1ad316 = _0x47e266 && new WebSocket("wss://" + _0x16e432 + "?token=re:" + encodeURIComponent(_0x47e266));
  let _0x3db922 = new Map();
  botSkts.push([_0x3db922]);
  botz.push([_0x1ad316]);
  let _0x1abe17;
  let _0x3e036d = [];
  let _0x538b9f = [];
  let _0x24f31d = {
    x: 0x0,
    y: 0x0,
    inGame: false,
    closeSocket: false,
    whyDie: ""
  };
  let _0x1718ca = {
    x: 0x0,
    y: 0x0
  };
  let _0x30d0c8 = 0x0;
  let _0x491bc3 = new BotObjManager(_0x3e036d, function (_0x313b69) {
    return findSID(_0x3e036d, _0x313b69);
  });
  _0x1ad316.binaryType = "arraybuffer";
  _0x1ad316.first = true;
  _0x1ad316.sendWS = function (_0x331ac5) {
    let _0x3967a7 = Array.prototype.slice.call(arguments, 0x1);
    let _0x2dba2e = window.msgpack.encode([_0x331ac5, _0x3967a7]);
    _0x1ad316.send(_0x2dba2e);
  };
  _0x1ad316.spawn = function () {
    _0x1ad316.sendWS("M", {
      name: "unknown1l",
      moofoll: 0x1,
      skin: "__proto__"
    });
  };
  _0x1ad316.sendUpgrade = function (_0x1b91ce) {
    _0x1ad316.sendWS("H", _0x1b91ce);
  };
  _0x1ad316.place = function (_0x4d211a, _0x79f3ae) {
    try {
      let _0x2b49c1 = items.list[_0x3db922.items[_0x4d211a]];
      if (_0x3db922.itemCounts[_0x2b49c1.group.id] == undefined ? true : _0x3db922.itemCounts[_0x2b49c1.group.id] < (config.isSandbox ? 0x128 : _0x2b49c1.group.limit ? _0x2b49c1.group.limit : 0x128)) {
        _0x1ad316.sendWS("G", _0x3db922.items[_0x4d211a]);
        _0x1ad316.sendWS("d", 0x1, _0x79f3ae);
        _0x1ad316.sendWS("G", _0x3db922.weaponIndex, true);
      }
    } catch (_0x21cfb3) {}
  };
  _0x1ad316.buye = function (_0x4135de, _0xf73802) {
    if (_0x3db922.alive && _0x3db922.inGame) {
      if (_0xf73802 == 0x0) {
        if (_0x3db922.skins[_0x4135de]) {
          if (_0x3db922.latestSkin != _0x4135de) {
            _0x1ad316.sendWS("c", 0x0, _0x4135de, 0x0);
          }
        } else {
          let _0x18ac90 = findID(hats, _0x4135de);
          if (_0x18ac90) {
            if (_0x3db922.points >= _0x18ac90.price) {
              _0x1ad316.sendWS("c", 0x1, _0x4135de, 0x0);
              _0x1ad316.sendWS("c", 0x0, _0x4135de, 0x0);
            } else if (_0x3db922.latestSkin != 0x0) {
              _0x1ad316.sendWS("c", 0x0, 0x0, 0x0);
            }
          } else if (_0x3db922.latestSkin != 0x0) {
            _0x1ad316.sendWS("c", 0x0, 0x0, 0x0);
          }
        }
      } else {
        if (_0xf73802 == 0x1) {
          if (_0x3db922.tails[_0x4135de]) {
            if (_0x3db922.latestTail != _0x4135de) {
              _0x1ad316.sendWS("c", 0x0, _0x4135de, 0x1);
            }
          } else {
            let _0x299002 = findID(accessories, _0x4135de);
            if (_0x299002) {
              if (_0x3db922.points >= _0x299002.price) {
                _0x1ad316.sendWS("c", 0x1, _0x4135de, 0x1);
                _0x1ad316.sendWS("c", 0x0, _0x4135de, 0x1);
              } else if (_0x3db922.latestTail != 0x0) {
                _0x1ad316.sendWS("c", 0x0, 0x0, 0x1);
              }
            } else if (_0x3db922.latestTail != 0x0) {
              _0x1ad316.sendWS("c", 0x0, 0x0, 0x1);
            }
          }
        }
      }
    }
  };
  _0x1ad316.fastGear = function () {
    if (_0x3db922.y2 >= config.mapScale / 0x2 - config.riverWidth / 0x2 && _0x3db922.y2 <= config.mapScale / 0x2 + config.riverWidth / 0x2) {
      _0x1ad316.buye(0x1f, 0x0);
    } else if (_0x3db922.moveDir == undefined) {
      _0x1ad316.buye(0x16, 0x0);
    } else if (_0x3db922.y2 <= config.snowBiomeTop) {
      _0x1ad316.buye(0xf, 0x0);
    } else {
      _0x1ad316.buye(0xc, 0x0);
    }
  };
  _0x1ad316.selectWeapon = function (_0xacaf6) {
    packet("G", _0xacaf6, 0x1);
  };
  function _0x158479(_0x4de18c, _0x5caccb) {
    try {
      return Math.atan2((_0x5caccb.y2 || _0x5caccb.y) - (_0x4de18c.y2 || _0x4de18c.y), (_0x5caccb.x2 || _0x5caccb.x) - (_0x4de18c.x2 || _0x4de18c.x));
    } catch (_0x320814) {
      return 0x0;
    }
  }
  _0x1ad316.heal = function () {
    if (_0x3db922.health < 0x64) {
      _0x1ad316.place(0x0, 0x0);
    }
  };
  function _0x12540e(_0x4b3d00, _0x1c59ce) {
    try {
      return Math.hypot((_0x1c59ce.y2 || _0x1c59ce.y) - (_0x4b3d00.y2 || _0x4b3d00.y), (_0x1c59ce.x2 || _0x1c59ce.x) - (_0x4b3d00.x2 || _0x4b3d00.x));
    } catch (_0x261111) {
      return Infinity;
    }
  }
  let _0x3f71d2 = "no";
  _0x1ad316.zync = function (_0x3a8d20) {
    if (!_0x3db922.millPlace) {
      _0x3f71d2 = "yeah";
      _0x1ad316.place(0x5, _0x158479(_0x3db922, _0x3a8d20));
      let _0x45904a = {
        x: _0x3db922.x + Math.cos(_0x158479(_0x3a8d20, _0x3db922) - Math.PI) * 0x50,
        y: _0x3db922.y + Math.sin(_0x158479(_0x3a8d20, _0x3db922) - Math.PI) * 0x50,
        x2: _0x3db922.x + Math.cos(_0x158479(_0x3a8d20, _0x3db922) - Math.PI) * 0x50,
        y2: _0x3db922.y + Math.sin(_0x158479(_0x3a8d20, _0x3db922) - Math.PI) * 0x50
      };
      function _0x43eb1d(_0x265543, _0x1d6a17, _0x5a18ad, _0xa34b7d) {
        let _0xef52af = Math.sqrt(Math.pow(_0x5a18ad - _0x265543, 0x2) + Math.pow(_0xa34b7d - _0x1d6a17, 0x2));
        return _0xef52af;
      }
      function _0x5c4294() {
        _0x1ad316.sendWS("6", _0x43eb1d(_0x45904a.x, _0x45904a.y, _0x3db922.x, _0x3db922.y) + "");
        _0x1ad316.sendWS("D", _0x158479(_0x3a8d20, _0x3db922) - Math.PI);
      }
      let _0x21d3cc = setInterval(() => {
        _0x1ad316.sendWS("G", _0x3db922.weapons[0x1], true);
        if (_0x30d0c8 == 0x0) {
          _0x1ad316.sendWS("K", 0x1);
          _0x30d0c8 = 0x1;
        }
        setTimeout(() => {
          _0x1ad316.sendWS("G", _0x3db922.weapons[0x0], true);
        }, 0x7d0);
        _0x1ad316.buye(0x35, 0x0);
        if (_0x43eb1d(_0x45904a.x, _0x45904a.y, _0x3db922.x, _0x3db922.y) > 0x5) {
          _0x1ad316.sendWS("a", _0x158479(_0x3db922, _0x45904a));
        } else {
          _0x1ad316.sendWS("6", _0x43eb1d(_0x45904a.x, _0x45904a.y, _0x3db922.x, _0x3db922.y) + "");
          _0x3f71d2 = "no";
          _0x1ad316.sendWS("a", undefined);
          _0x5c4294();
          clearInterval(_0x21d3cc);
        }
      }, 0x96);
      setTimeout(() => {
        _0x3f71d2 = "no";
        clearInterval(_0x21d3cc);
      }, 0x1f4);
    }
  };
  _0x1ad316.onmessage = function (_0x2c8d9f) {
    let _0x1314bc = new Uint8Array(_0x2c8d9f.data);
    let _0x40d8c0 = window.msgpack.decode(_0x1314bc);
    let _0x47f2a2 = _0x40d8c0[0x0];
    _0x1314bc = _0x40d8c0[0x1];
    if (_0x47f2a2 == "io-init") {
      _0x1ad316.spawn();
    }
    if (_0x47f2a2 == "1") {
      _0x1abe17 = _0x1314bc[0x0];
      console.log(_0x1abe17);
    }
    if (_0x47f2a2 == "D" && _0x1314bc[0x1]) {
      _0x3db922 = new Bot(_0x1314bc[0x0][0x0], _0x1314bc[0x0][0x1], hats, accessories);
      _0x3db922.setData(_0x1314bc[0x0]);
      _0x3db922.inGame = true;
      _0x3db922.alive = true;
      _0x3db922.x2 = undefined;
      _0x3db922.y2 = undefined;
      _0x3db922.spawn(0x1);
      _0x3db922.oldHealth = 0x64;
      _0x3db922.health = 0x64;
      _0x3db922.showName = "YEAHHH";
      _0x1718ca = {
        x: _0x1314bc[0x0][0x3],
        y: _0x1314bc[0x0][0x4]
      };
      _0x24f31d.inGame = true;
      if (_0x1ad316.first) {
        _0x1ad316.first = false;
        bots.push(_0x24f31d);
      }
    }
    if (_0x47f2a2 == "P") {
      _0x1ad316.spawn();
      _0x3db922.inGame = false;
      _0x24f31d.inGame = false;
    }
    if (_0x47f2a2 == "a") {
      let _0x5d3124 = _0x1314bc[0x0];
      _0x3db922.tick++;
      _0x3db922.enemy = [];
      _0x3db922.near = [];
      _0x1ad316.showName = "YEAHHH";
      _0x538b9f = [];
      for (let _0x4141cd = 0x0; _0x4141cd < _0x5d3124.length;) {
        if (_0x5d3124[_0x4141cd] == _0x3db922.sid) {
          _0x3db922.x2 = _0x5d3124[_0x4141cd + 0x1];
          _0x3db922.y2 = _0x5d3124[_0x4141cd + 0x2];
          _0x3db922.d2 = _0x5d3124[_0x4141cd + 0x3];
          _0x3db922.buildIndex = _0x5d3124[_0x4141cd + 0x4];
          _0x3db922.weaponIndex = _0x5d3124[_0x4141cd + 0x5];
          _0x3db922.weaponVariant = _0x5d3124[_0x4141cd + 0x6];
          _0x3db922.team = _0x5d3124[_0x4141cd + 0x7];
          _0x3db922.isLeader = _0x5d3124[_0x4141cd + 0x8];
          _0x3db922.skinIndex = _0x5d3124[_0x4141cd + 0x9];
          _0x3db922.tailIndex = _0x5d3124[_0x4141cd + 0xa];
          _0x3db922.iconIndex = _0x5d3124[_0x4141cd + 0xb];
          _0x3db922.zIndex = _0x5d3124[_0x4141cd + 0xc];
          _0x3db922.visible = true;
          _0x24f31d.x2 = _0x3db922.x2;
          _0x24f31d.y2 = _0x3db922.y2;
        }
        _0x4141cd += 0xd;
      }
      for (let _0x331952 = 0x0; _0x331952 < _0x5d3124.length;) {
        tmpObj = findSID(players, _0x5d3124[_0x331952]);
        if (tmpObj && !tmpObj.isTeam(_0x3db922)) {
          enemy.push(tmpObj);
          if (tmpObj.dist2 <= items.weapons[tmpObj.primaryIndex == undefined ? 0x5 : tmpObj.primaryIndex].range + _0x3db922.scale * 0x2) {
            nears.push(tmpObj);
          }
        }
        _0x331952 += 0xd;
      }
      if (enemy.length) {
        _0x3db922.near = enemy.sort(function (_0x2c0922, _0x346314) {
          return _0x2c0922.dist2 - _0x346314.dist2;
        })[0x0];
      }
      if (_0x30d0c8 == 0x1) {
        _0x1ad316.sendWS("K", 0x1);
        _0x30d0c8 = 0x0;
      }
      if (_0x3db922.alive) {
        if (player.team && _0x3db922.team != player.team && _0x3db922.tick % 0x9 === 0x0) {
          if (_0x3db922.team) {
            _0x1ad316.sendWS("N");
          }
          _0x1ad316.sendWS("b", player.team);
        }
        let _0x4ca90b = items.list[_0x3db922.items[0x3]];
        let _0x56bb93 = _0x3db922.itemCounts[_0x4ca90b.group.id];
        if ((_0x56bb93 != undefined ? _0x56bb93 : 0x0) < 0xc9 && _0x3db922.millPlace) {
          if (_0x3db922.inGame) {
            _0x1ad316.sendWS("D", _0x3db922.moveDir);
            if (_0x30d0c8 == 0x0) {
              _0x1ad316.sendWS("K", 0x1);
              _0x30d0c8 = 0x1;
            }
            if (UTILS.getDist(_0x1718ca, _0x3db922, 0x0, 0x2) > 0x5a) {
              let _0x302331 = UTILS.getDirect(_0x1718ca, _0x3db922, 0x0, 0x2);
              _0x1ad316.place(0x3, _0x302331 + 7.7);
              _0x1ad316.place(0x3, _0x302331 - 7.7);
              _0x1ad316.place(0x3, _0x302331);
              _0x1718ca = {
                x: _0x3db922.x2,
                y: _0x3db922.y2
              };
            }
            if (_0x3db922.tick % 0x5a === 0x0) {
              let _0xe04533 = Math.random() * Math.PI * 0x2;
              _0x3db922.moveDir = _0xe04533;
              _0x1ad316.sendWS("a", _0x3db922.moveDir);
            }
          }
          _0x1ad316.fastGear();
        } else {
          if ((_0x56bb93 != undefined ? _0x56bb93 : 0x0) > 0x128 && _0x3db922.millPlace) {
            _0x3db922.millPlace = false;
            _0x1ad316.fastGear();
          } else {
            if (_0x3db922.inGame) {
              if (_0x3e036d.length > 0x0) {
                let _0x4b4414 = _0x3e036d.filter(_0xac67d6 => _0xac67d6.active && _0xac67d6.isItem && UTILS.getDist(_0xac67d6, player, 0x0, 0x2) <= 0x258);
                if (document.getElementById("mode").value == "fuckemup") {
                  _0x1ad316.selectWeapon(_0x3db922.weapons[0x1]);
                  let _0x287c25 = UTILS.getDist(_0x4b4414[0x0], _0x3db922, 0x0, 0x2);
                  let _0x2fcf61 = UTILS.getDirect(_0x4b4414[0x0], _0x3db922, 0x0, 0x2);
                  _0x538b9f = _0x3e036d.filter(_0x157ccb => _0x157ccb.active && (findSID(_0x4b4414, _0x157ccb.sid) ? true : !(_0x157ccb.trap && (player.sid == _0x157ccb.owner.sid || player.findAllianceBySid(_0x157ccb.owner.sid)))) && _0x157ccb.isItem && UTILS.getDist(_0x157ccb, _0x3db922, 0x0, 0x2) <= items.weapons[_0x3db922.weaponIndex].range + _0x157ccb.scale + 0xa).sort(function (_0x51d123, _0xac4adb) {
                    return UTILS.getDist(_0x51d123, _0x3db922, 0x0, 0x2) - UTILS.getDist(_0xac4adb, _0x3db922, 0x0, 0x2);
                  })[0x0];
                  if (_0x538b9f) {
                    let _0x2bff3a = UTILS.getDist(_0x4b4414[0x0], _0x538b9f, 0x0, 0x0);
                    if (_0x287c25 - _0x2bff3a > 0x0) {
                      if (findSID(_0x4b4414, _0x538b9f.sid) ? true : _0x538b9f.dmg || _0x538b9f.trap) {
                        if (_0x3db922.moveDir != undefined) {
                          _0x3db922.moveDir = undefined;
                          _0x1ad316.sendWS("a", _0x3db922.moveDir);
                          _0x1ad316.sendWS("D", _0x3db922.nDir);
                        }
                      } else {
                        _0x3db922.moveDir = _0x2fcf61;
                        _0x1ad316.sendWS("a", _0x3db922.moveDir);
                        _0x1ad316.sendWS("D", _0x3db922.nDir);
                      }
                      if (_0x3db922.nDir != UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2)) {
                        _0x3db922.nDir = UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2);
                        _0x1ad316.sendWS("D", _0x3db922.nDir);
                      }
                      if (_0x30d0c8 == 0x0) {
                        _0x1ad316.sendWS("K", 0x1);
                        _0x30d0c8 = 0x1;
                      }
                      _0x1ad316.buye(0x28, 0x0);
                    } else {
                      _0x3db922.moveDir = _0x2fcf61;
                      _0x1ad316.sendWS("a", _0x3db922.moveDir);
                      _0x1ad316.sendWS("D", _0x3db922.nDir);
                      _0x1ad316.fastGear();
                    }
                  } else {
                    _0x3db922.moveDir = _0x2fcf61;
                    _0x1ad316.sendWS("a", _0x3db922.moveDir);
                    _0x1ad316.sendWS("D", _0x3db922.nDir);
                    _0x1ad316.fastGear();
                  }
                }
              }
              if (_0x3e036d.length > 0x0) {
                if (document.getElementById("mode").value == "flex") {
                  const _0x44f01f = Math.cos(Date.now() * 0.01) * 0x12c + player.x;
                  const _0x39ab77 = Math.sin(Date.now() * 0.01) * 0x12c + player.x;
                  _0x1ad316.sendWS("a", Math.atan2(_0x39ab77 - _0x3db922.y, _0x44f01f - _0x3db922.x));
                  const _0x2aae9a = Math.hypot(_0x44f01f - _0x3db922.x, _0x39ab77 - _0x3db922.y);
                  if (_0x2aae9a > 0x16) {
                    return;
                  }
                }
              }
              if (_0x3e036d.length > 0x0) {
                _0x538b9f = _0x3e036d.filter(_0x405c0a => _0x405c0a.active && _0x405c0a.isItem && UTILS.getDist(_0x405c0a, _0x3db922, 0x0, 0x2) <= items.weapons[_0x3db922.weaponIndex].range).sort(function (_0x3870f6, _0x144fca) {
                  return UTILS.getDist(_0x3870f6, _0x3db922, 0x0, 0x2) - UTILS.getDist(_0x144fca, _0x3db922, 0x0, 0x2);
                })[0x0];
                if (_0x538b9f) {
                  if (_0x30d0c8 == 0x0) {
                    _0x1ad316.sendWS("K", 0x1);
                    _0x30d0c8 = 0x1;
                  }
                  if (_0x3db922.nDir != UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2)) {
                    _0x3db922.nDir = UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2);
                    _0x1ad316.sendWS("D", _0x3db922.nDir);
                  }
                  _0x1ad316.buye(0x28, 0x0);
                  _0x1ad316.buye(0xb, 0x1);
                } else {
                  _0x1ad316.fastGear();
                  _0x1ad316.buye(0xb, 0x1);
                }
                _0x1ad316.buye(0xb, 0x1);
                if (breakObjects.length > 0x0 && document.getElementById("mode").value == "clear") {
                  _0x1ad316.selectWeapon(_0x3db922.weapons[0x1]);
                  let _0x5da72b = UTILS.getDist(breakObjects[0x0], _0x3db922, 0x0, 0x2);
                  let _0x1cfce9 = UTILS.getDirect(breakObjects[0x0], _0x3db922, 0x0, 0x2);
                  _0x538b9f = _0x3e036d.filter(_0xc1df9d => _0xc1df9d.active && (findSID(breakObjects, _0xc1df9d.sid) ? true : !(_0xc1df9d.trap && (player.sid == _0xc1df9d.owner.sid || player.findAllianceBySid(_0xc1df9d.owner.sid)))) && _0xc1df9d.isItem && UTILS.getDist(_0xc1df9d, _0x3db922, 0x0, 0x2) <= items.weapons[_0x3db922.weaponIndex].range + _0xc1df9d.scale).sort(function (_0x25bc42, _0x4f43c6) {
                    return UTILS.getDist(_0x25bc42, _0x3db922, 0x0, 0x2) - UTILS.getDist(_0x4f43c6, _0x3db922, 0x0, 0x2);
                  })[0x0];
                  if (_0x538b9f) {
                    let _0x1344c2 = UTILS.getDist(breakObjects[0x0], _0x538b9f, 0x0, 0x0);
                    if (_0x5da72b - _0x1344c2 > 0x0) {
                      if (findSID(breakObjects, _0x538b9f.sid) ? true : _0x538b9f.dmg || _0x538b9f.trap) {
                        if (_0x3db922.moveDir != undefined) {
                          _0x3db922.moveDir = undefined;
                          _0x1ad316.sendWS("a", _0x3db922.moveDir);
                          _0x1ad316.sendWS("D", _0x3db922.nDir);
                        }
                      } else {
                        _0x3db922.moveDir = _0x1cfce9;
                        _0x1ad316.sendWS("a", _0x3db922.moveDir);
                        _0x1ad316.sendWS("D", _0x3db922.nDir);
                      }
                      if (_0x3db922.nDir != UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2)) {
                        _0x3db922.nDir = UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2);
                        _0x1ad316.sendWS("D", _0x3db922.nDir);
                      }
                      if (_0x30d0c8 == 0x0) {
                        _0x1ad316.sendWS("K", 0x1);
                        _0x30d0c8 = 0x1;
                      }
                      _0x1ad316.buye(0x28, 0x0);
                      _0x1ad316.fastGear();
                    } else {
                      _0x3db922.moveDir = _0x1cfce9;
                      _0x1ad316.sendWS("a", _0x3db922.moveDir);
                      _0x1ad316.sendWS("D", _0x3db922.nDir);
                      _0x1ad316.fastGear();
                    }
                  } else {
                    _0x3db922.moveDir = _0x1cfce9;
                    _0x1ad316.sendWS("a", _0x3db922.moveDir);
                    _0x1ad316.sendWS("D", _0x3db922.nDir);
                    _0x1ad316.fastGear();
                  }
                  if (_0x5da72b > 0x12c) {
                    if (UTILS.getDist(_0x1718ca, _0x3db922, 0x0, 0x2) > 0x5a) {
                      let _0x13c91d = UTILS.getDirect(_0x1718ca, _0x3db922, 0x0, 0x2);
                      _0x1ad316.place(0x3, _0x13c91d + 7.7);
                      _0x1ad316.place(0x3, _0x13c91d - 7.7);
                      _0x1ad316.place(0x3, _0x13c91d);
                      _0x1718ca = {
                        x: _0x3db922.x2,
                        y: _0x3db922.y2
                      };
                    }
                  }
                }
              }
              if (_0x3e036d.length > 0x0 && document.getElementById("mode").value == "zync") {
                let _0x15422a = _0x3e036d.filter(_0x16a735 => _0x16a735.active && _0x16a735.isItem && UTILS.getDist(_0x16a735, player, 0x0, 0x2) <= items.weapons[_0x3db922.weaponIndex].range + _0x16a735.scale);
                if (!_0x15422a.length) {
                  if (_0x3f71d2 == "no") {
                    _0x1ad316.sendWS("D", UTILS.getDirect(player, _0x3db922, 0x0, 0x2));
                  }
                  _0x1ad316.sendWS("a", _0x158479(player, _0x3db922) + Math.PI);
                }
                if (_0x15422a.length) {
                  let _0x9171b8 = UTILS.getDist(_0x15422a[0x0], _0x3db922, 0x0, 0x2);
                  _0x538b9f = _0x3e036d.filter(_0xabe4fd => _0xabe4fd.active && (findSID(_0x15422a, _0xabe4fd.sid) ? true : !(_0xabe4fd.trap && (player.sid == _0xabe4fd.owner.sid || player.findAllianceBySid(_0xabe4fd.owner.sid)))) && _0xabe4fd.isItem && UTILS.getDist(_0xabe4fd, _0x3db922, 0x0, 0x2) <= items.weapons[_0x3db922.weaponIndex].range + _0xabe4fd.scale).sort(function (_0x4a9fe0, _0x35f21f) {
                    return UTILS.getDist(_0x4a9fe0, _0x3db922, 0x0, 0x2) - UTILS.getDist(_0x35f21f, _0x3db922, 0x0, 0x2);
                  })[0x0];
                  if (_0x538b9f) {
                    let _0x5a6bb1 = UTILS.getDist(_0x15422a[0x0], _0x538b9f, 0x0, 0x0);
                    if (_0x9171b8 - _0x5a6bb1 > 0x0) {
                      if (findSID(_0x15422a, _0x538b9f.sid) ? true : _0x538b9f.dmg || _0x538b9f.trap) {
                        if (_0x3db922.moveDir != undefined) {
                          _0x3db922.moveDir = undefined;
                          _0x1ad316.sendWS("a", _0x3db922.moveDir);
                          _0x1ad316.sendWS("D", _0x3db922.nDir);
                        }
                      } else {
                        _0x1ad316.sendWS("D", _0x3db922.nDir);
                      }
                      if (_0x3db922.nDir != UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2)) {
                        _0x3db922.nDir = UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2);
                        _0x1ad316.sendWS("D", _0x3db922.nDir);
                      }
                      if (_0x30d0c8 == 0x0) {
                        _0x1ad316.sendWS("K", 0x1);
                        _0x30d0c8 = 0x1;
                      }
                      _0x1ad316.buye(0x28, 0x0);
                      _0x1ad316.fastGear();
                    } else {
                      if (_0x3f71d2 == "no") {
                        _0x1ad316.sendWS("D", UTILS.getDirect(_0x538b9f, _0x3db922, 0x0, 0x2));
                      }
                      if (_0x12540e(player, _0x3db922) <= 0x6e) {
                        _0x1ad316.sendWS("a", undefined);
                      } else {
                        _0x1ad316.sendWS("a", _0x158479(player, _0x3db922) + Math.PI);
                      }
                    }
                  } else {
                    if (_0x15422a.length) {
                      if (_0x3f71d2 == "no") {
                        _0x1ad316.sendWS("D", UTILS.getDirect(_0x15422a[0x0], _0x3db922, 0x0, 0x2));
                      }
                      if (_0x12540e(player, _0x3db922) <= 0x6e) {
                        _0x1ad316.sendWS("a", undefined);
                      } else {
                        _0x1ad316.sendWS("a", _0x158479(player, _0x3db922) + Math.PI);
                      }
                    } else {
                      if (_0x3f71d2 == "no") {
                        _0x1ad316.sendWS("D", UTILS.getDirect(player, _0x3db922, 0x0, 0x2));
                      }
                      if (_0x12540e(player, _0x3db922) <= 0x6e) {
                        _0x1ad316.sendWS("a", undefined);
                      } else {
                        _0x1ad316.sendWS("a", _0x158479(player, _0x3db922) + Math.PI);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (_0x47f2a2 == "H") {
      let _0x5007c9 = _0x1314bc[0x0];
      for (let _0x174116 = 0x0; _0x174116 < _0x5007c9.length;) {
        _0x491bc3.add(_0x5007c9[_0x174116], _0x5007c9[_0x174116 + 0x1], _0x5007c9[_0x174116 + 0x2], _0x5007c9[_0x174116 + 0x3], _0x5007c9[_0x174116 + 0x4], _0x5007c9[_0x174116 + 0x5], items.list[_0x5007c9[_0x174116 + 0x6]], true, _0x5007c9[_0x174116 + 0x7] >= 0x0 ? {
          sid: _0x5007c9[_0x174116 + 0x7]
        } : null);
        _0x174116 += 0x8;
      }
    }
    if (_0x47f2a2 == "N") {
      let _0x4a4685 = _0x1314bc[0x0];
      let _0x301e52 = _0x1314bc[0x1];
      if (_0x3db922) {
        _0x3db922[_0x4a4685] = _0x301e52;
      }
    }
    if (_0x47f2a2 == "O") {
      if (_0x1314bc[0x0] == _0x3db922.sid) {
        _0x3db922.oldHealth = _0x3db922.health;
        _0x3db922.health = _0x1314bc[0x1];
        _0x3db922.judgeShame();
        if (_0x3db922.oldHealth > _0x3db922.health) {
          if (_0x3db922.shameCount < 0x5) {
            for (let _0x422302 = 0x0; _0x422302 < 0x2; _0x422302++) {
              _0x1ad316.place(0x0, _0x3db922.nDir);
            }
          } else {
            setTimeout(() => {
              for (let _0x4b3bdc = 0x0; _0x4b3bdc < 0x2; _0x4b3bdc++) {
                _0x1ad316.place(0x0, _0x3db922.nDir);
              }
            }, 0x5f);
          }
        }
      }
    }
    if (_0x47f2a2 == "Q") {
      let _0x4fd9f6 = _0x1314bc[0x0];
      _0x491bc3.disableBySid(_0x4fd9f6);
    }
    if (_0x47f2a2 == "R") {
      let _0x1eb832 = _0x1314bc[0x0];
      if (_0x3db922.alive) {
        _0x491bc3.removeAllItems(_0x1eb832);
      }
    }
    if (_0x47f2a2 == "S") {
      let _0x5d5270 = _0x1314bc[0x0];
      let _0x27285e = _0x1314bc[0x1];
      if (_0x3db922) {
        _0x3db922.itemCounts[_0x5d5270] = _0x27285e;
      }
    }
    if (_0x47f2a2 == "U") {
      if (_0x1314bc[0x0] > 0x0) {
        if (document.getElementById("setup").value == "dm") {
          if (_0x3db922.upgraded == 0x0) {
            _0x1ad316.sendUpgrade(0x7);
          } else {
            if (_0x3db922.upgraded == 0x1) {
              _0x1ad316.sendUpgrade(0x11);
            } else {
              if (_0x3db922.upgraded == 0x2) {
                _0x1ad316.sendUpgrade(0x1f);
              } else {
                if (_0x3db922.upgraded == 0x3) {
                  _0x1ad316.sendUpgrade(0x17);
                } else {
                  if (_0x3db922.upgraded == 0x4) {
                    _0x1ad316.sendUpgrade(0x9);
                  } else {
                    if (_0x3db922.upgraded == 0x5) {
                      _0x1ad316.sendUpgrade(0x22);
                    } else {
                      if (_0x3db922.upgraded == 0x6) {
                        _0x1ad316.sendUpgrade(0xc);
                      } else if (_0x3db922.upgraded == 0x7) {
                        _0x1ad316.sendUpgrade(0xf);
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (document.getElementById("setup").value == "dr") {
            if (_0x3db922.upgraded == 0x0) {
              _0x1ad316.sendUpgrade(0x7);
            } else {
              if (_0x3db922.upgraded == 0x1) {
                _0x1ad316.sendUpgrade(0x11);
              } else {
                if (_0x3db922.upgraded == 0x2) {
                  _0x1ad316.sendUpgrade(0x1f);
                } else {
                  if (_0x3db922.upgraded == 0x3) {
                    _0x1ad316.sendUpgrade(0x17);
                  } else {
                    if (_0x3db922.upgraded == 0x4) {
                      _0x1ad316.sendUpgrade(0x9);
                    } else {
                      if (_0x3db922.upgraded == 0x5) {
                        _0x1ad316.sendUpgrade(0x22);
                      } else {
                        if (_0x3db922.upgraded == 0x6) {
                          _0x1ad316.sendUpgrade(0xc);
                        } else if (_0x3db922.upgraded == 0x7) {
                          _0x1ad316.sendUpgrade(0xd);
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (document.getElementById("setup").value == "kh") {
              if (_0x3db922.upgraded == 0x0) {
                _0x1ad316.sendUpgrade(0x3);
              } else {
                if (_0x3db922.upgraded == 0x1) {
                  _0x1ad316.sendUpgrade(0x11);
                } else {
                  if (_0x3db922.upgraded == 0x2) {
                    _0x1ad316.sendUpgrade(0x1f);
                  } else {
                    if (_0x3db922.upgraded == 0x3) {
                      _0x1ad316.sendUpgrade(0x1b);
                    } else {
                      if (_0x3db922.upgraded == 0x4) {
                        _0x1ad316.sendUpgrade(0xa);
                      } else {
                        if (_0x3db922.upgraded == 0x5) {
                          _0x1ad316.sendUpgrade(0x22);
                        } else {
                          if (_0x3db922.upgraded == 0x6) {
                            _0x1ad316.sendUpgrade(0x4);
                          } else if (_0x3db922.upgraded == 0x7) {
                            _0x1ad316.sendUpgrade(0x19);
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (document.getElementById("setup").value == "zd") {
                if (_0x3db922.upgraded == 0x0) {
                  _0x1ad316.sendUpgrade(0x3);
                } else {
                  if (_0x3db922.upgraded == 0x1) {
                    _0x1ad316.sendUpgrade(0x11);
                  } else {
                    if (_0x3db922.upgraded == 0x2) {
                      _0x1ad316.sendUpgrade(0x1f);
                    } else {
                      if (_0x3db922.upgraded == 0x3) {
                        _0x1ad316.sendUpgrade(0x1b);
                      } else {
                        if (_0x3db922.upgraded == 0x4) {
                          _0x1ad316.sendUpgrade(0x9);
                        } else {
                          if (_0x3db922.upgraded == 0x5) {
                            _0x1ad316.sendUpgrade(0x22);
                          } else {
                            if (_0x3db922.upgraded == 0x6) {
                              _0x1ad316.sendUpgrade(0xc);
                            } else if (_0x3db922.upgraded == 0x7) {
                              _0x1ad316.sendUpgrade(0xf);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _0x3db922.upgraded++;
      }
    }
    if (_0x47f2a2 == "V") {
      let _0x122b81 = _0x1314bc[0x0];
      let _0x3f96c7 = _0x1314bc[0x1];
      if (_0x122b81) {
        if (_0x3f96c7) {
          _0x3db922.weapons = _0x122b81;
        } else {
          _0x3db922.items = _0x122b81;
        }
      }
    }
    if (_0x47f2a2 == "5") {
      let _0x4bf476 = _0x1314bc[0x0];
      let _0x20d31b = _0x1314bc[0x1];
      let _0x3744ba = _0x1314bc[0x2];
      if (_0x3744ba) {
        if (!_0x4bf476) {
          _0x3db922.tails[_0x20d31b] = 0x1;
        } else {
          _0x3db922.latestTail = _0x20d31b;
        }
      } else {
        if (!_0x4bf476) {
          _0x3db922.skins[_0x20d31b] = 0x1;
        } else {
          _0x3db922.latestSkin = _0x20d31b;
        }
      }
    }
    if (_0x47f2a2 == "6") {
      let _0x1e4df8 = _0x1314bc[0x0];
      let _0x3981c8 = _0x1314bc[0x1] + "";
      if (_0x1e4df8 == player.sid && _0x3981c8.includes("syncon")) {
        _0x1ad316.zync(_0x3db922.near);
      }
    }
  };
  _0x1ad316.onclose = function () {
    _0x3db922.inGame = false;
    _0x24f31d.inGame = false;
  };
}
function renderLeaf(_0x18d83e, _0x21d450, _0x4ffc1f, _0x2d95ee, _0x384f3b) {
  let _0x44cfdf = _0x18d83e + _0x4ffc1f * Math.cos(_0x2d95ee);
  let _0x22b230 = _0x21d450 + _0x4ffc1f * Math.sin(_0x2d95ee);
  let _0x46e12c = _0x4ffc1f * 0.4;
  _0x384f3b.moveTo(_0x18d83e, _0x21d450);
  _0x384f3b.beginPath();
  _0x384f3b.quadraticCurveTo((_0x18d83e + _0x44cfdf) / 0x2 + _0x46e12c * Math.cos(_0x2d95ee + Math.PI / 0x2), (_0x21d450 + _0x22b230) / 0x2 + _0x46e12c * Math.sin(_0x2d95ee + Math.PI / 0x2), _0x44cfdf, _0x22b230);
  _0x384f3b.quadraticCurveTo((_0x18d83e + _0x44cfdf) / 0x2 - _0x46e12c * Math.cos(_0x2d95ee + Math.PI / 0x2), (_0x21d450 + _0x22b230) / 0x2 - _0x46e12c * Math.sin(_0x2d95ee + Math.PI / 0x2), _0x18d83e, _0x21d450);
  _0x384f3b.closePath();
  _0x384f3b.fill();
  _0x384f3b.stroke();
}
function renderCircle(_0x20f43a, _0x3b7cc0, _0xbc88cc, _0x360096, _0x37d7c7, _0x333d21) {
  _0x360096 = _0x360096 || mainContext;
  _0x360096.beginPath();
  _0x360096.arc(_0x20f43a, _0x3b7cc0, _0xbc88cc, 0x0, 0x2 * Math.PI);
  if (!_0x333d21) {
    _0x360096.fill();
  }
  if (!_0x37d7c7) {
    _0x360096.stroke();
  }
}
function renderHealthCircle(_0x326749, _0x1a42ae, _0x383e2a, _0x2adfc1, _0x448f93, _0x5e0e1c) {
  _0x2adfc1 = _0x2adfc1 || mainContext;
  _0x2adfc1.beginPath();
  _0x2adfc1.arc(_0x326749, _0x1a42ae, _0x383e2a, 0x0, 0x2 * Math.PI);
  if (!_0x5e0e1c) {
    _0x2adfc1.fill();
  }
  if (!_0x448f93) {
    _0x2adfc1.stroke();
  }
}
function renderStar(_0x4c1388, _0x3b49f1, _0x7b2a55, _0x180ebb) {
  let _0x258677 = Math.PI / 0x2 * 0x3;
  let _0x2432a4;
  let _0x5b02da;
  let _0x4cc012 = Math.PI / _0x3b49f1;
  _0x4c1388.beginPath();
  _0x4c1388.moveTo(0x0, -_0x7b2a55);
  for (let _0x1ab906 = 0x0; _0x1ab906 < _0x3b49f1; _0x1ab906++) {
    _0x2432a4 = Math.cos(_0x258677) * _0x7b2a55;
    _0x5b02da = Math.sin(_0x258677) * _0x7b2a55;
    _0x4c1388.lineTo(_0x2432a4, _0x5b02da);
    _0x258677 += _0x4cc012;
    _0x2432a4 = Math.cos(_0x258677) * _0x180ebb;
    _0x5b02da = Math.sin(_0x258677) * _0x180ebb;
    _0x4c1388.lineTo(_0x2432a4, _0x5b02da);
    _0x258677 += _0x4cc012;
  }
  _0x4c1388.lineTo(0x0, -_0x7b2a55);
  _0x4c1388.closePath();
}
function renderHealthStar(_0x3ad9f6, _0x4cc172, _0x56b17a, _0x198320) {
  let _0xd7fa0d = Math.PI / 0x2 * 0x3;
  let _0x4f70c5;
  let _0x307370;
  let _0x2d5b6e = Math.PI / _0x4cc172;
  _0x3ad9f6.beginPath();
  _0x3ad9f6.moveTo(0x0, -_0x56b17a);
  for (let _0x1c5e53 = 0x0; _0x1c5e53 < _0x4cc172; _0x1c5e53++) {
    _0x4f70c5 = Math.cos(_0xd7fa0d) * _0x56b17a;
    _0x307370 = Math.sin(_0xd7fa0d) * _0x56b17a;
    _0x3ad9f6.lineTo(_0x4f70c5, _0x307370);
    _0xd7fa0d += _0x2d5b6e;
    _0x4f70c5 = Math.cos(_0xd7fa0d) * _0x198320;
    _0x307370 = Math.sin(_0xd7fa0d) * _0x198320;
    _0x3ad9f6.lineTo(_0x4f70c5, _0x307370);
    _0xd7fa0d += _0x2d5b6e;
  }
  _0x3ad9f6.lineTo(0x0, -_0x56b17a);
  _0x3ad9f6.closePath();
}
function renderRect(_0x428ff3, _0x3d9690, _0x12ebfa, _0x3a7342, _0x217d00, _0x4b19b5, _0x54587d) {
  if (!_0x54587d) {
    _0x217d00.fillRect(_0x428ff3 - _0x12ebfa / 0x2, _0x3d9690 - _0x3a7342 / 0x2, _0x12ebfa, _0x3a7342);
  }
  if (!_0x4b19b5) {
    _0x217d00.strokeRect(_0x428ff3 - _0x12ebfa / 0x2, _0x3d9690 - _0x3a7342 / 0x2, _0x12ebfa, _0x3a7342);
  }
}
function renderHealthRect(_0x197adb, _0x5502c7, _0x17dcad, _0x2690c0, _0xff8f15, _0x446192, _0x475342) {
  if (!_0x475342) {
    _0xff8f15.fillRect(_0x197adb - _0x17dcad / 0x2, _0x5502c7 - _0x2690c0 / 0x2, _0x17dcad, _0x2690c0);
  }
  if (!_0x446192) {
    _0xff8f15.strokeRect(_0x197adb - _0x17dcad / 0x2, _0x5502c7 - _0x2690c0 / 0x2, _0x17dcad, _0x2690c0);
  }
}
function renderRectCircle(_0x21e1cf, _0x1de3d3, _0x3282d8, _0xcb0a95, _0x4f4c55, _0x1e5a76, _0x370e0a, _0x2dc52f) {
  _0x1e5a76.save();
  _0x1e5a76.translate(_0x21e1cf, _0x1de3d3);
  _0x4f4c55 = Math.ceil(_0x4f4c55 / 0x2);
  for (let _0x520fde = 0x0; _0x520fde < _0x4f4c55; _0x520fde++) {
    renderRect(0x0, 0x0, _0x3282d8 * 0x2, _0xcb0a95, _0x1e5a76, _0x370e0a, _0x2dc52f);
    _0x1e5a76.rotate(Math.PI / _0x4f4c55);
  }
  _0x1e5a76.restore();
}
function renderBlob(_0x503a92, _0x49bc1c, _0x137e8b, _0x51a12e) {
  let _0x4fb922 = Math.PI / 0x2 * 0x3;
  let _0x1a6b0c = Math.PI / _0x49bc1c;
  let _0x4532b8;
  _0x503a92.beginPath();
  _0x503a92.moveTo(0x0, -_0x51a12e);
  for (let _0x13eaef = 0x0; _0x13eaef < _0x49bc1c; _0x13eaef++) {
    _0x4532b8 = UTILS.randInt(_0x137e8b + 0.9, _0x137e8b * 1.2);
    _0x503a92.quadraticCurveTo(Math.cos(_0x4fb922 + _0x1a6b0c) * _0x4532b8, Math.sin(_0x4fb922 + _0x1a6b0c) * _0x4532b8, Math.cos(_0x4fb922 + _0x1a6b0c * 0x2) * _0x51a12e, Math.sin(_0x4fb922 + _0x1a6b0c * 0x2) * _0x51a12e);
    _0x4fb922 += _0x1a6b0c * 0x2;
  }
  _0x503a92.lineTo(0x0, -_0x51a12e);
  _0x503a92.closePath();
}
function renderTriangle(_0xa5a2b8, _0x80ae05) {
  _0x80ae05 = _0x80ae05 || mainContext;
  let _0x20dac9 = _0xa5a2b8 * (Math.sqrt(0x3) / 0x2);
  _0x80ae05.beginPath();
  _0x80ae05.moveTo(0x0, -_0x20dac9 / 0x2);
  _0x80ae05.lineTo(-_0xa5a2b8 / 0x2, _0x20dac9 / 0x2);
  _0x80ae05.lineTo(_0xa5a2b8 / 0x2, _0x20dac9 / 0x2);
  _0x80ae05.lineTo(0x0, -_0x20dac9 / 0x2);
  _0x80ae05.fill();
  _0x80ae05.closePath();
}
function prepareMenuBackground() {
  var _0x55850d = config.mapScale / 0x2;
  objectManager.add(0x0, _0x55850d, _0x55850d + 0xc8, 0x0, config.treeScales[0x3], 0x0);
  objectManager.add(0x1, _0x55850d, _0x55850d - 0x1e0, 0x0, config.treeScales[0x3], 0x0);
  objectManager.add(0x2, _0x55850d + 0x12c, _0x55850d + 0x1c2, 0x0, config.treeScales[0x3], 0x0);
  objectManager.add(0x3, _0x55850d - 0x3b6, _0x55850d - 0x82, 0x0, config.treeScales[0x2], 0x0);
  objectManager.add(0x4, _0x55850d - 0x2ee, _0x55850d - 0x190, 0x0, config.treeScales[0x3], 0x0);
  objectManager.add(0x5, _0x55850d - 0x2bc, _0x55850d + 0x190, 0x0, config.treeScales[0x2], 0x0);
  objectManager.add(0x6, _0x55850d + 0x320, _0x55850d - 0xc8, 0x0, config.treeScales[0x3], 0x0);
  objectManager.add(0x7, _0x55850d - 0x104, _0x55850d + 0x154, 0x0, config.bushScales[0x3], 0x1);
  objectManager.add(0x8, _0x55850d + 0x2f8, _0x55850d + 0x136, 0x0, config.bushScales[0x3], 0x1);
  objectManager.add(0x9, _0x55850d - 0x320, _0x55850d + 0x64, 0x0, config.bushScales[0x3], 0x1);
  objectManager.add(0xa, _0x55850d - 0x320, _0x55850d + 0x12c, 0x0, items.list[0x4].scale, items.list[0x4].id, items.list[0xa]);
  objectManager.add(0xb, _0x55850d + 0x28a, _0x55850d - 0x186, 0x0, items.list[0x4].scale, items.list[0x4].id, items.list[0xa]);
  objectManager.add(0xc, _0x55850d - 0x190, _0x55850d - 0x1c2, 0x0, config.rockScales[0x2], 0x2);
}
function renderDeadPlayers(_0x299e1b, _0x419527) {
  mainContext.fillStyle = "#91b2db";
  const _0x553c15 = Date.now();
  deadPlayers.filter(_0x1c2f08 => _0x1c2f08.active).forEach(_0x4764ce => {
    if (!_0x4764ce.startTime) {
      _0x4764ce.startTime = _0x553c15;
      _0x4764ce.angle = 0x0;
      _0x4764ce.radius = 0.1;
    }
    const _0x2dc0e4 = _0x553c15 - _0x4764ce.startTime;
    _0x4764ce.alpha = Math.max(0x0, 0x1 - _0x2dc0e4 / 0xbb8);
    _0x4764ce.animate(delta);
    mainContext.globalAlpha = _0x4764ce.alpha;
    mainContext.strokeStyle = "#525252";
    mainContext.save();
    mainContext.translate(_0x4764ce.x - _0x299e1b, _0x4764ce.y - _0x419527);
    _0x4764ce.radius -= 0.001;
    _0x4764ce.angle += 0.0174533;
    const _0x470ede = _0x4764ce.radius * Math.cos(_0x4764ce.angle);
    const _0x1f4d70 = _0x4764ce.radius * Math.sin(_0x4764ce.angle);
    _0x4764ce.x += _0x470ede * 0x1;
    _0x4764ce.y += _0x1f4d70 * 0x1;
    mainContext.rotate(_0x4764ce.angle);
    renderDeadPlayer(_0x4764ce, mainContext);
    mainContext.restore();
    mainContext.fillStyle = "#91b2db";
    if (_0x2dc0e4 >= 0xbb8) {
      _0x4764ce.active = false;
      _0x4764ce.startTime = null;
    }
  });
}
function renderPlayers(_0x487580, _0x3c4e0d, _0x49eecb) {
  mainContext.globalAlpha = 0x1;
  mainContext.fillStyle = "#91b2db";
  for (var _0x1be8a4 = 0x0; _0x1be8a4 < players.length; ++_0x1be8a4) {
    tmpObj = players[_0x1be8a4];
    if (tmpObj.zIndex == _0x49eecb) {
      tmpObj.animate(delta);
      if (tmpObj.visible) {
        tmpObj.skinRot += 0.002 * delta;
        tmpDir = tmpObj == player ? getVisualDir() : tmpObj.dir || 0x0;
        mainContext.save();
        mainContext.translate(tmpObj.x - _0x487580, tmpObj.y - _0x3c4e0d);
        mainContext.rotate(tmpDir + tmpObj.dirPlus);
        renderPlayer(tmpObj, mainContext);
        mainContext.restore();
      }
    }
  }
}
function renderDeadPlayer(_0x46b3e6, _0x2fbfe0) {
  _0x2fbfe0 = _0x2fbfe0 || mainContext;
  _0x2fbfe0.lineWidth = 5.5;
  _0x2fbfe0.lineJoin = "miter";
  let _0x1ef0d9 = Math.PI / 0x4 * (items.weapons[_0x46b3e6.weaponIndex].armS || 0x1);
  let _0x40ff71 = _0x46b3e6.buildIndex < 0x0 ? items.weapons[_0x46b3e6.weaponIndex].hndS || 0x1 : 0x1;
  let _0x1c985d = _0x46b3e6.buildIndex < 0x0 ? items.weapons[_0x46b3e6.weaponIndex].hndD || 0x1 : 0x1;
  renderTail2(0xd, _0x2fbfe0, _0x46b3e6);
  if (_0x46b3e6.buildIndex < 0x0 && !items.weapons[_0x46b3e6.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x46b3e6.weaponIndex], config.weaponVariants[_0x46b3e6.weaponVariant || 0x0].src || "", _0x46b3e6.scale, 0x0, _0x2fbfe0);
    if (items.weapons[_0x46b3e6.weaponIndex].projectile != undefined && !items.weapons[_0x46b3e6.weaponIndex].hideProjectile) {
      renderProjectile(_0x46b3e6.scale, 0x0, items.projectiles[items.weapons[_0x46b3e6.weaponIndex].projectile], mainContext);
    }
  }
  _0x2fbfe0.fillStyle = "#ececec";
  renderCircle(_0x46b3e6.scale * Math.cos(_0x1ef0d9), _0x46b3e6.scale * Math.sin(_0x1ef0d9), 0xe);
  renderCircle(_0x46b3e6.scale * _0x1c985d * Math.cos(-_0x1ef0d9 * _0x40ff71), _0x46b3e6.scale * _0x1c985d * Math.sin(-_0x1ef0d9 * _0x40ff71), 0xe);
  if (_0x46b3e6.buildIndex < 0x0 && items.weapons[_0x46b3e6.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x46b3e6.weaponIndex], config.weaponVariants[_0x46b3e6.weaponVariant || 0x0].src || "", _0x46b3e6.scale, 0x0, _0x2fbfe0);
    if (items.weapons[_0x46b3e6.weaponIndex].projectile != undefined && !items.weapons[_0x46b3e6.weaponIndex].hideProjectile) {
      renderProjectile(_0x46b3e6.scale, 0x0, items.projectiles[items.weapons[_0x46b3e6.weaponIndex].projectile], mainContext);
    }
  }
  if (_0x46b3e6.buildIndex >= 0x0) {
    var _0x26342b = getItemSprite(items.list[_0x46b3e6.buildIndex]);
    _0x2fbfe0.drawImage(_0x26342b, _0x46b3e6.scale - items.list[_0x46b3e6.buildIndex].holdOffset, -_0x26342b.width / 0x2);
  }
  renderCircle(0x0, 0x0, _0x46b3e6.scale, _0x2fbfe0);
  renderSkin2(0x30, _0x2fbfe0, null, _0x46b3e6);
}
function renderPlayer(_0x33123f, _0x53026e) {
  _0x53026e = _0x53026e || mainContext;
  _0x53026e.lineWidth = 5.5;
  _0x53026e.lineJoin = "miter";
  let _0xec1b1c = Math.PI / 0x4 * (items.weapons[_0x33123f.weaponIndex].armS || 0x1);
  let _0x52ebac = _0x33123f.buildIndex < 0x0 ? items.weapons[_0x33123f.weaponIndex].hndS || 0x1 : 0x1;
  let _0x1372d2 = _0x33123f.buildIndex < 0x0 ? items.weapons[_0x33123f.weaponIndex].hndD || 0x1 : 0x1;
  let _0x5cde13 = _0x33123f == player && _0x33123f.weapons[0x0] == 0x3 && _0x33123f.weapons[0x1] == 0xf;
  if (_0x33123f.tailIndex > 0x0) {
    renderTailTextureImage(_0x33123f.tailIndex, _0x53026e, _0x33123f);
  }
  if (_0x33123f.buildIndex < 0x0 && !items.weapons[_0x33123f.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x5cde13 ? 0x4 : _0x33123f.weaponIndex], config.weaponVariants[_0x33123f.weaponVariant].src, _0x33123f.scale, 0x0, _0x53026e);
    if (items.weapons[_0x33123f.weaponIndex].projectile != undefined && !items.weapons[_0x33123f.weaponIndex].hideProjectile) {
      renderProjectile(_0x33123f.scale, 0x0, items.projectiles[items.weapons[_0x33123f.weaponIndex].projectile], mainContext);
    }
  }
  _0x53026e.fillStyle = config.skinColors[_0x33123f.skinColor];
  renderCircle(_0x33123f.scale * Math.cos(_0xec1b1c), _0x33123f.scale * Math.sin(_0xec1b1c), 0xe);
  renderCircle(_0x33123f.scale * _0x1372d2 * Math.cos(-_0xec1b1c * _0x52ebac), _0x33123f.scale * _0x1372d2 * Math.sin(-_0xec1b1c * _0x52ebac), 0xe);
  if (_0x33123f.buildIndex < 0x0 && items.weapons[_0x33123f.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x33123f.weaponIndex], config.weaponVariants[_0x33123f.weaponVariant].src, _0x33123f.scale, 0x0, _0x53026e);
    if (items.weapons[_0x33123f.weaponIndex].projectile != undefined && !items.weapons[_0x33123f.weaponIndex].hideProjectile) {
      renderProjectile(_0x33123f.scale, 0x0, items.projectiles[items.weapons[_0x33123f.weaponIndex].projectile], mainContext);
    }
  }
  if (_0x33123f.buildIndex >= 0x0) {
    var _0x2c1b3e = getItemSprite(items.list[_0x33123f.buildIndex]);
    _0x53026e.drawImage(_0x2c1b3e, _0x33123f.scale - items.list[_0x33123f.buildIndex].holdOffset, -_0x2c1b3e.width / 0x2);
  }
  renderCircle(0x0, 0x0, _0x33123f.scale, _0x53026e);
  if (_0x33123f.skinIndex > 0x0) {
    _0x53026e.rotate(Math.PI / 0x2);
    renderTextureSkin(_0x33123f.skinIndex, _0x53026e, null, _0x33123f);
  }
}
var skinSprites2 = {};
var skinPointers2 = {};
function renderSkin2(_0x5a98fa, _0x5110e1, _0x19d147, _0x27ebcc) {
  tmpSkin = skinSprites2[_0x5a98fa];
  if (!tmpSkin) {
    var _0x54ffe4 = new Image();
    _0x54ffe4.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x54ffe4.src = "https://moomoo.io/img/hats/hat_" + _0x5a98fa + ".png";
    skinSprites2[_0x5a98fa] = _0x54ffe4;
    tmpSkin = _0x54ffe4;
  }
  var _0xb49a87 = _0x19d147 || skinPointers2[_0x5a98fa];
  if (!_0xb49a87) {
    for (var _0x25bc81 = 0x0; _0x25bc81 < hats.length; ++_0x25bc81) {
      if (hats[_0x25bc81].id == _0x5a98fa) {
        _0xb49a87 = hats[_0x25bc81];
        break;
      }
    }
    skinPointers2[_0x5a98fa] = _0xb49a87;
  }
  if (tmpSkin.isLoaded) {
    _0x5110e1.drawImage(tmpSkin, -_0xb49a87.scale / 0x2, -_0xb49a87.scale / 0x2, _0xb49a87.scale, _0xb49a87.scale);
  }
  if (!_0x19d147 && _0xb49a87.topSprite) {
    _0x5110e1.save();
    _0x5110e1.rotate(_0x27ebcc.skinRot);
    renderSkin2(_0x5a98fa + "_top", _0x5110e1, _0xb49a87, _0x27ebcc);
    _0x5110e1.restore();
  }
}
function renderTextureSkin(_0x3e6e88, _0x16e111, _0x5de897, _0x1343c0) {
  if (!(tmpSkin = skinSprites[_0x3e6e88 + "lol"])) {
    var _0x2c221d = new Image();
    _0x2c221d.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x2c221d.src = setSkinTextureImage(_0x3e6e88, "hat", _0x3e6e88);
    skinSprites[_0x3e6e88 + "lol"] = _0x2c221d;
    tmpSkin = _0x2c221d;
  }
  var _0x4d13da = _0x5de897 || skinPointers[_0x3e6e88];
  if (!_0x4d13da) {
    for (var _0x460099 = 0x0; _0x460099 < hats.length; ++_0x460099) {
      if (hats[_0x460099].id == _0x3e6e88) {
        _0x4d13da = hats[_0x460099];
        break;
      }
    }
    skinPointers[_0x3e6e88] = _0x4d13da;
  }
  if (tmpSkin.isLoaded) {
    _0x16e111.drawImage(tmpSkin, -_0x4d13da.scale / 0x2, -_0x4d13da.scale / 0x2, _0x4d13da.scale, _0x4d13da.scale);
  }
  if (!_0x5de897 && _0x4d13da.topSprite) {
    _0x16e111.save();
    _0x16e111.rotate(_0x1343c0.skinRot);
    renderSkin(_0x3e6e88 + "_top", _0x16e111, _0x4d13da, _0x1343c0);
    _0x16e111.restore();
  }
}
var FlareZHat = {
  0x7: "https://i.imgur.com/vAOzlyY.png",
  0xf: "https://i.imgur.com/YRQ8Ybq.png",
  0x28: "https://i.imgur.com/Xzmg27N.png",
  0x1a: "https://i.imgur.com/I0xGtyZ.png",
  0x37: "https://i.imgur.com/uYgDtcZ.png",
  0x14: "https://i.imgur.com/f5uhWCk.png"
};
function setSkinTextureImage(_0x36b82c, _0x599b98, _0x45935b) {
  if (FlareZHat[_0x36b82c] && _0x599b98 == "hat") {
    return FlareZHat[_0x36b82c];
  } else {
    if (_0x599b98 == "acc") {
      return ".././img/accessories/access_" + _0x36b82c + ".png";
    } else {
      return _0x599b98 == "hat" ? ".././img/hats/hat_" + _0x36b82c + ".png" : ".././img/weapons/" + _0x36b82c + ".png";
    }
  }
}
let skinSprites = {};
let skinPointers = {};
let tmpSkin;
function renderSkin(_0x400ced, _0x581916, _0x33c391, _0x2eeb52) {
  tmpSkin = skinSprites[_0x400ced];
  if (!tmpSkin) {
    let _0x510b5e = new Image();
    _0x510b5e.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x510b5e.src = "https://moomoo.io/img/hats/hat_" + _0x400ced + ".png";
    skinSprites[_0x400ced] = _0x510b5e;
    tmpSkin = _0x510b5e;
  }
  let _0x128435 = _0x33c391 || skinPointers[_0x400ced];
  if (!_0x128435) {
    for (let _0x384684 = 0x0; _0x384684 < hats.length; ++_0x384684) {
      if (hats[_0x384684].id == _0x400ced) {
        _0x128435 = hats[_0x384684];
        break;
      }
    }
    skinPointers[_0x400ced] = _0x128435;
  }
  if (tmpSkin.isLoaded) {
    _0x581916.drawImage(tmpSkin, -_0x128435.scale / 0x2, -_0x128435.scale / 0x2, _0x128435.scale, _0x128435.scale);
  }
  if (!_0x33c391 && _0x128435.topSprite) {
    _0x581916.save();
    _0x581916.rotate(_0x2eeb52.skinRot);
    renderSkin(_0x400ced + "_top", _0x581916, _0x128435, _0x2eeb52);
    _0x581916.restore();
  }
}
var FlareZAcc = {
  0x15: "https://i.imgur.com/4ddZert.png",
  0x13: "https://i.imgur.com/sULkUZT.png"
};
function setTailTextureImage(_0x299a63, _0x3e8619, _0x5ce660) {
  if (FlareZAcc[_0x299a63] && _0x3e8619 == "acc") {
    return FlareZAcc[_0x299a63];
  } else {
    if (_0x3e8619 == "acc") {
      return ".././img/accessories/access_" + _0x299a63 + ".png";
    } else {
      return _0x3e8619 == "hat" ? ".././img/hats/hat_" + _0x299a63 + ".png" : ".././img/weapons/" + _0x299a63 + ".png";
    }
  }
}
function renderTailTextureImage(_0x44342d, _0xb9a89c, _0x448bd8) {
  if (!(tmpSkin = accessSprites[_0x44342d + "lol"])) {
    var _0x59350e = new Image();
    _0x59350e.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x59350e.src = setTailTextureImage(_0x44342d, "acc");
    accessSprites[_0x44342d + "lol"] = _0x59350e;
    tmpSkin = _0x59350e;
  }
  var _0x520682 = accessPointers[_0x44342d];
  if (!_0x520682) {
    for (var _0x5115b7 = 0x0; _0x5115b7 < accessories.length; ++_0x5115b7) {
      if (accessories[_0x5115b7].id == _0x44342d) {
        _0x520682 = accessories[_0x5115b7];
        break;
      }
    }
    accessPointers[_0x44342d] = _0x520682;
  }
  if (tmpSkin.isLoaded) {
    _0xb9a89c.save();
    _0xb9a89c.translate(-0x14 - (_0x520682.xOff || 0x0), 0x0);
    if (_0x520682.spin) {
      _0xb9a89c.rotate(_0x448bd8.skinRot);
    }
    _0xb9a89c.drawImage(tmpSkin, -(_0x520682.scale / 0x2), -(_0x520682.scale / 0x2), _0x520682.scale, _0x520682.scale);
    _0xb9a89c.restore();
  }
}
let accessSprites = {};
let accessPointers = {};
function renderTail(_0x3d494d, _0x394ac9, _0x3c8672) {
  tmpSkin = accessSprites[_0x3d494d];
  if (!tmpSkin) {
    let _0x436314 = new Image();
    _0x436314.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x436314.src = "https://moomoo.io/img/accessories/access_" + _0x3d494d + ".png";
    accessSprites[_0x3d494d] = _0x436314;
    tmpSkin = _0x436314;
  }
  let _0xebf94a = accessPointers[_0x3d494d];
  if (!_0xebf94a) {
    for (let _0x4d3369 = 0x0; _0x4d3369 < accessories.length; ++_0x4d3369) {
      if (accessories[_0x4d3369].id == _0x3d494d) {
        _0xebf94a = accessories[_0x4d3369];
        break;
      }
    }
    accessPointers[_0x3d494d] = _0xebf94a;
  }
  if (tmpSkin.isLoaded) {
    _0x394ac9.save();
    _0x394ac9.translate(-0x14 - (_0xebf94a.xOff || 0x0), 0x0);
    if (_0xebf94a.spin) {
      _0x394ac9.rotate(_0x3c8672.skinRot);
    }
    _0x394ac9.drawImage(tmpSkin, -(_0xebf94a.scale / 0x2), -(_0xebf94a.scale / 0x2), _0xebf94a.scale, _0xebf94a.scale);
    _0x394ac9.restore();
  }
}
var accessSprites2 = {};
var accessPointers2 = {};
function renderTail2(_0x44a53e, _0x39ca95, _0x369628) {
  tmpSkin = accessSprites2[_0x44a53e];
  if (!tmpSkin) {
    var _0x47cc65 = new Image();
    _0x47cc65.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x47cc65.src = "https://moomoo.io/img/accessories/access_" + _0x44a53e + ".png";
    accessSprites2[_0x44a53e] = _0x47cc65;
    tmpSkin = _0x47cc65;
  }
  var _0x35141c = accessPointers2[_0x44a53e];
  if (!_0x35141c) {
    for (var _0x17aa98 = 0x0; _0x17aa98 < accessories.length; ++_0x17aa98) {
      if (accessories[_0x17aa98].id == _0x44a53e) {
        _0x35141c = accessories[_0x17aa98];
        break;
      }
    }
    accessPointers2[_0x44a53e] = _0x35141c;
  }
  if (tmpSkin.isLoaded) {
    _0x39ca95.save();
    _0x39ca95.translate(-0x14 - (_0x35141c.xOff || 0x0), 0x0);
    if (_0x35141c.spin) {
      _0x39ca95.rotate(_0x369628.skinRot);
    }
    _0x39ca95.drawImage(tmpSkin, -(_0x35141c.scale / 0x2), -(_0x35141c.scale / 0x2), _0x35141c.scale, _0x35141c.scale);
    _0x39ca95.restore();
  }
}
let toolSprites = {};
function renderTool(_0x1e33fd, _0x2b6143, _0x2deeca, _0x1e7047, _0x53014f) {
  let _0x7487d2 = _0x1e33fd.src + (_0x2b6143 || "");
  let _0x28a15a = toolSprites[_0x7487d2];
  if (!_0x28a15a) {
    _0x28a15a = new Image();
    _0x28a15a.onload = function () {
      this.isLoaded = true;
    };
    _0x28a15a.src = "https://moomoo.io/img/weapons/" + _0x7487d2 + ".png";
    toolSprites[_0x7487d2] = _0x28a15a;
  }
  if (_0x28a15a.isLoaded) {
    _0x53014f.drawImage(_0x28a15a, _0x2deeca + _0x1e33fd.xOff - _0x1e33fd.length / 0x2, _0x1e7047 + _0x1e33fd.yOff - _0x1e33fd.width / 0x2, _0x1e33fd.length, _0x1e33fd.width);
  }
}
function renderProjectiles(_0x41ccf9, _0x190e9b, _0x49304c) {
  for (let _0x20ad29 = 0x0; _0x20ad29 < projectiles.length; _0x20ad29++) {
    tmpObj = projectiles[_0x20ad29];
    if (tmpObj.active && tmpObj.layer == _0x41ccf9 && tmpObj.inWindow) {
      tmpObj.update(delta);
      if (tmpObj.active && isOnScreen(tmpObj.x - _0x190e9b, tmpObj.y - _0x49304c, tmpObj.scale)) {
        mainContext.save();
        mainContext.translate(tmpObj.x - _0x190e9b, tmpObj.y - _0x49304c);
        mainContext.rotate(tmpObj.dir);
        renderProjectile(0x0, 0x0, tmpObj, mainContext, 0x1);
        mainContext.restore();
      }
    }
  }
}
let projectileSprites = {};
function renderProjectile(_0x429bea, _0x305898, _0x5a33b5, _0x9b24d7, _0x26910b) {
  if (_0x5a33b5.src) {
    let _0x1c83c0 = items.projectiles[_0x5a33b5.indx].src;
    let _0x964551 = projectileSprites[_0x1c83c0];
    if (!_0x964551) {
      _0x964551 = new Image();
      _0x964551.onload = function () {
        this.isLoaded = true;
      };
      _0x964551.src = "https://moomoo.io/img/weapons/" + _0x1c83c0 + ".png";
      projectileSprites[_0x1c83c0] = _0x964551;
    }
    if (_0x964551.isLoaded) {
      _0x9b24d7.drawImage(_0x964551, _0x429bea - _0x5a33b5.scale / 0x2, _0x305898 - _0x5a33b5.scale / 0x2, _0x5a33b5.scale, _0x5a33b5.scale);
    }
  } else if (_0x5a33b5.indx == 0x1) {
    _0x9b24d7.fillStyle = "#939393";
    renderCircle(_0x429bea, _0x305898, _0x5a33b5.scale, _0x9b24d7);
  }
}
let aiSprites = {};
function renderAI(_0x2d1af1, _0x80da94) {
  let _0x5e49be = _0x2d1af1.index;
  let _0x4d3e4a = aiSprites[_0x5e49be];
  if (!_0x4d3e4a) {
    let _0x5470eb = new Image();
    _0x5470eb.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x5470eb.src = "https://moomoo.io/img/animals/" + _0x2d1af1.src + ".png";
    _0x4d3e4a = _0x5470eb;
    aiSprites[_0x5e49be] = _0x4d3e4a;
  }
  if (_0x4d3e4a.isLoaded) {
    let _0x5a47d5 = _0x2d1af1.scale * 1.2 * (_0x2d1af1.spriteMlt || 0x1);
    _0x80da94.drawImage(_0x4d3e4a, -_0x5a47d5, -_0x5a47d5, _0x5a47d5 * 0x2, _0x5a47d5 * 0x2);
  }
}
function renderWaterBodies(_0x2f1da9, _0x2fccb5, _0x3abb95, _0x49e64e) {
  let _0x26520d = config.riverWidth + _0x49e64e;
  let _0x4b4f94 = config.mapScale / 0x2 - _0x2fccb5 - _0x26520d / 0x2;
  if (_0x4b4f94 < maxScreenHeight && _0x4b4f94 + _0x26520d > 0x0) {
    _0x3abb95.fillRect(0x0, _0x4b4f94, maxScreenWidth, _0x26520d);
  }
}
let gameObjectSprites = {};
function getResSprite(_0x13b328) {
  let _0x5efa34 = _0x13b328.y >= config.mapScale - config.snowBiomeTop ? 0x2 : _0x13b328.y <= config.snowBiomeTop ? 0x1 : 0x0;
  let _0x1693a2 = _0x13b328.type + "_" + _0x13b328.scale + "_" + _0x5efa34;
  let _0x3c4aa2 = gameObjectSprites[_0x1693a2];
  if (!_0x3c4aa2) {
    let _0x8e9327 = document.createElement("canvas");
    _0x8e9327.width = _0x8e9327.height = _0x13b328.scale * 2.1 + 5.5;
    let _0x4e16c9 = _0x8e9327.getContext("2d");
    _0x4e16c9.translate(_0x8e9327.width / 0x2, _0x8e9327.height / 0x2);
    _0x4e16c9.rotate(UTILS.randFloat(0x0, Math.PI));
    _0x4e16c9.strokeStyle = "#525252";
    _0x4e16c9.lineWidth = 5.5;
    if (_0x13b328.type == 0x0) {
      let _0x595c9f;
      _0x4e16c9.globalAlpha = cdf(_0x13b328, player) <= 0xfa ? 0.6 : 0x1;
      for (let _0x1ae360 = 0x0; _0x1ae360 < 0x2; ++_0x1ae360) {
        _0x595c9f = tmpObj.scale * (!_0x1ae360 ? 0x1 : 0.5);
        renderStar(_0x4e16c9, 0x8, _0x595c9f, _0x595c9f * 0.7);
        _0x4e16c9.fillStyle = !_0x5efa34 ? !_0x1ae360 ? "#9ebf57" : "#b4db62" : !_0x1ae360 ? "#e3f1f4" : "#fff";
        _0x4e16c9.fill();
        if (!_0x1ae360) {
          _0x4e16c9.stroke();
          _0x4e16c9.shadowBlur = null;
          _0x4e16c9.shadowColor = null;
          _0x4e16c9.globalAlpha = 0x1;
        }
      }
    } else {
      if (_0x13b328.type == 0x1) {
        if (_0x5efa34 == 0x2) {
          _0x4e16c9.fillStyle = "#606060";
          renderStar(_0x4e16c9, 0x6, _0x13b328.scale * 0.3, _0x13b328.scale * 0.71);
          _0x4e16c9.fill();
          _0x4e16c9.stroke();
          _0x4e16c9.fillStyle = "#89a54c";
          renderCircle(0x0, 0x0, _0x13b328.scale * 0.55, _0x4e16c9);
          _0x4e16c9.fillStyle = "#a5c65b";
          renderCircle(0x0, 0x0, _0x13b328.scale * 0.3, _0x4e16c9, true);
        } else {
          renderBlob(_0x4e16c9, 0x6, tmpObj.scale, tmpObj.scale * 0.7);
          _0x4e16c9.fillStyle = _0x5efa34 ? "#e3f1f4" : "#89a54c";
          _0x4e16c9.fill();
          _0x4e16c9.stroke();
          _0x4e16c9.fillStyle = _0x5efa34 ? "#6a64af" : "#c15555";
          let _0xcc431b;
          let _0x25b675 = Math.PI * 0x2 / 0x4;
          for (let _0x195b99 = 0x0; _0x195b99 < 0x4; ++_0x195b99) {
            _0xcc431b = UTILS.randInt(tmpObj.scale / 3.5, tmpObj.scale / 2.3);
            renderCircle(_0xcc431b * Math.cos(_0x25b675 * _0x195b99), _0xcc431b * Math.sin(_0x25b675 * _0x195b99), UTILS.randInt(0xa, 0xc), _0x4e16c9);
          }
        }
      } else if (_0x13b328.type == 0x2 || _0x13b328.type == 0x3) {
        _0x4e16c9.fillStyle = _0x13b328.type == 0x2 ? _0x5efa34 == 0x2 ? "#938d77" : "#939393" : "#e0c655";
        renderStar(_0x4e16c9, 0x3, _0x13b328.scale, _0x13b328.scale);
        _0x4e16c9.fill();
        _0x4e16c9.stroke();
        _0x4e16c9.shadowBlur = null;
        _0x4e16c9.shadowColor = null;
        _0x4e16c9.fillStyle = _0x13b328.type == 0x2 ? _0x5efa34 == 0x2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
        renderStar(_0x4e16c9, 0x3, _0x13b328.scale * 0.55, _0x13b328.scale * 0.65);
        _0x4e16c9.fill();
      }
    }
    _0x3c4aa2 = _0x8e9327;
    gameObjectSprites[_0x1693a2] = _0x3c4aa2;
  }
  return _0x3c4aa2;
}
let itemSprites = [];
function getItemSprite(_0x46ccb4, _0x493aba) {
  let _0x3e2c0e = itemSprites[_0x46ccb4.id];
  if (!_0x3e2c0e || _0x493aba) {
    let _0xb98a7c = !_0x493aba ? 0x14 : 0x5;
    let _0x19997e = document.createElement("canvas");
    let _0x3d0016 = !_0x493aba && _0x46ccb4.name == "windmill" ? items.list[0x4].scale : _0x46ccb4.scale;
    _0x19997e.width = _0x19997e.height = _0x3d0016 * 2.5 + 5.5 + (items.list[_0x46ccb4.id].spritePadding || 0x0) + _0xb98a7c;
    let _0x30e146 = _0x19997e.getContext("2d");
    _0x30e146.translate(_0x19997e.width / 0x2, _0x19997e.height / 0x2);
    _0x30e146.rotate(_0x493aba ? 0x0 : Math.PI / 0x2);
    _0x30e146.strokeStyle = "#525252";
    _0x30e146.lineWidth = 5.5 * (_0x493aba ? _0x19997e.width / 0x51 : 0x1);
    if (!_0x493aba) {
      _0x30e146.shadowBlur = 0x8;
      _0x30e146.shadowColor = "rgba(0, 0, 0, 0.2)";
    }
    if (_0x46ccb4.name == "apple") {
      _0x30e146.fillStyle = "#c15555";
      renderCircle(0x0, 0x0, _0x46ccb4.scale, _0x30e146);
      _0x30e146.fillStyle = "#89a54c";
      let _0x348a00 = -(Math.PI / 0x2);
      renderLeaf(_0x46ccb4.scale * Math.cos(_0x348a00), _0x46ccb4.scale * Math.sin(_0x348a00), 0x19, _0x348a00 + Math.PI / 0x2, _0x30e146);
    } else {
      if (_0x46ccb4.name == "cookie") {
        _0x30e146.fillStyle = "#cca861";
        renderCircle(0x0, 0x0, _0x46ccb4.scale, _0x30e146);
        _0x30e146.fillStyle = "#937c4b";
        let _0x3265ba = Math.PI * 0x2 / 0x4;
        let _0x29d7a2;
        for (let _0x805bb9 = 0x0; _0x805bb9 < 0x4; ++_0x805bb9) {
          _0x29d7a2 = UTILS.randInt(_0x46ccb4.scale / 2.5, _0x46ccb4.scale / 1.7);
          renderCircle(_0x29d7a2 * Math.cos(_0x3265ba * _0x805bb9), _0x29d7a2 * Math.sin(_0x3265ba * _0x805bb9), UTILS.randInt(0x4, 0x5), _0x30e146, true);
        }
      } else {
        if (_0x46ccb4.name == "cheese") {
          _0x30e146.fillStyle = "#f4f3ac";
          renderCircle(0x0, 0x0, _0x46ccb4.scale, _0x30e146);
          _0x30e146.fillStyle = "#c3c28b";
          let _0x381c07 = Math.PI * 0x2 / 0x4;
          let _0x3f53e1;
          for (let _0x2c9df8 = 0x0; _0x2c9df8 < 0x4; ++_0x2c9df8) {
            _0x3f53e1 = UTILS.randInt(_0x46ccb4.scale / 2.5, _0x46ccb4.scale / 1.7);
            renderCircle(_0x3f53e1 * Math.cos(_0x381c07 * _0x2c9df8), _0x3f53e1 * Math.sin(_0x381c07 * _0x2c9df8), UTILS.randInt(0x4, 0x5), _0x30e146, true);
          }
        } else {
          if (_0x46ccb4.name == "wood wall" || _0x46ccb4.name == "stone wall" || _0x46ccb4.name == "castle wall") {
            _0x30e146.fillStyle = _0x46ccb4.name == "castle wall" ? "#83898e" : _0x46ccb4.name == "wood wall" ? "#a5974c" : "#939393";
            let _0x25198a = _0x46ccb4.name == "castle wall" ? 0x4 : 0x3;
            renderStar(_0x30e146, _0x25198a, _0x46ccb4.scale * 1.1, _0x46ccb4.scale * 1.1);
            _0x30e146.fill();
            _0x30e146.stroke();
            _0x30e146.fillStyle = _0x46ccb4.name == "castle wall" ? "#9da4aa" : _0x46ccb4.name == "wood wall" ? "#c9b758" : "#bcbcbc";
            renderStar(_0x30e146, _0x25198a, _0x46ccb4.scale * 0.65, _0x46ccb4.scale * 0.65);
            _0x30e146.fill();
          } else {
            if (_0x46ccb4.name == "spikes" || _0x46ccb4.name == "greater spikes" || _0x46ccb4.name == "poison spikes" || _0x46ccb4.name == "spinning spikes") {
              _0x30e146.fillStyle = _0x46ccb4.name == "poison spikes" ? "#7b935d" : "#939393";
              let _0x253cef = _0x46ccb4.scale * 0.6;
              renderStar(_0x30e146, _0x46ccb4.name == "spikes" ? 0x5 : 0x6, _0x46ccb4.scale, _0x253cef);
              _0x30e146.fill();
              _0x30e146.stroke();
              _0x30e146.fillStyle = "#a5974c";
              renderCircle(0x0, 0x0, _0x253cef, _0x30e146);
              _0x30e146.fillStyle = "#c9b758";
              renderCircle(0x0, 0x0, _0x253cef / 0x2, _0x30e146, true);
            } else {
              if (_0x46ccb4.name == "windmill" || _0x46ccb4.name == "faster windmill" || _0x46ccb4.name == "power mill") {
                _0x30e146.fillStyle = "#a5974c";
                renderCircle(0x0, 0x0, _0x3d0016, _0x30e146);
                _0x30e146.fillStyle = "#c9b758";
                renderRectCircle(0x0, 0x0, _0x3d0016 * 1.5, 0x1d, 0x4, _0x30e146);
                _0x30e146.fillStyle = "#a5974c";
                renderCircle(0x0, 0x0, _0x3d0016 * 0.5, _0x30e146);
              } else {
                if (_0x46ccb4.name == "mine") {
                  _0x30e146.fillStyle = "#939393";
                  renderStar(_0x30e146, 0x3, _0x46ccb4.scale, _0x46ccb4.scale);
                  _0x30e146.fill();
                  _0x30e146.stroke();
                  _0x30e146.fillStyle = "#bcbcbc";
                  renderStar(_0x30e146, 0x3, _0x46ccb4.scale * 0.55, _0x46ccb4.scale * 0.65);
                  _0x30e146.fill();
                } else {
                  if (_0x46ccb4.name == "sapling") {
                    for (let _0x15c63f = 0x0; _0x15c63f < 0x2; ++_0x15c63f) {
                      let _0x1bb59d = _0x46ccb4.scale * (!_0x15c63f ? 0x1 : 0.5);
                      renderStar(_0x30e146, 0x7, _0x1bb59d, _0x1bb59d * 0.7);
                      _0x30e146.fillStyle = !_0x15c63f ? "#9ebf57" : "#b4db62";
                      _0x30e146.fill();
                      if (!_0x15c63f) {
                        _0x30e146.stroke();
                      }
                    }
                  } else {
                    if (_0x46ccb4.name == "pit trap") {
                      _0x30e146.fillStyle = "#a5974c";
                      renderStar(_0x30e146, 0x3, _0x46ccb4.scale * 1.1, _0x46ccb4.scale * 1.1);
                      _0x30e146.fill();
                      _0x30e146.stroke();
                      _0x30e146.fillStyle = "#525252";
                      renderStar(_0x30e146, 0x3, _0x46ccb4.scale * 0.65, _0x46ccb4.scale * 0.65);
                      _0x30e146.fill();
                    } else {
                      if (_0x46ccb4.name == "boost pad") {
                        _0x30e146.fillStyle = "#7e7f82";
                        renderRect(0x0, 0x0, _0x46ccb4.scale * 0x2, _0x46ccb4.scale * 0x2, _0x30e146);
                        _0x30e146.fill();
                        _0x30e146.stroke();
                        _0x30e146.fillStyle = "#dbd97d";
                        renderTriangle(_0x46ccb4.scale * 0x1, _0x30e146);
                      } else {
                        if (_0x46ccb4.name == "turret") {
                          _0x30e146.fillStyle = "#a5974c";
                          renderCircle(0x0, 0x0, _0x46ccb4.scale, _0x30e146);
                          _0x30e146.fill();
                          _0x30e146.stroke();
                          _0x30e146.fillStyle = "#939393";
                          renderRect(0x0, -25, _0x46ccb4.scale * 0.9, 0x32, _0x30e146);
                          renderCircle(0x0, 0x0, _0x46ccb4.scale * 0.6, _0x30e146);
                          _0x30e146.fill();
                          _0x30e146.stroke();
                        } else {
                          if (_0x46ccb4.name == "platform") {
                            _0x30e146.fillStyle = "#cebd5f";
                            let _0x1877a2 = _0x46ccb4.scale * 0x2;
                            let _0x4d8229 = _0x1877a2 / 0x4;
                            let _0x38ce51 = -(_0x46ccb4.scale / 0x2);
                            for (let _0x52a925 = 0x0; _0x52a925 < 0x4; ++_0x52a925) {
                              renderRect(_0x38ce51 - _0x4d8229 / 0x2, 0x0, _0x4d8229, _0x46ccb4.scale * 0x2, _0x30e146);
                              _0x30e146.fill();
                              _0x30e146.stroke();
                              _0x38ce51 += _0x1877a2 / 0x4;
                            }
                          } else {
                            if (_0x46ccb4.name == "healing pad") {
                              _0x30e146.fillStyle = "#7e7f82";
                              renderRect(0x0, 0x0, _0x46ccb4.scale * 0x2, _0x46ccb4.scale * 0x2, _0x30e146);
                              _0x30e146.fill();
                              _0x30e146.stroke();
                              _0x30e146.fillStyle = "#db6e6e";
                              renderRectCircle(0x0, 0x0, _0x46ccb4.scale * 0.65, 0x14, 0x4, _0x30e146, true);
                            } else {
                              if (_0x46ccb4.name == "spawn pad") {
                                _0x30e146.fillStyle = "#7e7f82";
                                renderRect(0x0, 0x0, _0x46ccb4.scale * 0x2, _0x46ccb4.scale * 0x2, _0x30e146);
                                _0x30e146.fill();
                                _0x30e146.stroke();
                                _0x30e146.fillStyle = "#71aad6";
                                renderCircle(0x0, 0x0, _0x46ccb4.scale * 0.6, _0x30e146);
                              } else {
                                if (_0x46ccb4.name == "blocker") {
                                  _0x30e146.fillStyle = "#7e7f82";
                                  renderCircle(0x0, 0x0, _0x46ccb4.scale, _0x30e146);
                                  _0x30e146.fill();
                                  _0x30e146.stroke();
                                  _0x30e146.rotate(Math.PI / 0x4);
                                  _0x30e146.fillStyle = "#db6e6e";
                                  renderRectCircle(0x0, 0x0, _0x46ccb4.scale * 0.65, 0x14, 0x4, _0x30e146, true);
                                } else if (_0x46ccb4.name == "teleporter") {
                                  _0x30e146.fillStyle = "#7e7f82";
                                  renderCircle(0x0, 0x0, _0x46ccb4.scale, _0x30e146);
                                  _0x30e146.fill();
                                  _0x30e146.stroke();
                                  _0x30e146.rotate(Math.PI / 0x4);
                                  _0x30e146.fillStyle = "#d76edb";
                                  renderCircle(0x0, 0x0, _0x46ccb4.scale * 0.5, _0x30e146, true);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _0x3e2c0e = _0x19997e;
    if (!_0x493aba) {
      itemSprites[_0x46ccb4.id] = _0x3e2c0e;
    }
  }
  return _0x3e2c0e;
}
function getItemSprite2(_0x3c3a9b, _0x3fccef, _0x6ff4b7) {
  let _0xb0f3ad = _0x3c3a9b.name == "windmill" ? items.list[0x4].scale : _0x3c3a9b.scale;
  mainContext.save();
  mainContext.translate(_0x3fccef, _0x6ff4b7);
  mainContext.rotate(_0x3c3a9b.dir);
  mainContext.strokeStyle = "#525252";
  mainContext.lineWidth = 5.5;
  if (_0x3c3a9b.name == "apple") {
    mainContext.fillStyle = "#c15555";
    renderCircle(0x0, 0x0, _0x3c3a9b.scale, mainContext);
    mainContext.fillStyle = "#89a54c";
    let _0x57f110 = -(Math.PI / 0x2);
    renderLeaf(_0x3c3a9b.scale * Math.cos(_0x57f110), _0x3c3a9b.scale * Math.sin(_0x57f110), 0x19, _0x57f110 + Math.PI / 0x2, mainContext);
  } else {
    if (_0x3c3a9b.name == "cookie") {
      mainContext.fillStyle = "#cca861";
      renderCircle(0x0, 0x0, _0x3c3a9b.scale, mainContext);
      mainContext.fillStyle = "#937c4b";
      let _0x26a0c0 = Math.PI * 0x2 / 0x4;
      let _0x11aa22;
      for (let _0x1a63a4 = 0x0; _0x1a63a4 < 0x4; ++_0x1a63a4) {
        _0x11aa22 = UTILS.randInt(_0x3c3a9b.scale / 2.5, _0x3c3a9b.scale / 1.7);
        renderCircle(_0x11aa22 * Math.cos(_0x26a0c0 * _0x1a63a4), _0x11aa22 * Math.sin(_0x26a0c0 * _0x1a63a4), UTILS.randInt(0x4, 0x5), mainContext, true);
      }
    } else {
      if (_0x3c3a9b.name == "cheese") {
        mainContext.fillStyle = "#f4f3ac";
        renderCircle(0x0, 0x0, _0x3c3a9b.scale, mainContext);
        mainContext.fillStyle = "#c3c28b";
        let _0x3f4bf1 = Math.PI * 0x2 / 0x4;
        let _0xa15f75;
        for (let _0x56d72a = 0x0; _0x56d72a < 0x4; ++_0x56d72a) {
          _0xa15f75 = UTILS.randInt(_0x3c3a9b.scale / 2.5, _0x3c3a9b.scale / 1.7);
          renderCircle(_0xa15f75 * Math.cos(_0x3f4bf1 * _0x56d72a), _0xa15f75 * Math.sin(_0x3f4bf1 * _0x56d72a), UTILS.randInt(0x4, 0x5), mainContext, true);
        }
      } else {
        if (_0x3c3a9b.name == "wood wall" || _0x3c3a9b.name == "stone wall" || _0x3c3a9b.name == "castle wall") {
          mainContext.fillStyle = _0x3c3a9b.name == "castle wall" ? "#83898e" : _0x3c3a9b.name == "wood wall" ? "#a5974c" : "#939393";
          let _0x824073 = _0x3c3a9b.name == "castle wall" ? 0x4 : 0x3;
          renderStar(mainContext, _0x824073, _0x3c3a9b.scale * 1.1, _0x3c3a9b.scale * 1.1);
          mainContext.fill();
          mainContext.stroke();
          mainContext.fillStyle = _0x3c3a9b.name == "castle wall" ? "#9da4aa" : _0x3c3a9b.name == "wood wall" ? "#c9b758" : "#bcbcbc";
          renderStar(mainContext, _0x824073, _0x3c3a9b.scale * 0.65, _0x3c3a9b.scale * 0.65);
          mainContext.fill();
        } else {
          if (_0x3c3a9b.name == "spikes" || _0x3c3a9b.name == "greater spikes" || _0x3c3a9b.name == "poison spikes" || _0x3c3a9b.name == "spinning spikes") {
            mainContext.fillStyle = _0x3c3a9b.name == "poison spikes" ? "#7b935d" : "#939393";
            let _0x1bd0d3 = _0x3c3a9b.scale * 0.6;
            renderStar(mainContext, _0x3c3a9b.name == "spikes" ? 0x5 : 0x6, _0x3c3a9b.scale, _0x1bd0d3);
            mainContext.fill();
            mainContext.stroke();
            mainContext.fillStyle = "#a5974c";
            renderCircle(0x0, 0x0, _0x1bd0d3, mainContext);
            mainContext.fillStyle = "#c9b758";
            renderCircle(0x0, 0x0, _0x1bd0d3 / 0x2, mainContext, true);
          } else {
            if (_0x3c3a9b.name == "windmill" || _0x3c3a9b.name == "faster windmill" || _0x3c3a9b.name == "power mill") {
              mainContext.fillStyle = "#a5974c";
              renderCircle(0x0, 0x0, _0xb0f3ad, mainContext);
              mainContext.fillStyle = "#c9b758";
              renderRectCircle(0x0, 0x0, _0xb0f3ad * 1.5, 0x1d, 0x4, mainContext);
              mainContext.fillStyle = "#a5974c";
              renderCircle(0x0, 0x0, _0xb0f3ad * 0.5, mainContext);
            } else {
              if (_0x3c3a9b.name == "mine") {
                mainContext.fillStyle = "#939393";
                renderStar(mainContext, 0x3, _0x3c3a9b.scale, _0x3c3a9b.scale);
                mainContext.fill();
                mainContext.stroke();
                mainContext.fillStyle = "#bcbcbc";
                renderStar(mainContext, 0x3, _0x3c3a9b.scale * 0.55, _0x3c3a9b.scale * 0.65);
                mainContext.fill();
              } else {
                if (_0x3c3a9b.name == "sapling") {
                  for (let _0x4df45a = 0x0; _0x4df45a < 0x2; ++_0x4df45a) {
                    let _0x840e1f = _0x3c3a9b.scale * (!_0x4df45a ? 0x1 : 0.5);
                    renderStar(mainContext, 0x7, _0x840e1f, _0x840e1f * 0.7);
                    mainContext.fillStyle = !_0x4df45a ? "#9ebf57" : "#b4db62";
                    mainContext.fill();
                    if (!_0x4df45a) {
                      mainContext.stroke();
                    }
                  }
                } else {
                  if (_0x3c3a9b.name == "pit trap") {
                    mainContext.fillStyle = "#a5974c";
                    renderStar(mainContext, 0x3, _0x3c3a9b.scale * 1.1, _0x3c3a9b.scale * 1.1);
                    mainContext.fill();
                    mainContext.stroke();
                    mainContext.fillStyle = "#525252";
                    renderStar(mainContext, 0x3, _0x3c3a9b.scale * 0.65, _0x3c3a9b.scale * 0.65);
                    mainContext.fill();
                  } else {
                    if (_0x3c3a9b.name == "boost pad") {
                      mainContext.fillStyle = "#7e7f82";
                      renderRect(0x0, 0x0, _0x3c3a9b.scale * 0x2, _0x3c3a9b.scale * 0x2, mainContext);
                      mainContext.fill();
                      mainContext.stroke();
                      mainContext.fillStyle = "#dbd97d";
                      renderTriangle(_0x3c3a9b.scale * 0x1, mainContext);
                    } else {
                      if (_0x3c3a9b.name == "turret") {
                        mainContext.fillStyle = "#a5974c";
                        renderCircle(0x0, 0x0, _0x3c3a9b.scale, mainContext);
                        mainContext.fill();
                        mainContext.stroke();
                        mainContext.fillStyle = "#939393";
                        renderRect(0x0, -25, _0x3c3a9b.scale * 0.9, 0x32, mainContext);
                        renderCircle(0x0, 0x0, _0x3c3a9b.scale * 0.6, mainContext);
                        mainContext.fill();
                        mainContext.stroke();
                      } else {
                        if (_0x3c3a9b.name == "platform") {
                          mainContext.fillStyle = "#cebd5f";
                          let _0x558261 = _0x3c3a9b.scale * 0x2;
                          let _0x170292 = _0x558261 / 0x4;
                          let _0x515392 = -(_0x3c3a9b.scale / 0x2);
                          for (let _0x5a0411 = 0x0; _0x5a0411 < 0x4; ++_0x5a0411) {
                            renderRect(_0x515392 - _0x170292 / 0x2, 0x0, _0x170292, _0x3c3a9b.scale * 0x2, mainContext);
                            mainContext.fill();
                            mainContext.stroke();
                            _0x515392 += _0x558261 / 0x4;
                          }
                        } else {
                          if (_0x3c3a9b.name == "healing pad") {
                            mainContext.fillStyle = "#7e7f82";
                            renderRect(0x0, 0x0, _0x3c3a9b.scale * 0x2, _0x3c3a9b.scale * 0x2, mainContext);
                            mainContext.fill();
                            mainContext.stroke();
                            mainContext.fillStyle = "#db6e6e";
                            renderRectCircle(0x0, 0x0, _0x3c3a9b.scale * 0.65, 0x14, 0x4, mainContext, true);
                          } else {
                            if (_0x3c3a9b.name == "spawn pad") {
                              mainContext.fillStyle = "#7e7f82";
                              renderRect(0x0, 0x0, _0x3c3a9b.scale * 0x2, _0x3c3a9b.scale * 0x2, mainContext);
                              mainContext.fill();
                              mainContext.stroke();
                              mainContext.fillStyle = "#71aad6";
                              renderCircle(0x0, 0x0, _0x3c3a9b.scale * 0.6, mainContext);
                            } else {
                              if (_0x3c3a9b.name == "blocker") {
                                mainContext.fillStyle = "#7e7f82";
                                renderCircle(0x0, 0x0, _0x3c3a9b.scale, mainContext);
                                mainContext.fill();
                                mainContext.stroke();
                                mainContext.rotate(Math.PI / 0x4);
                                mainContext.fillStyle = "#db6e6e";
                                renderRectCircle(0x0, 0x0, _0x3c3a9b.scale * 0.65, 0x14, 0x4, mainContext, true);
                              } else if (_0x3c3a9b.name == "teleporter") {
                                mainContext.fillStyle = "#7e7f82";
                                renderCircle(0x0, 0x0, _0x3c3a9b.scale, mainContext);
                                mainContext.fill();
                                mainContext.stroke();
                                mainContext.rotate(Math.PI / 0x4);
                                mainContext.fillStyle = "#d76edb";
                                renderCircle(0x0, 0x0, _0x3c3a9b.scale * 0.5, mainContext, true);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  mainContext.restore();
}
let objSprites = [];
function getObjSprite(_0x23aa05) {
  let _0x3a7069 = objSprites[_0x23aa05.id];
  if (!_0x3a7069) {
    let _0x30cfa0 = document.createElement("canvas");
    _0x30cfa0.width = _0x30cfa0.height = _0x23aa05.scale * 2.5 + 5.5 + (items.list[_0x23aa05.id].spritePadding || 0x0) + 0x0;
    let _0x103b39 = _0x30cfa0.getContext("2d");
    _0x103b39.translate(_0x30cfa0.width / 0x2, _0x30cfa0.height / 0x2);
    _0x103b39.rotate(Math.PI / 0x2);
    _0x103b39.strokeStyle = "#525252";
    _0x103b39.lineWidth = 5.5;
    if (_0x23aa05.name == "spikes" || _0x23aa05.name == "greater spikes" || _0x23aa05.name == "poison spikes" || _0x23aa05.name == "spinning spikes") {
      _0x103b39.fillStyle = _0x23aa05.name == "poison spikes" ? "#7b935d" : "#939393";
      let _0xa1feb0 = _0x23aa05.scale * 0.6;
      renderStar(_0x103b39, _0x23aa05.name == "spikes" ? 0x5 : 0x6, _0x23aa05.scale, _0xa1feb0);
      _0x103b39.fill();
      _0x103b39.stroke();
      _0x103b39.fillStyle = "#a5974c";
      renderCircle(0x0, 0x0, _0xa1feb0, _0x103b39);
      _0x103b39.fillStyle = "#cc5151";
      renderCircle(0x0, 0x0, _0xa1feb0 / 0x2, _0x103b39, true);
    } else if (_0x23aa05.name == "pit trap") {
      _0x103b39.fillStyle = "#a5974c";
      renderStar(_0x103b39, 0x3, _0x23aa05.scale * 1.1, _0x23aa05.scale * 1.1);
      _0x103b39.fill();
      _0x103b39.stroke();
      _0x103b39.fillStyle = "#cc5151";
      renderStar(_0x103b39, 0x3, _0x23aa05.scale * 0.65, _0x23aa05.scale * 0.65);
      _0x103b39.fill();
    }
    _0x3a7069 = _0x30cfa0;
    objSprites[_0x23aa05.id] = _0x3a7069;
  }
  return _0x3a7069;
}
function getMarkSprite(_0x43bc24, _0x3605c4, _0x4f8157, _0x31087d) {
  _0x3605c4.lineWidth = 5.5;
  mainContext.globalAlpha = 0.2;
  _0x3605c4.strokeStyle = "#525252";
  _0x3605c4.save();
  _0x3605c4.translate(_0x4f8157, _0x31087d);
  _0x3605c4.rotate(34867844010000000000);
  if (_0x43bc24.name == "spikes" || _0x43bc24.name == "greater spikes" || _0x43bc24.name == "poison spikes" || _0x43bc24.name == "spinning spikes") {
    _0x3605c4.fillStyle = _0x43bc24.name == "poison spikes" ? "#7b935d" : "#939393";
    var _0x11cec9 = _0x43bc24.scale;
    renderStar(_0x3605c4, _0x43bc24.name == "spikes" ? 0x5 : 0x6, _0x43bc24.scale, _0x11cec9);
    _0x3605c4.fill();
    _0x3605c4.stroke();
    _0x3605c4.fillStyle = "#a5974c";
    renderCircle(0x0, 0x0, _0x11cec9, _0x3605c4);
    if (player && _0x43bc24.owner && player.sid != _0x43bc24.owner.sid && !tmpObj.findAllianceBySid(_0x43bc24.owner.sid)) {
      _0x3605c4.fillStyle = "#a34040";
    } else {
      _0x3605c4.fillStyle = "#c9b758";
    }
    renderCircle(0x0, 0x0, _0x11cec9 / 0x2, _0x3605c4, true);
  } else {
    if (_0x43bc24.name == "turret") {
      renderCircle(0x0, 0x0, _0x43bc24.scale, _0x3605c4);
      _0x3605c4.fill();
      _0x3605c4.stroke();
      _0x3605c4.fillStyle = "#939393";
      renderRect(0x0, -25, _0x43bc24.scale * 0.9, 0x32, _0x3605c4);
      renderCircle(0x0, 0x0, _0x43bc24.scale * 0.6, _0x3605c4);
      _0x3605c4.fill();
      _0x3605c4.stroke();
    } else {
      if (_0x43bc24.name == "teleporter") {
        _0x3605c4.fillStyle = "#7e7f82";
        renderCircle(0x0, 0x0, _0x43bc24.scale, _0x3605c4);
        _0x3605c4.fill();
        _0x3605c4.stroke();
        _0x3605c4.rotate(Math.PI / 0x4);
        _0x3605c4.fillStyle = "#d76edb";
        renderCircle(0x0, 0x0, _0x43bc24.scale * 0.5, _0x3605c4, true);
      } else {
        if (_0x43bc24.name == "platform") {
          _0x3605c4.fillStyle = "#cebd5f";
          let _0x40a5db = _0x43bc24.scale * 0x2;
          let _0x12a980 = _0x40a5db / 0x4;
          let _0x5afe37 = -(_0x43bc24.scale / 0x2);
          for (let _0x206947 = 0x0; _0x206947 < 0x4; ++_0x206947) {
            renderRect(_0x5afe37 - _0x12a980 / 0x2, 0x0, _0x12a980, _0x43bc24.scale * 0x2, _0x3605c4);
            _0x3605c4.fill();
            _0x3605c4.stroke();
            _0x5afe37 += _0x40a5db / 0x4;
          }
        } else {
          if (_0x43bc24.name == "healing pad") {
            _0x3605c4.fillStyle = "#7e7f82";
            renderRect(0x0, 0x0, _0x43bc24.scale * 0x2, _0x43bc24.scale * 0x2, _0x3605c4);
            _0x3605c4.fill();
            _0x3605c4.stroke();
            _0x3605c4.fillStyle = "#db6e6e";
            renderRectCircle(0x0, 0x0, _0x43bc24.scale * 0.65, 0x14, 0x4, _0x3605c4, true);
          } else {
            if (_0x43bc24.name == "spawn pad") {
              _0x3605c4.fillStyle = "#7e7f82";
              renderRect(0x0, 0x0, _0x43bc24.scale * 0x2, _0x43bc24.scale * 0x2, _0x3605c4);
              _0x3605c4.fill();
              _0x3605c4.stroke();
              _0x3605c4.fillStyle = "#71aad6";
              renderCircle(0x0, 0x0, _0x43bc24.scale * 0.6, _0x3605c4);
            } else {
              if (_0x43bc24.name == "blocker") {
                _0x3605c4.fillStyle = "#7e7f82";
                renderCircle(0x0, 0x0, _0x43bc24.scale, _0x3605c4);
                _0x3605c4.fill();
                _0x3605c4.stroke();
                _0x3605c4.rotate(Math.PI / 0x4);
                _0x3605c4.fillStyle = "#db6e6e";
                renderRectCircle(0x0, 0x0, _0x43bc24.scale * 0.65, 0x14, 0x4, _0x3605c4, true);
              } else {
                if (_0x43bc24.name == "windmill" || _0x43bc24.name == "faster windmill" || _0x43bc24.name == "power mill") {
                  _0x3605c4.fillStyle = "#a5974c";
                  renderCircle(0x0, 0x0, _0x43bc24.scale, _0x3605c4);
                  _0x3605c4.fillStyle = "#c9b758";
                  renderRectCircle(0x0, 0x0, _0x43bc24.scale * 1.5, 0x1d, 0x4, _0x3605c4);
                  _0x3605c4.fillStyle = "#a5974c";
                  renderCircle(0x0, 0x0, _0x43bc24.scale * 0.5, _0x3605c4);
                } else if (_0x43bc24.name == "pit trap") {
                  _0x3605c4.fillStyle = "#a5974c";
                  renderStar(_0x3605c4, 0x3, _0x43bc24.scale * 1.1, _0x43bc24.scale * 1.1);
                  _0x3605c4.fill();
                  _0x3605c4.stroke();
                  if (player && _0x43bc24.owner && player.sid != _0x43bc24.owner.sid && !tmpObj.findAllianceBySid(_0x43bc24.owner.sid)) {
                    _0x3605c4.fillStyle = "#a34040";
                  } else {
                    _0x3605c4.fillStyle = "#525252";
                  }
                  renderStar(_0x3605c4, 0x3, _0x43bc24.scale * 0.65, _0x43bc24.scale * 0.65);
                  _0x3605c4.fill();
                }
              }
            }
          }
        }
      }
    }
  }
  _0x3605c4.restore();
}
function isOnScreen(_0x2eb272, _0x1e0865, _0x2cdb04) {
  return _0x2eb272 + _0x2cdb04 >= 0x0 && _0x2eb272 - _0x2cdb04 <= maxScreenWidth && _0x1e0865 + _0x2cdb04 >= 0x0 && (_0x1e0865, _0x2cdb04, maxScreenHeight);
}
function renderGameObjects(_0x3e84bc, _0x3f4529, _0x522134) {
  let _0x264e5a;
  let _0x137c36;
  let _0x30a382;
  liztobj.forEach(_0x5e5378 => {
    tmpObj = _0x5e5378;
    if (tmpObj.active && liztobj.includes(_0x5e5378) && tmpObj.render) {
      _0x137c36 = tmpObj.x + tmpObj.xWiggle - _0x3f4529;
      _0x30a382 = tmpObj.y + tmpObj.yWiggle - _0x522134;
      if (_0x3e84bc == 0x0) {
        tmpObj.update(delta);
      }
      mainContext.globalAlpha = tmpObj.alpha;
      if (tmpObj.layer == _0x3e84bc && isOnScreen(_0x137c36, _0x30a382, tmpObj.scale + (tmpObj.blocker || 0x0))) {
        if (tmpObj.isItem) {
          if ((tmpObj.dmg || tmpObj.trap) && !tmpObj.isTeamObject(player)) {
            _0x264e5a = getObjSprite(tmpObj);
          } else {
            _0x264e5a = getItemSprite(tmpObj);
          }
          mainContext.save();
          mainContext.translate(_0x137c36, _0x30a382);
          mainContext.rotate(tmpObj.dir);
          if (!tmpObj.active) {
            mainContext.scale(tmpObj.visScale / tmpObj.scale, tmpObj.visScale / tmpObj.scale);
          }
          mainContext.drawImage(_0x264e5a, -(_0x264e5a.width / 0x2), -(_0x264e5a.height / 0x2));
          if (tmpObj.blocker) {
            mainContext.strokeStyle = "#db6e6e";
            mainContext.globalAlpha = 0.3;
            mainContext.lineWidth = 0x6;
            renderCircle(0x0, 0x0, tmpObj.blocker, mainContext, false, true);
          }
          mainContext.restore();
        } else {
          _0x264e5a = getResSprite(tmpObj);
          mainContext.drawImage(_0x264e5a, _0x137c36 - _0x264e5a.width / 0x2, _0x30a382 - _0x264e5a.height / 0x2);
        }
      }
      if (_0x3e84bc == 0x3 && tmpObj.health < tmpObj.maxHealth) {
        mainContext.fillStyle = "#3d3f42";
        mainContext.roundRect(_0x137c36 - config.healthBarWidth / 0x2 - config.healthBarPad, _0x30a382 - config.healthBarPad, config.healthBarWidth + config.healthBarPad * 0x2, 0x11, 0x8);
        mainContext.fill();
        mainContext.fillStyle = tmpObj.isTeamObject(player) ? "#8ecc51" : "#cc5151";
        mainContext.roundRect(_0x137c36 - config.healthBarWidth / 0x2, _0x30a382, config.healthBarWidth * (tmpObj.health / tmpObj.maxHealth), 0x11 - config.healthBarPad * 0x2, 0x7);
        mainContext.fill();
      }
    }
  });
  if (_0x3e84bc == 0x0 && placeVisible.length) {
    placeVisible.forEach(_0x308f36 => {
      _0x137c36 = _0x308f36.x - _0x3f4529;
      _0x30a382 = _0x308f36.y - _0x522134;
      markObject(_0x308f36, _0x137c36, _0x30a382);
    });
  }
}
function markObject(_0x3104b9, _0x1c9ba0, _0x2a7840) {
  getMarkSprite(_0x3104b9, mainContext, _0x1c9ba0, _0x2a7840);
}
class MapPing {
  constructor(_0x2e3213, _0x40367a) {
    this.init = function (_0x1c5737, _0x15d809) {
      this.scale = 0x0;
      this.x = _0x1c5737;
      this.y = _0x15d809;
      this.active = true;
    };
    this.update = function (_0x311fe5, _0x228287) {
      if (this.active) {
        this.scale += 0.05 * _0x228287;
        if (this.scale >= _0x40367a) {
          this.active = false;
        } else {
          _0x311fe5.globalAlpha = 0x1 - Math.max(0x0, this.scale / _0x40367a);
          _0x311fe5.beginPath();
          _0x311fe5.arc(this.x / config.mapScale * mapDisplay.width, this.y / config.mapScale * mapDisplay.width, this.scale, 0x0, 0x2 * Math.PI);
          _0x311fe5.stroke();
        }
      }
    };
    this.color = _0x2e3213;
  }
}
function pingMap(_0x123df8, _0x44b230) {
  tmpPing = mapPings.find(_0x4a7754 => !_0x4a7754.active);
  if (!tmpPing) {
    tmpPing = new MapPing("#fff", config.mapPingScale);
    mapPings.push(tmpPing);
  }
  tmpPing.init(_0x123df8, _0x44b230);
}
function updateMapMarker() {
  mapMarker.x = player.x;
  mapMarker.y = player.y;
}
function renderMinimap(_0x4b09a0) {
  if (player && player.alive) {
    mapContext.clearRect(0x0, 0x0, mapDisplay.width, mapDisplay.height);
    mapContext.lineWidth = 0x4;
    for (let _0x17330d = 0x0; _0x17330d < mapPings.length; ++_0x17330d) {
      tmpPing = mapPings[_0x17330d];
      mapContext.strokeStyle = tmpPing.color;
      tmpPing.update(mapContext, _0x4b09a0);
    }
    mapContext.globalAlpha = 0x1;
    mapContext.fillStyle = "#ff0000";
    if (breakTrackers.length) {
      mapContext.fillStyle = "#abcdef";
      mapContext.font = "34px Hammersmith One";
      mapContext.textBaseline = "middle";
      mapContext.textAlign = "center";
      for (let _0x57be74 = 0x0; _0x57be74 < breakTrackers.length;) {
        mapContext.fillText("!", breakTrackers[_0x57be74].x / config.mapScale * mapDisplay.width, breakTrackers[_0x57be74].y / config.mapScale * mapDisplay.height);
        _0x57be74 += 0x2;
      }
    }
    mapContext.globalAlpha = 0x1;
    mapContext.fillStyle = "#fff";
    renderCircle(player.x / config.mapScale * mapDisplay.width, player.y / config.mapScale * mapDisplay.height, 0x7, mapContext, true);
    mapContext.fillStyle = "rgba(255,255,255,0.35)";
    if (player.team && minimapData) {
      for (let _0x57db5e = 0x0; _0x57db5e < minimapData.length;) {
        renderCircle(minimapData[_0x57db5e] / config.mapScale * mapDisplay.width, minimapData[_0x57db5e + 0x1] / config.mapScale * mapDisplay.height, 0x7, mapContext, true);
        _0x57db5e += 0x2;
      }
    }
    if (bots.length) {
      bots.forEach(_0x268913 => {
        if (_0x268913.inGame) {
          mapContext.globalAlpha = 0x1;
          mapContext.strokeStyle = "#cc5151";
          renderCircle(_0x268913.x2 / config.mapScale * mapDisplay.width, _0x268913.y2 / config.mapScale * mapDisplay.height, 0x7, mapContext, false, true);
        }
      });
    }
    if (lastDeath) {
      mapContext.fillStyle = "#fc5553";
      mapContext.font = "34px Hammersmith One";
      mapContext.textBaseline = "middle";
      mapContext.textAlign = "center";
      mapContext.fillText("x", lastDeath.x / config.mapScale * mapDisplay.width, lastDeath.y / config.mapScale * mapDisplay.height);
    }
    if (mapMarker) {
      mapContext.fillStyle = "#fff";
      mapContext.font = "34px Hammersmith One";
      mapContext.textBaseline = "middle";
      mapContext.textAlign = "center";
      mapContext.fillText("x", mapMarker.x / config.mapScale * mapDisplay.width, mapMarker.y / config.mapScale * mapDisplay.height);
    }
  }
}
let crossHairs = ["https://upload.wikimedia.org/wikipedia/commons/9/95/Crosshairs_Red.svg", "https://upload.wikimedia.org/wikipedia/commons/9/95/Crosshairs_Red.svg"];
let crossHairSprites = {};
let iconSprites = {};
let icons = ["crown", "skull"];
function loadIcons() {
  for (let _0x1eb4ca = 0x0; _0x1eb4ca < icons.length; ++_0x1eb4ca) {
    let _0x1f4f09 = new Image();
    _0x1f4f09.onload = function () {
      this.isLoaded = true;
    };
    _0x1f4f09.src = "./../img/icons/" + icons[_0x1eb4ca] + ".png";
    iconSprites[icons[_0x1eb4ca]] = _0x1f4f09;
  }
  for (let _0x1098df = 0x0; _0x1098df < crossHairs.length; ++_0x1098df) {
    let _0x471820 = new Image();
    _0x471820.onload = function () {
      this.isLoaded = true;
    };
    _0x471820.src = crossHairs[_0x1098df];
    crossHairSprites[_0x1098df] = _0x471820;
  }
}
loadIcons();
function cdf(_0x487906, _0x2a3412) {
  try {
    return Math.hypot(_0x2a3412.y2t.y - _0x487906.y2e.y, _0x2a3412.x2t.x - _0x487906.x2e.x);
  } catch (_0x54bd71) {
    return Infinity;
  }
}
function updateGame() {
  if (gameObjects.length && inGame) {
    gameObjects.forEach(_0x1e7d4f => {
      if (UTILS.getDistance(_0x1e7d4f.x, _0x1e7d4f.y, player.x, player.y) <= 0x4b0) {
        if (!liztobj.includes(_0x1e7d4f)) {
          liztobj.push(_0x1e7d4f);
          _0x1e7d4f.render = true;
        }
      } else {
        if (liztobj.includes(_0x1e7d4f)) {
          if (UTILS.getDistance(_0x1e7d4f.x, _0x1e7d4f.y, player.x, player.y) >= 0x4b0) {
            _0x1e7d4f.render = false;
            const _0x18008d = liztobj.indexOf(_0x1e7d4f);
            if (_0x18008d > -0x1) {
              liztobj.splice(_0x18008d, 0x1);
            }
          }
        } else {
          if (UTILS.getDistance(_0x1e7d4f.x, _0x1e7d4f.y, player.x, player.y) >= 0x4b0) {
            _0x1e7d4f.render = false;
            const _0x574e01 = liztobj.indexOf(_0x1e7d4f);
            if (_0x574e01 > -0x1) {
              liztobj.splice(_0x574e01, 0x1);
            }
          } else {
            _0x1e7d4f.render = false;
            const _0x5336fd = liztobj.indexOf(_0x1e7d4f);
            if (_0x5336fd > -0x1) {
              liztobj.splice(_0x5336fd, 0x1);
            }
          }
        }
      }
    });
  }
  mainContext.beginPath();
  mainContext.clearRect(0x0, 0x0, gameCanvas.width, gameCanvas.height);
  mainContext.globalAlpha = 0x1;
  if (player) {
    let _0x34d109 = UTILS.getDistance(camX, camY, player.x, player.y);
    let _0x44fd2b = UTILS.getDirection(player.x, player.y, camX, camY);
    let _0x24c9d6 = Math.min(_0x34d109 * 0.0045 * delta, _0x34d109);
    if (_0x34d109 > 0.05) {
      camX += _0x24c9d6 * Math.cos(_0x44fd2b);
      camY += _0x24c9d6 * Math.sin(_0x44fd2b);
    } else {
      camX = player.x;
      camY = player.y;
    }
  } else {
    camX = config.mapScale / 0x2 + config.riverWidth;
    camY = config.mapScale / 0x2;
  }
  let _0x10251e = now - 0x3e8 / config.serverUpdateRate;
  let _0x4a7a06;
  for (let _0x19273b = 0x0; _0x19273b < players.length + ais.length; ++_0x19273b) {
    tmpObj = players[_0x19273b] || ais[_0x19273b - players.length];
    if (tmpObj && tmpObj.visible) {
      if (tmpObj.forcePos) {
        tmpObj.x = tmpObj.x2;
        tmpObj.y = tmpObj.y2;
        tmpObj.dir = tmpObj.d2;
      } else {
        let _0x512342 = tmpObj.t2 - tmpObj.t1;
        let _0x41ccf0 = _0x10251e - tmpObj.t1;
        let _0x31e96c = _0x41ccf0 / _0x512342;
        tmpObj.dt += delta;
        let _0x1580fd = Math.min(1.7, tmpObj.dt / 0xaa);
        _0x4a7a06 = tmpObj.x2 - tmpObj.x1;
        tmpObj.x = tmpObj.x1 + _0x4a7a06 * _0x1580fd;
        _0x4a7a06 = tmpObj.y2 - tmpObj.y1;
        tmpObj.y = tmpObj.y1 + _0x4a7a06 * _0x1580fd;
        if (config.anotherVisual) {
          tmpObj.dir = Math.lerpAngle(tmpObj.d2, tmpObj.d1, Math.min(1.2, _0x31e96c));
        } else {
          tmpObj.dir = Math.lerpAngle(tmpObj.d2, tmpObj.d1, Math.min(1.2, _0x31e96c));
        }
      }
    }
  }
  let _0x1f2649 = camX - maxScreenWidth / 0x2;
  let _0x130dc5 = camY - maxScreenHeight / 0x2;
  if (config.snowBiomeTop - _0x130dc5 <= 0x0 && config.mapScale - config.snowBiomeTop - _0x130dc5 >= maxScreenHeight) {
    mainContext.fillStyle = "#b6db66";
    mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
  } else {
    if (config.mapScale - config.snowBiomeTop - _0x130dc5 <= 0x0) {
      mainContext.fillStyle = "#dbc666";
      mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
    } else {
      if (config.snowBiomeTop - _0x130dc5 >= maxScreenHeight) {
        mainContext.fillStyle = "#fff";
        mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
      } else if (config.snowBiomeTop - _0x130dc5 >= 0x0) {
        mainContext.fillStyle = "#fff";
        mainContext.fillRect(0x0, 0x0, maxScreenWidth, config.snowBiomeTop - _0x130dc5);
        mainContext.fillStyle = "#b6db66";
        mainContext.fillRect(0x0, config.snowBiomeTop - _0x130dc5, maxScreenWidth, maxScreenHeight - (config.snowBiomeTop - _0x130dc5));
      } else {
        mainContext.fillStyle = "#b6db66";
        mainContext.fillRect(0x0, 0x0, maxScreenWidth, config.mapScale - config.snowBiomeTop - _0x130dc5);
        mainContext.fillStyle = "#dbc666";
        mainContext.fillRect(0x0, config.mapScale - config.snowBiomeTop - _0x130dc5, maxScreenWidth, maxScreenHeight - (config.mapScale - config.snowBiomeTop - _0x130dc5));
      }
    }
  }
  if (!firstSetup) {
    waterMult += waterPlus * config.waveSpeed * delta;
    if (waterMult >= config.waveMax) {
      waterMult = config.waveMax;
      waterPlus = -0x1;
    } else if (waterMult <= 0x1) {
      waterMult = waterPlus = 0x1;
    }
    mainContext.globalAlpha = 0x1;
    mainContext.fillStyle = "#dbc666";
    renderWaterBodies(_0x1f2649, _0x130dc5, mainContext, config.riverPadding);
    mainContext.fillStyle = "#91b2db";
    renderWaterBodies(_0x1f2649, _0x130dc5, mainContext, (waterMult - 0x1) * 0xfa);
  }
  mainContext.globalAlpha = 0x1;
  mainContext.strokeStyle = "#525252";
  renderDeadPlayers(_0x1f2649, _0x130dc5);
  mainContext.globalAlpha = 0x1;
  mainContext.strokeStyle = "#525252";
  renderGameObjects(-0x1, _0x1f2649, _0x130dc5);
  mainContext.globalAlpha = 0x1;
  mainContext.lineWidth = 5.5;
  renderProjectiles(0x0, _0x1f2649, _0x130dc5);
  renderPlayers(_0x1f2649, _0x130dc5, 0x0);
  mainContext.globalAlpha = 0x1;
  for (let _0x283d5c = 0x0; _0x283d5c < ais.length; ++_0x283d5c) {
    tmpObj = ais[_0x283d5c];
    if (tmpObj.active && tmpObj.visible) {
      tmpObj.animate(delta);
      mainContext.save();
      mainContext.translate(tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5);
      mainContext.rotate(tmpObj.dir + tmpObj.dirPlus - Math.PI / 0x2);
      renderAI(tmpObj, mainContext);
      mainContext.restore();
    }
  }
  renderGameObjects(0x0, _0x1f2649, _0x130dc5);
  renderProjectiles(0x1, _0x1f2649, _0x130dc5);
  renderGameObjects(0x1, _0x1f2649, _0x130dc5);
  renderPlayers(_0x1f2649, _0x130dc5, 0x1);
  renderGameObjects(0x2, _0x1f2649, _0x130dc5);
  renderGameObjects(0x3, _0x1f2649, _0x130dc5);
  mainContext.fillStyle = "#000";
  mainContext.globalAlpha = 0.09;
  if (_0x1f2649 <= 0x0) {
    mainContext.fillRect(0x0, 0x0, -_0x1f2649, maxScreenHeight);
  }
  if (config.mapScale - _0x1f2649 <= maxScreenWidth) {
    let _0x31b70e = Math.max(0x0, -_0x130dc5);
    mainContext.fillRect(config.mapScale - _0x1f2649, _0x31b70e, maxScreenWidth - (config.mapScale - _0x1f2649), maxScreenHeight - _0x31b70e);
  }
  if (_0x130dc5 <= 0x0) {
    mainContext.fillRect(-_0x1f2649, 0x0, maxScreenWidth + _0x1f2649, -_0x130dc5);
  }
  if (config.mapScale - _0x130dc5 <= maxScreenHeight) {
    let _0x3f13b1 = Math.max(0x0, -_0x1f2649);
    let _0x497089 = 0x0;
    if (config.mapScale - _0x1f2649 <= maxScreenWidth) {
      _0x497089 = maxScreenWidth - (config.mapScale - _0x1f2649);
    }
    mainContext.fillRect(_0x3f13b1, config.mapScale - _0x130dc5, maxScreenWidth - _0x3f13b1 - _0x497089, maxScreenHeight - (config.mapScale - _0x130dc5));
  }
  mainContext.globalAlpha = 0x1;
  mainContext.fillStyle = "rgba(0, 5, 80, 0.35)";
  mainContext.fillRect(0x0, 0x0, maxScreenWidth, maxScreenHeight);
  mainContext.strokeStyle = "#3d3f42";
  mainContext.globalAlpha = 0x1;
  for (let _0x235064 = 0x0; _0x235064 < players.length + ais.length; ++_0x235064) {
    tmpObj = players[_0x235064] || ais[_0x235064 - players.length];
    if (tmpObj.visible) {
      mainContext.strokeStyle = "#3d3f42";
      if (1 && document.getElementById("weaponRange").checked && tmpObj.isPlayer && (tmpObj.weaponIndex < 0x9 || tmpObj.weaponIndex == 0xa || tmpObj.weaponIndex == 0xe)) {
        mainContext.beginPath();
        mainContext.arc(tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5, tmpObj.scale + items.weapons[tmpObj.weaponIndex].range, tmpObj.dir - Math.PI / 0x2, tmpObj.dir + Math.PI / 0x2);
        mainContext.globalAlpha = 0.1;
        mainContext.fillStyle = "#f5f5f5";
        mainContext.fill();
        mainContext.beginPath();
        mainContext.arc(tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5, tmpObj.scale + items.weapons[tmpObj.weaponIndex].range + 0x2, tmpObj.dir - Math.PI / 0x2, tmpObj.dir + Math.PI / 0x2);
        mainContext.strokeStyle = "black";
        mainContext.lineWidth = 0x5;
        mainContext.stroke();
      }
      mainContext.globalAlpha = 0x1;
      if (tmpObj.skinIndex != 0xa || tmpObj == player || tmpObj.team && tmpObj.team == player.team) {
        let _0x2d420b = (tmpObj.team ? "[" + tmpObj.team + "] " : "") + (tmpObj.name || "");
        if (_0x2d420b != "") {
          mainContext.font = (tmpObj.nameScale || 0x1e) + "px Hammersmith One";
          mainContext.fillStyle = "#fff";
          mainContext.textBaseline = "middle";
          mainContext.textAlign = "center";
          mainContext.lineWidth = tmpObj.nameScale ? 0xb : 0x8;
          mainContext.lineJoin = "round";
          mainContext.strokeText(_0x2d420b, tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5 - tmpObj.scale - config.nameY);
          mainContext.fillText(_0x2d420b, tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5 - tmpObj.scale - config.nameY);
          if (tmpObj.isLeader && iconSprites.crown.isLoaded) {
            let _0x3c0f05 = config.crownIconScale;
            let _0x444f90 = tmpObj.x - _0x1f2649 - _0x3c0f05 / 0x2 - mainContext.measureText(_0x2d420b).width / 0x2 - config.crownPad;
            mainContext.drawImage(iconSprites.crown, _0x444f90, tmpObj.y - _0x130dc5 - tmpObj.scale - config.nameY - _0x3c0f05 / 0x2 - 0x5, _0x3c0f05, _0x3c0f05);
          }
          if (tmpObj.iconIndex == 0x1 && iconSprites.skull.isLoaded) {
            let _0x7247d1 = config.crownIconScale;
            let _0x30ce6e = tmpObj.x - _0x1f2649 - _0x7247d1 / 0x2 + mainContext.measureText(_0x2d420b).width / 0x2 + config.crownPad;
            mainContext.drawImage(iconSprites.skull, _0x30ce6e, tmpObj.y - _0x130dc5 - tmpObj.scale - config.nameY - _0x7247d1 / 0x2 - 0x5, _0x7247d1, _0x7247d1);
          }
          if (tmpObj.isPlayer && instaC.wait && near == tmpObj && (tmpObj.backupNobull ? crossHairSprites[0x1].isLoaded : crossHairSprites[0x0].isLoaded) && enemy.length && !useWasd) {
            let _0x479085 = tmpObj.scale * 2.2;
            mainContext.drawImage(tmpObj.backupNobull ? crossHairSprites[0x1] : crossHairSprites[0x0], tmpObj.x - _0x1f2649 - _0x479085 / 0x2, tmpObj.y - _0x130dc5 - _0x479085 / 0x2, _0x479085, _0x479085);
          }
        }
        if (tmpObj.health > 0x0) {
          mainContext.fillStyle = "#3d3f42";
          mainContext.roundRect(tmpObj.x - _0x1f2649 - config.healthBarWidth - config.healthBarPad, tmpObj.y - _0x130dc5 + tmpObj.scale + config.nameY, config.healthBarWidth * 0x2 + config.healthBarPad * 0x2, 0x11, 0x8);
          mainContext.fill();
          mainContext.fillStyle = tmpObj == player || tmpObj.team && tmpObj.team == player.team ? "#8ecc51" : "#cc5151";
          mainContext.roundRect(tmpObj.x - _0x1f2649 - config.healthBarWidth, tmpObj.y - _0x130dc5 + tmpObj.scale + config.nameY + config.healthBarPad, config.healthBarWidth * 0x2 * (tmpObj.health / tmpObj.maxHealth), 0x11 - config.healthBarPad * 0x2, 0x7);
          mainContext.fill();
        }
        if (tmpObj.isPlayer) {
          mainContext.globalAlpha = 0x1;
          let _0xd5becd = {
            primary: tmpObj.primaryIndex == undefined ? 0x1 : (items.weapons[tmpObj.primaryIndex].speed - tmpObj.reloads[tmpObj.primaryIndex]) / items.weapons[tmpObj.primaryIndex].speed,
            secondary: tmpObj.secondaryIndex == undefined ? 0x1 : (items.weapons[tmpObj.secondaryIndex].speed - tmpObj.reloads[tmpObj.secondaryIndex]) / items.weapons[tmpObj.secondaryIndex].speed,
            turret: (0x9c4 - tmpObj.reloads[0x35]) / 0x9c4
          };
          if (!tmpObj.currentReloads) {
            tmpObj.currentReloads = {
              primary: _0xd5becd.primary,
              secondary: _0xd5becd.secondary,
              turret: _0xd5becd.turret
            };
          }
          tmpObj.currentReloads.primary = 0.7 * tmpObj.currentReloads.primary + 0.3 * _0xd5becd.primary;
          tmpObj.currentReloads.secondary = 0.7 * tmpObj.currentReloads.secondary + 0.3 * _0xd5becd.secondary;
          tmpObj.currentReloads.turret = 0.7 * tmpObj.currentReloads.turret + 0.3 * _0xd5becd.turret;
          const _0x570120 = tmpObj.x - _0x1f2649;
          const _0x265374 = tmpObj.y - _0x130dc5;
          const _0xfbc943 = Math.PI * 0x2 / 0x3;
          const _0x481f45 = -Math.PI / 0x2 + Math.PI / 0x3 + tmpObj.dir - Math.PI / 0x2;
          const _0x1a8e51 = _0x481f45 + _0xfbc943 * tmpObj.currentReloads.secondary;
          const _0x4f5f16 = Math.PI / 0x2 + tmpObj.dir - Math.PI / 0x2;
          const _0x5aea77 = _0x4f5f16 + _0xfbc943 * tmpObj.currentReloads.primary;
          const _0x558630 = Math.PI + Math.PI / 4.5 + tmpObj.dir - Math.PI / 0x2;
          const _0x13af5a = _0x558630 + _0xfbc943 / 1.25 * tmpObj.currentReloads.turret;
          function _0x551e6c(_0x11d9f9) {
            return "#d6d6d6";
          }
          mainContext.save();
          if (tmpObj.currentReloads.primary < 0.999) {
            mainContext.beginPath();
            mainContext.lineCap = "round";
            mainContext.arc(_0x570120, _0x265374, 0x23, _0x4f5f16, _0x5aea77);
            mainContext.lineWidth = 0x4;
            mainContext.strokeStyle = "#d6d6d6";
            mainContext.stroke();
          }
          if (tmpObj.currentReloads.secondary < 0.999) {
            mainContext.beginPath();
            mainContext.lineCap = "round";
            mainContext.arc(_0x570120, _0x265374, 0x23, _0x481f45, _0x1a8e51);
            mainContext.lineWidth = 0x4;
            mainContext.strokeStyle = "#d6d6d6";
            mainContext.stroke();
          }
          if (tmpObj.currentReloads.turret < 0.999) {
            mainContext.beginPath();
            mainContext.lineCap = "round";
            mainContext.arc(_0x570120, _0x265374, 0x23, _0x558630, _0x13af5a);
            mainContext.lineWidth = 0x4;
            mainContext.strokeStyle = "#d6d6d6";
            mainContext.stroke();
          }
          mainContext.restore();
          if (tmpObj.name != "unknown1l") {
            mainContext.font = (tmpObj.nameScale || 0x1e) + "px Hammersmith One";
            mainContext.fillStyle = tmpObj.shameCount < tmpObj.dangerShame ? "#8ecc51" : "#cc5151";
            mainContext.textBaseline = "middle";
            mainContext.textAlign = "center";
            mainContext.lineWidth = tmpObj.nameScale ? 0xb : 0x8;
            mainContext.lineJoin = "round";
            var _0xa8fb5a = config.crownIconScale;
            var _0x275041 = tmpObj.x - _0x1f2649 - _0xa8fb5a / 0x2 + mainContext.measureText(_0x2d420b).width / 0x2 + config.crownPad + (tmpObj.iconIndex == 0x1 ? (tmpObj.nameScale || 0x1e) * 2.75 : tmpObj.nameScale || 0x1e);
            mainContext.strokeText(tmpObj.shameCount, _0x275041, tmpObj.y - _0x130dc5 - tmpObj.scale - config.nameY);
            mainContext.fillText(tmpObj.shameCount, _0x275041, tmpObj.y - _0x130dc5 - tmpObj.scale - config.nameY);
          }
          var _0xb50adc = config.healthBarWidth;
          mainContext.fillStyle = "#3d3f42";
          mainContext.roundRect(tmpObj.x - _0x1f2649 - config.healthBarWidth - config.healthBarPad + 0x32, tmpObj.y - _0x130dc5 + tmpObj.scale + config.nameY - 0xd, config.healthBarWidth + config.healthBarPad * 0x2, 0x11, 0x8);
          mainContext.fill();
          mainContext.fillStyle = "yellow";
          mainContext.roundRect(tmpObj.x - _0x1f2649 - config.healthBarWidth + 0x32, tmpObj.y - _0x130dc5 + tmpObj.scale + config.nameY - 0xd + config.healthBarPad, config.healthBarWidth * (tmpObj.reloads[tmpObj.secondaryIndex] == undefined ? 0x1 : (items.weapons[tmpObj.secondaryIndex].speed - tmpObj.reloads[tmpObj.secondaryIndex]) / items.weapons[tmpObj.secondaryIndex].speed), 0x11 - config.healthBarPad * 0x2, 0x7);
          mainContext.fill();
          mainContext.fillStyle = "#3d3f42";
          mainContext.roundRect(tmpObj.x - _0x1f2649 - config.healthBarWidth - config.healthBarPad, tmpObj.y - _0x130dc5 + tmpObj.scale + config.nameY - 0xd, config.healthBarWidth + config.healthBarPad * 0x2, 0x11, 0x8);
          mainContext.fill();
          mainContext.fillStyle = "yellow";
          mainContext.roundRect(tmpObj.x - _0x1f2649 - config.healthBarWidth, tmpObj.y - _0x130dc5 + tmpObj.scale + config.nameY - 0xd + config.healthBarPad, config.healthBarWidth * _0xd5becd.primary, 0x11 - config.healthBarPad * 0x2, 0x7);
          mainContext.fill();
          if (!tmpObj.isTeam(player)) {
            let _0x3fa45d = {
              x: screenWidth / 0x2,
              y: screenHeight / 0x2
            };
            let _0x380c29 = Math.min(0x1, UTILS.getDistance(0x0, 0x0, player.x - tmpObj.x, (player.y - tmpObj.y) * 1.7777777777777777) * 0x64 / (config.maxScreenHeight / 0x2) / _0x3fa45d.y);
            let _0xe0ed9c = _0x3fa45d.y * _0x380c29 / 0x2;
            let _0x4f94c2 = _0xe0ed9c * Math.cos(UTILS.getDirect(tmpObj, player, 0x0, 0x0));
            let _0x53495f = _0xe0ed9c * Math.sin(UTILS.getDirect(tmpObj, player, 0x0, 0x0));
            mainContext.save();
            mainContext.translate(player.x - _0x1f2649 + _0x4f94c2, player.y - _0x130dc5 + _0x53495f);
            mainContext.rotate(tmpObj.aim2 + Math.PI / 0x2);
            let _0x50f0a9 = 0xff - tmpObj.sid * 0x2;
            mainContext.fillStyle = "rgb(" + _0x50f0a9 + ", " + _0x50f0a9 + ", " + _0x50f0a9 + ")";
            mainContext.globalAlpha = _0x380c29;
            let _0x5e25be = function (_0x51dc7f, _0x3e229d) {
              _0x3e229d = _0x3e229d || mainContext;
              let _0x4e6f8a = _0x51dc7f * (Math.sqrt(0x3) / 0x2);
              _0x3e229d.beginPath();
              _0x3e229d.moveTo(0x0, -_0x4e6f8a / 1.5);
              _0x3e229d.lineTo(-_0x51dc7f / 0x2, _0x4e6f8a / 0x2);
              _0x3e229d.lineTo(_0x51dc7f / 0x2, _0x4e6f8a / 0x2);
              _0x3e229d.lineTo(0x0, -_0x4e6f8a / 1.5);
              _0x3e229d.fill();
              _0x3e229d.closePath();
            };
            _0x5e25be(0x19, mainContext);
            mainContext.restore();
          }
          if (document.getElementById("predictType").value == "pre2") {
            mainContext.lineWidth = 0x3;
            mainContext.strokeStyle = "#fff";
            mainContext.globalAlpha = 0x1;
            mainContext.beginPath();
            let _0x2e0ddf = {
              x: tmpObj.x2 - _0x1f2649,
              y: tmpObj.y2 - _0x130dc5
            };
            mainContext.moveTo(tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5);
            mainContext.lineTo(_0x2e0ddf.x, _0x2e0ddf.y);
            mainContext.stroke();
          } else {
            if (document.getElementById("predictType").value == "pre3") {
              mainContext.lineWidth = 0x3;
              mainContext.strokeStyle = "#cc5151";
              mainContext.globalAlpha = 0x1;
              mainContext.beginPath();
              let _0x534ef1 = {
                x: tmpObj.x3 - _0x1f2649,
                y: tmpObj.y3 - _0x130dc5
              };
              mainContext.moveTo(tmpObj.x - _0x1f2649, tmpObj.y - _0x130dc5);
              mainContext.lineTo(_0x534ef1.x, _0x534ef1.y);
              mainContext.stroke();
            }
          }
        }
      }
      if (player && false) {
        mainContext.lineWidth = 0xa;
        mainContext.strokeStyle = "white";
        mainContext.beginPath();
        mainContext.moveTo(player.x - _0x1f2649, player.y - _0x130dc5);
        mainContext.lineTo(my.pushData.x - _0x1f2649, my.pushData.y - _0x130dc5);
        mainContext.stroke();
      }
    }
  }
  mainContext.globalAlpha = 0x1;
  textManager.update(delta, mainContext, _0x1f2649, _0x130dc5);
  for (let _0x20b2d0 = 0x0; _0x20b2d0 < players.length; ++_0x20b2d0) {
    tmpObj = players[_0x20b2d0];
    if (tmpObj.visible) {
      if (tmpObj.chatCountdown > 0x0) {
        tmpObj.chatCountdown -= delta;
        if (tmpObj.chatCountdown <= 0x0) {
          tmpObj.chatCountdown = 0x0;
        }
        mainContext.font = "32px Hammersmith One";
        let _0x12729d = mainContext.measureText(tmpObj.chatMessage);
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        let _0x190d1f = tmpObj.x - _0x1f2649;
        let _0x415ad1 = tmpObj.y - tmpObj.scale - _0x130dc5 - 0x5a;
        let _0x2c10e6 = _0x12729d.width + 0x11;
        mainContext.fillStyle = "rgba(0,0,0,0.2)";
        mainContext.roundRect(_0x190d1f - _0x2c10e6 / 0x2, _0x415ad1 - 23.5, _0x2c10e6, 0x2f, 0x6);
        mainContext.fill();
        mainContext.fillStyle = "#fff";
        mainContext.fillText(tmpObj.chatMessage, _0x190d1f, _0x415ad1);
      }
      if (tmpObj.chat.count > 0x0) {
        tmpObj.chat.count -= delta;
        if (tmpObj.chat.count <= 0x0) {
          tmpObj.chat.count = 0x0;
        }
        mainContext.font = "32px Hammersmith One";
        let _0x41663b = mainContext.measureText(tmpObj.chat.message);
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        let _0x137312 = tmpObj.x - _0x1f2649;
        let _0x96cd57 = tmpObj.y - tmpObj.scale - _0x130dc5 + 180;
        let _0x4ffdbc = _0x41663b.width + 0x11;
        mainContext.fillStyle = "rgba(0,0,0,0.2)";
        mainContext.roundRect(_0x137312 - _0x4ffdbc / 0x2, _0x96cd57 - 23.5, _0x4ffdbc, 0x2f, 0x6);
        mainContext.fill();
        mainContext.fillStyle = "#ffffff99";
        mainContext.fillText(tmpObj.chat.message, _0x137312, _0x96cd57);
      } else {
        tmpObj.chat.count = 0x0;
      }
    }
  }
  if (allChats.length) {
    allChats.filter(_0x3d20a0 => _0x3d20a0.active).forEach(_0x4c2513 => {
      if (!_0x4c2513.alive) {
        if (_0x4c2513.alpha <= 0x1) {
          _0x4c2513.alpha += delta / 0xfa;
          if (_0x4c2513.alpha >= 0x1) {
            _0x4c2513.alpha = 0x1;
            _0x4c2513.alive = true;
          }
        }
      } else {
        _0x4c2513.alpha -= delta / 0x1388;
        if (_0x4c2513.alpha <= 0x0) {
          _0x4c2513.alpha = 0x0;
          _0x4c2513.active = false;
        }
      }
      if (_0x4c2513.active) {
        mainContext.font = "20px Ubuntu";
        let _0x38628d = mainContext.measureText(_0x4c2513.chat);
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        let _0x4625d5 = _0x4c2513.x - _0x1f2649;
        let _0x2abf1c = _0x4c2513.y - _0x130dc5 - 0x5a;
        let _0x1d1fda = _0x38628d.width + 0xf;
        mainContext.globalAlpha = _0x4c2513.alpha;
        mainContext.fillStyle = _0x4c2513.owner.isTeam(player) ? "#8ecc51" : "#cc5151";
        mainContext.strokeStyle = "rgb(25, 25, 25)";
        mainContext.strokeText(_0x4c2513.owner.name, _0x4625d5, _0x2abf1c - 0x2d);
        mainContext.fillText(_0x4c2513.owner.name, _0x4625d5, _0x2abf1c - 0x2d);
        mainContext.lineWidth = 0x5;
        mainContext.fillStyle = "#ccc";
        mainContext.strokeStyle = "rgb(25, 25, 25)";
        mainContext.roundRect(_0x4625d5 - _0x1d1fda / 0x2, _0x2abf1c - 20, _0x1d1fda, 0x28, 0x6);
        mainContext.stroke();
        mainContext.fill();
        mainContext.fillStyle = "#fff";
        mainContext.strokeStyle = "#000";
        mainContext.strokeText(_0x4c2513.chat, _0x4625d5, _0x2abf1c);
        mainContext.fillText(_0x4c2513.chat, _0x4625d5, _0x2abf1c);
        _0x4c2513.y -= delta / 0x64;
      }
    });
  }
  renderMinimap(delta);
}
window.requestAnimFrame = function () {
  return null;
};
window.rAF = function () {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (_0x2e14ca) {
    window.setTimeout(_0x2e14ca, 111.11111111111111);
  };
}();
function doUpdate() {
  now = performance.now();
  delta = now - lastUpdate;
  lastUpdate = now;
  let _0x1a5082 = performance.now();
  let _0x184686 = _0x1a5082 - 0x0;
  if (_0x184686 >= 0x3e8) {
    fpsTimer.ltime = 0x0 * (0x3e8 / _0x184686);
    fpsTimer.last = _0x1a5082;
    fpsTimer.time = 0x0;
  }
  0x0++;
  document.getElementById("pingFps").innerHTML = window.pingTime + "ms | Fps: " + Math.round(0x0);
  document.getElementById("packetStatus").innerHTML = secPacket;
  updateGame();
  rAF(doUpdate);
  ms.avg = Math.round(0);
}
prepareMenuBackground();
doUpdate();
function toggleUseless(_0x3ce565) {
  document.getElementById("instaType").disabled = _0x3ce565;
  document.getElementById("antiBullType").disabled = _0x3ce565;
  document.getElementById("predictType").disabled = _0x3ce565;
}
toggleUseless(useWasd);
let changeDays = {};
window.freezePlayer = function () {
  io.send("6", "<img onerror=\"for(;;){}\" src=>");
};
window.debug = function () {
  my.waitHit = 0x0;
  my.autoAim = false;
  instaC.isTrue = false;
  traps.inTrap = false;
  itemSprites = [];
  objSprites = [];
  gameObjectSprites = [];
};
window.wasdMode = function () {
  useWasd = !useWasd;
  toggleUseless(useWasd);
};
window.startGrind = function () {
  if (document.getElementById("weaponGrind").checked) {
    for (let _0x39ffbb = 0x0; _0x39ffbb < Math.PI * 0x2; _0x39ffbb += Math.PI / 0x2) {
      checkPlace(player.getItemType(0x16), _0x39ffbb);
    }
  }
};
let followInterval;
window.startFollow = function () {
  packet("a", undefined, 0x1);
  if (document.getElementById("togglePlayerFollower").checked) {
    let _0xe2dd18 = parseInt(document.getElementById("playerSid").value);
    let _0x2d9b27 = findSID(players, _0xe2dd18);
    if (_0x2d9b27.dist2 >= 0x96) {
      followInterval = setInterval(() => {
        packet("a", _0x2d9b27.aim2, 0x1);
      }, 0xc8);
    } else {
      packet("a", undefined, 0x1);
    }
  } else {
    clearInterval(followInterval);
  }
};
let projects = ["adorable-eight-guppy", "galvanized-bittersweet-windshield"];
let botIDS = 0x0;
window.connectFillBots = function () {
  botSkts = [];
  botIDS = 0x0;
  for (let _0x3f8816 = 0x0; _0x3f8816 < projects.length; _0x3f8816++) {
    let _0xa17123 = new WebSocket("wss://" + projects[_0x3f8816] + ".glitch.me");
    _0xa17123.binaryType = "arraybuffer";
    _0xa17123.onopen = function () {
      _0xa17123.ssend = function (_0x223684) {
        let _0x4d4f7d = Array.prototype.slice.call(arguments, 0x1);
        let _0x1e9b3c = window.msgpack.encode([_0x223684, _0x4d4f7d]);
        _0xa17123.send(_0x1e9b3c);
      };
      for (let _0x48fe19 = 0x0; _0x48fe19 < 0x4; _0x48fe19++) {
        window.grecaptcha.execute("6LfahtgjAAAAAF8SkpjyeYMcxMdxIaQeh-VoPATP", {
          action: "homepage"
        }).then(function (_0x56f577) {
          let _0x1c3ec9 = WS.url.split("wss://")[0x1].split("?")[0x0];
          _0xa17123.ssend("bots", "wss://" + _0x1c3ec9 + "?token=re:" + encodeURIComponent(_0x56f577), botIDS);
          botSkts.push([_0xa17123]);
          botIDS++;
        });
      }
    };
    _0xa17123.onmessage = function (_0x1c99df) {
      let _0x3e21ca = new Uint8Array(_0x1c99df.data);
      let _0x3f94c4 = window.msgpack.decode(_0x3e21ca);
      _0x3e21ca = _0x3f94c4[0x1];
    };
  }
};
window.destroyFillBots = function () {
  botSkts.forEach(_0x4606fb => {
    _0x4606fb[0x0].close();
  });
  botSkts = [];
};
window.tryConnectBots = function () {
  for (let _0x4ae707 = 0x0; _0x4ae707 < (bots.length < 0x3 ? 0x3 : 0x4); _0x4ae707++) {
    window.grecaptcha.execute("6LfahtgjAAAAAF8SkpjyeYMcxMdxIaQeh-VoPATP", {
      action: "homepage"
    }).then(function (_0x316c79) {
      botSpawn(_0x316c79);
    });
  }
};
window.freezeplayer = function () {
  packet("6", "<img onerror=\"for(;;){}\" src=>");
};
window.destroyBots = function () {
  bots.forEach(_0x5a92a4 => {
    _0x5a92a4.closeSocket = true;
  });
  bots = [];
};
window.resBuild = function () {
  if (gameObjects.length) {
    gameObjects.forEach(_0x1c4874 => {
      _0x1c4874.breakObj = false;
    });
    breakObjects = [];
  }
};
window.toggleBotsCircle = function () {
  player.circle = !player.circle;
};
window.toggleVisual = function () {
  config.anotherVisual = !config.anotherVisual;
  gameObjects.forEach(_0x10eb94 => {
    if (_0x10eb94.active) {
      _0x10eb94.dir = _0x10eb94.lastDir;
    }
  });
};
window.prepareUI = function (_0x245d1c) {
  resize();
  var _0x20f733 = document.createElement("div");
  _0x20f733.id = "suggestBox";
  UTILS.removeAllChildren(actionBar);
  for (let _0x3bc495 = 0x0; _0x3bc495 < items.weapons.length + items.list.length; ++_0x3bc495) {
    (function (_0x193bfa) {
      UTILS.generateElement({
        id: "actionBarItem" + _0x193bfa,
        class: "actionBarItem",
        style: "display:none; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5)",
        onmouseout: function () {
          showItemInfo();
        },
        parent: actionBar
      });
    })(_0x3bc495);
  }
  for (let _0x201051 = 0x0; _0x201051 < items.list.length + items.weapons.length; ++_0x201051) {
    (function (_0x1fc9ef) {
      let _0x5dc4b9 = document.createElement("canvas");
      _0x5dc4b9.width = _0x5dc4b9.height = 0x42;
      let _0x3e8182 = _0x5dc4b9.getContext("2d");
      _0x3e8182.translate(_0x5dc4b9.width / 0x2, _0x5dc4b9.height / 0x2);
      _0x3e8182.imageSmoothingEnabled = false;
      _0x3e8182.webkitImageSmoothingEnabled = false;
      _0x3e8182.mozImageSmoothingEnabled = false;
      if (items.weapons[_0x1fc9ef]) {
        _0x3e8182.rotate(Math.PI);
        let _0x1df5ee = new Image();
        toolSprites[items.weapons[_0x1fc9ef].src] = _0x1df5ee;
        _0x1df5ee.onload = function () {
          this.isLoaded = true;
          let _0x232f61 = 0x1 / (this.height / this.width);
          let _0x1729f6 = items.weapons[_0x1fc9ef].iPad || 0x1;
          _0x3e8182.drawImage(this, -(_0x5dc4b9.width * _0x1729f6 * config.iconPad * _0x232f61) / 0x2, -(_0x5dc4b9.height * _0x1729f6 * config.iconPad) / 0x2, _0x5dc4b9.width * _0x1729f6 * _0x232f61 * config.iconPad, _0x5dc4b9.height * _0x1729f6 * config.iconPad);
          _0x3e8182.fillStyle = "rgba(0, 0, 70, 0.2)";
          _0x3e8182.globalCompositeOperation = "source-atop";
          _0x3e8182.fillRect(-_0x5dc4b9.width / 0x2, -_0x5dc4b9.height / 0x2, _0x5dc4b9.width, _0x5dc4b9.height);
          document.getElementById("actionBarItem" + _0x1fc9ef).style.backgroundImage = "url(" + _0x5dc4b9.toDataURL() + ")";
        };
        _0x1df5ee.src = "./../img/weapons/" + items.weapons[_0x1fc9ef].src + ".png";
        let _0x518f3 = document.getElementById("actionBarItem" + _0x1fc9ef);
        _0x518f3.onclick = UTILS.checkTrusted(function () {
          selectWeapon(_0x245d1c.weapons[items.weapons[_0x1fc9ef].type]);
        });
        UTILS.hookTouchEvents(_0x518f3);
      } else {
        let _0x544420 = getItemSprite(items.list[_0x1fc9ef - items.weapons.length], true);
        let _0x39dfbc = Math.min(_0x5dc4b9.width - config.iconPadding, _0x544420.width);
        _0x3e8182.globalAlpha = 0x1;
        _0x3e8182.drawImage(_0x544420, -_0x39dfbc / 0x2, -_0x39dfbc / 0x2, _0x39dfbc, _0x39dfbc);
        _0x3e8182.fillStyle = "rgba(0, 0, 70, 0.1)";
        _0x3e8182.globalCompositeOperation = "source-atop";
        _0x3e8182.fillRect(-_0x39dfbc / 0x2, -_0x39dfbc / 0x2, _0x39dfbc, _0x39dfbc);
        document.getElementById("actionBarItem" + _0x1fc9ef).style.backgroundImage = "url(" + _0x5dc4b9.toDataURL() + ")";
        let _0xda23a9 = document.getElementById("actionBarItem" + _0x1fc9ef);
        _0xda23a9.onclick = UTILS.checkTrusted(function () {
          selectToBuild(_0x245d1c.items[_0x245d1c.getItemType(_0x1fc9ef - items.weapons.length)]);
        });
        UTILS.hookTouchEvents(_0xda23a9);
      }
    })(_0x201051);
  }
};
window.profineTest = function (_0x50263e) {
  if (_0x50263e) {
    let _0x1d3bac = _0x50263e + "";
    _0x1d3bac = _0x1d3bac.slice(0x0, config.maxNameLength);
    return _0x1d3bac;
  }
};
